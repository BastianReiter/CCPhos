Staging = df_CDM_Staging,
Surgery = df_CDM_Surgery,
SystemicTherapy = df_CDM_SystemicTherapy)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track feature values after Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Transformed <- map2(.x = ls_CuratedData,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Transformed")
})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Finalize curation of data: Ineligible data (includes data that could not be curated) is turned into NA using factor conversion or other methods
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Finalize df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = factor(SampleType,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Value_Curated),
SampleAliquot = factor(SampleAliquot,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot")$Value_Curated))
# Finalize df_CDM_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Diagnosis <- df_CDM_Diagnosis %>%
mutate(LocalizationSide = factor(LocalizationSide,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Value_Curated))
# Finalize df_CDM_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Histology <- df_CDM_Histology %>%
mutate(Grading = factor(Grading,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated),
GradingLabel = factor(Grading,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Label_Curated))
# Finalize df_CDM_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Patient <- df_CDM_Patient %>%
mutate(Gender = factor(Gender,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Value_Curated),      # Convert to factor to mark ineligible values as NA and establish level order where appropriate
LastVitalStatus = factor(LastVitalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus")$Value_Curated))
# Finalize df_CDM_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Progress <- df_CDM_Progress %>%
mutate(GlobalStatusAssessment = factor(GlobalStatusAssessment,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatusAssessment")$Value_Curated),
LocalRelapse = factor(LocalRelapse,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalRelapse")$Value_Curated),
LymphnodalRelapse = factor(LymphnodalRelapse,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalRelapse")$Value_Curated),
DistantMetastasis = factor(DistantMetastasis,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "DistantMetastasis")$Value_Curated))
# Finalize df_CDM_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_RadiationTherapy <- df_CDM_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = factor(RadiationTherapyRelationToSurgery,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Value_Curated),
RadiationTherapyIntention = factor(RadiationTherapyIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Value_Curated))
# Finalize df_CDM_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Staging <- df_CDM_Staging %>%
mutate(UICCStage = factor(UICCStage,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage")$Value_Curated),
TNM_T = factor(TNM_T,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T")$Value_Curated),
TNM_N = factor(TNM_N,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N")$Value_Curated),
TNM_M = factor(TNM_M,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M")$Value_Curated),
TNM_T_Prefix = factor(TNM_T_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix")$Value_Curated),
TNM_N_Prefix = factor(TNM_N_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix")$Value_Curated),
TNM_M_Prefix = factor(TNM_M_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix")$Value_Curated))
# Finalize df_CDM_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Surgery <- df_CDM_Surgery %>%
mutate(SurgeryIntention = factor(SurgeryIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated),
ResidualAssessmentLocal = factor(ResidualAssessmentLocal,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated),
ResidualAssessmentTotal = factor(ResidualAssessmentTotal,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated))
# Finalize df_CDM_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_SystemicTherapy <- df_CDM_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = factor(SystemicTherapyRelationToSurgery,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery")$Value_Curated),
SystemicTherapyIntention = factor(SystemicTherapyIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention")$Value_Curated))
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedData <- list(BioSampling = df_CDM_BioSampling,
Diagnosis = df_CDM_Diagnosis,
Histology = df_CDM_Histology,
Metastasis = df_CDM_Metastasis,
MolecularDiagnostics = df_CDM_MolecularDiagnostics,
Patient = df_CDM_Patient,
Progress = df_CDM_Progress,
RadiationTherapy = df_CDM_RadiationTherapy,
Staging = df_CDM_Staging,
Surgery = df_CDM_Surgery,
SystemicTherapy = df_CDM_SystemicTherapy)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track Feature Values after Finalized Harmonization
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Final <- map2(.x = ls_CuratedData,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Final")
})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Merge Monitor Objects into Coherent Summaries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
{
if (nrow(ls_Monitors_Raw[[i]]) > 0)
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
dplyr::full_join(ls_Monitors_Transformed[[i]]) %>%
dplyr::full_join(ls_Monitors_Final[[i]]) %>%
tidyr::pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
dplyr::group_by(Feature, Value, IsValueEligible) %>%
dplyr::summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
dplyr::arrange(Feature, desc(IsValueEligible))
}
else
{
df_CurrentSummary <- NULL
}
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
# Name the monitor summary objects
names(ls_MonitorSummaries) <- c("Monitor_BioSampling",
"Monitor_Diagnosis",
"Monitor_Histology",
"Monitor_Metastasis",
"Monitor_MolecularDiagnostics",
"Monitor_Patient",
"Monitor_Progress",
"Monitor_RadiationTherapy",
"Monitor_Staging",
"Monitor_Surgery",
"Monitor_SystemicTherapy")
# Return both the Curated Data and the list of monitor objects as Curation Report
return(list(CuratedData = ls_CuratedData,
CurationReport = ls_MonitorSummaries))
}
devtools::load_all(".")
rm(list=ls())
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
CuratedData <- dsCCPhos::CurateDataDS("RawData")$CuratedData
df_CDM_BioSampling <- CuratedData$BioSampling
df_CDM_Diagnosis <- CuratedData$Diagnosis
df_CDM_Histology <- CuratedData$Histology
df_CDM_Metastasis <- CuratedData$Metastasis
df_CDM_MolecularDiagnostics <- CuratedData$MolecularDiagnostics
df_CDM_Patient <- CuratedData$Patient
df_CDM_Progress <- CuratedData$Progress
df_CDM_RadiationTherapy <- CuratedData$RadiationTherapy
df_CDM_Staging <- CuratedData$Staging
df_CDM_Surgery <- CuratedData$Surgery
df_CDM_SystemicTherapy <- CuratedData$SystemicTherapy
df_Events_Staging <- df_CDM_Staging %>%
mutate(EventData = TNMDocumentationDate,
EventClass = "Diagnosis",
EventSpecificationA = "Staging",
EventDetails = tidyr::nest(c(TNM_T_Prefix,
TNM_T,
TNM_N_Prefix,
TNM_N,
TNM_M_Prefix,
TNM_M,
TNM_mSymbol,
TNM_rSymbol,
TNM_ySymbol,
TNMVersion)))
?tidyr::nest
require(tidyr)
df_Events_Staging <- df_CDM_Staging %>%
mutate(EventData = TNMDocumentationDate,
EventClass = "Diagnosis",
EventSpecificationA = "Staging") %>%
nest(EventDetails = (c(TNM_T_Prefix,
TNM_T,
TNM_N_Prefix,
TNM_N,
TNM_M_Prefix,
TNM_M,
TNM_mSymbol,
TNM_rSymbol,
TNM_ySymbol,
TNMVersion)))
View(df_Events_Staging)
View(df_Events_Staging[[9]][[1]])
df_Events_Staging <- df_CDM_Staging %>%
mutate(EventDate = TNMDocumentationDate,
EventClass = "Diagnosis",
EventSpecification = "Staging") %>%
nest(EventDetails = (c(TNM_T_Prefix,
TNM_T,
TNM_N_Prefix,
TNM_N,
TNM_M_Prefix,
TNM_M,
TNM_mSymbol,
TNM_rSymbol,
TNM_ySymbol,
TNMVersion)))
View(df_CDM_Staging)
?str_glue
View(df_CDM_Patient)
View(df_CDM_Diagnosis)
View(df_CDM_Histology)
?starts_with
# Transform Staging data into Event-oriented data
df_Events_Staging <- df_CDM_Staging %>%
mutate(EventDate = TNMDocumentationDate,
EventClass = "Diagnosis",
EventSpecification = "Staging",
EventFeature_A = UICCStage,
EventFeature_B = paste0("T", TNM_T, "N", TNM_N, "M", TNM_M),
EventFeature_C = NULL) %>%
nest(EventDetails = (c(TNM_T_Prefix,
TNM_T,
TNM_N_Prefix,
TNM_N,
TNM_M_Prefix,
TNM_M,
TNM_mSymbol,
TNM_rSymbol,
TNM_ySymbol,
TNMVersion))) %>%
select(PatientID,
DiagnosisID,
starts_with("Event"))
View(RawData)
View(df_Events_Staging)
View(df_Events_Staging)
df_ADM_Events <- df_CDM_Patient %>%
left_join(df_CDM_Diagnosis, join_by(PatientID)) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
PrimaryDiagnosisDate) %>%
mutate(EventDate = PrimaryDiagnosisDate,
EventClass = "Diagnosis",
EventSpecification = "First diagnosis")
View(df_CDM_Progress)
# Transform Staging data into Event-oriented data
df_Events_Staging <- df_CDM_Staging %>%
group_by(PatientID, DiagnosisID) %>%
arrange(TNMDocumentationDate) %>%
mutate(EventDate = TNMDocumentationDate,
EventClass = "Diagnosis",
EventSpecification = "Staging",
EventOccurrence = case_when(row_number() == 1 ~ "First Staging",
row_number() == n() ~ "Last Staging",
TRUE ~ NA),
EventFeature_A = UICCStage,
EventFeature_B = paste0("T", TNM_T, "N", TNM_N, "M", TNM_M),
EventFeature_C = NULL) %>%
nest(EventDetails = (c(TNM_T_Prefix,
TNM_T,
TNM_N_Prefix,
TNM_N,
TNM_M_Prefix,
TNM_M,
TNM_mSymbol,
TNM_rSymbol,
TNM_ySymbol,
TNMVersion))) %>%
ungroup() %>%
select(PatientID,
DiagnosisID,
starts_with("Event"))
View(df_Events_Staging)
View(df_Events_Staging[[9]][[35]])
View(df_Events_Staging[[9]][[34]])
View(df_Events_Staging[[9]][[36]])
df_ADM_Events <- df_CDM_Patient %>%
left_join(df_CDM_Diagnosis, join_by(PatientID)) %>%
mutate(EventDate = PrimaryDiagnosisDate,
EventClass = "Diagnosis",
EventSpecification = "First diagnosis",
EventSignificance = NULL,
EventFeature_A = NULL,
EventFeature_B = NULL,
EventFeature_C = NULL,
EventDetails = NULL) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
PrimaryDiagnosisDate,
starts_with("Event"))
Meta_FeatureNames <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "FeatureNames")
# Save data in .rda-file and make it part of package
use_data(Meta_FeatureNames, overwrite = TRUE)
Meta_FeatureNames <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "FeatureNames")
# Save data in .rda-file and make it part of package
use_data(Meta_FeatureNames, overwrite = TRUE)
Meta_FeatureNames <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "FeatureNames")
# Save data in .rda-file and make it part of package
use_data(Meta_FeatureNames, overwrite = TRUE)
Meta_ValueSets <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(Meta_ValueSets, overwrite = TRUE)
rm(list=ls())
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
CuratedData <- dsCCPhos::CurateDataDS("RawData")$CuratedData
devtools::load_all(".")
rm(list=ls())
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
CuratedData <- dsCCPhos::CurateDataDS("RawData")$CuratedData
Meta_FeatureNames <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "FeatureNames")
# Save data in .rda-file and make it part of package
use_data(Meta_FeatureNames, overwrite = TRUE)
Meta_ValueSets <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(Meta_ValueSets, overwrite = TRUE)
Meta_FeatureNames <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "FeatureNames")
# Save data in .rda-file and make it part of package
use_data(Meta_FeatureNames, overwrite = TRUE)
Meta_ValueSets <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(Meta_ValueSets, overwrite = TRUE)
devtools::load_all(".")
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
rm(list=ls())
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
CuratedData <- dsCCPhos::CurateDataDS("RawData")$CuratedData
library(dsCCPhos)
rm(list=ls())
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
# Use require() to load package namespaces
require(dplyr)
require(lubridate)
require(purrr)
require(stringr)
require(tidyr)
CuratedData <- dsCCPhos::CurateDataDS("RawData")$CuratedData
Meta_FeatureNames <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "FeatureNames")
# Save data in .rda-file and make it part of package
use_data(Meta_FeatureNames, overwrite = TRUE)
Meta_ValueSets <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(Meta_ValueSets, overwrite = TRUE)
devtools::load_all(".")
rm(list=ls())
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
CuratedData <- dsCCPhos::CurateDataDS("RawData")$CuratedData
df_CDM_BioSampling <- CuratedData$BioSampling
df_CDM_Diagnosis <- CuratedData$Diagnosis
df_CDM_Histology <- CuratedData$Histology
df_CDM_Metastasis <- CuratedData$Metastasis
df_CDM_MolecularDiagnostics <- CuratedData$MolecularDiagnostics
df_CDM_Patient <- CuratedData$Patient
df_CDM_Progress <- CuratedData$Progress
df_CDM_RadiationTherapy <- CuratedData$RadiationTherapy
df_CDM_Staging <- CuratedData$Staging
df_CDM_Surgery <- CuratedData$Surgery
df_CDM_SystemicTherapy <- CuratedData$SystemicTherapy
df_ADM_Events <- df_CDM_Patient %>%
left_join(df_CDM_Diagnosis, join_by(PatientID)) %>%
mutate(EventDate = InitialDiagnosisDate,
EventClass = "Diagnosis",
EventSubclass = "Initial diagnosis",
EventOrderSignificance = NULL,
EventFeature_A = NULL,
EventFeature_B = NULL,
EventFeature_C = NULL,
EventDetails = NULL) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
InitialDiagnosisDate,
starts_with("Event"))
# Transform Staging data into Event-oriented data
df_Events_Staging <- df_CDM_Staging %>%
group_by(PatientID, DiagnosisID) %>%
arrange(TNMDocumentationDate) %>%
mutate(EventDate = TNMDocumentationDate,
EventClass = "Diagnosis",
EventSubclass = "Staging",
EventOrderSignificance = case_when(row_number() == 1 ~ "First Staging",
row_number() == n() ~ "Last Staging",
TRUE ~ NA),
EventFeature_A = UICCStage,
EventFeature_B = paste0("T", TNM_T, "N", TNM_N, "M", TNM_M),
EventFeature_C = NULL) %>%
nest(EventDetails = (c(TNM_T_Prefix,
TNM_T,
TNM_N_Prefix,
TNM_N,
TNM_M_Prefix,
TNM_M,
TNM_mSymbol,
TNM_rSymbol,
TNM_ySymbol,
TNMVersion))) %>%
ungroup() %>%
select(PatientID,
DiagnosisID,
starts_with("Event"))
# Transform Staging data into Event-oriented data
df_Events_Staging <- df_CDM_Staging %>%
group_by(PatientID, DiagnosisID) %>%
arrange(StagingReportDate) %>%
mutate(EventDate = StagingReportDate,
EventClass = "Diagnosis",
EventSubclass = "Staging",
EventOrderSignificance = case_when(row_number() == 1 ~ "First Staging",
row_number() == n() ~ "Last Staging",
TRUE ~ NA),
EventFeature_A = UICCStage,
EventFeature_B = paste0("T", TNM_T, "N", TNM_N, "M", TNM_M),
EventFeature_C = NULL) %>%
nest(EventDetails = (c(TNM_T_Prefix,
TNM_T,
TNM_N_Prefix,
TNM_N,
TNM_M_Prefix,
TNM_M,
TNM_mSymbol,
TNM_rSymbol,
TNM_ySymbol,
TNMVersion))) %>%
ungroup() %>%
select(PatientID,
DiagnosisID,
starts_with("Event"))
View(df_CDM_Progress)
# Transform Progress data into Event-oriented data
df_Events_Progress <- df_CDM_Progress %>%
group_by(PatientID, DiagnosisID) %>%
arrange(ProgressReportDate) %>%
mutate(EventDate = ProgressReportDate,
EventClass = "Diagnosis",
EventSubclass = "Progress",
EventOrderSignificance = case_when(row_number() == 1 ~ "First Progress Report",
row_number() == n() ~ "Last Progress Report",
TRUE ~ NA),
EventFeature_A = GlobalStatus,
EventFeature_B = NULL,
EventFeature_C = NULL) %>%
nest(EventDetails = (c(LocalRelapseDate,
LocalStatus,
LymphnodalStatus,
MetastasisStatus))) %>%
ungroup() %>%
select(PatientID,
DiagnosisID,
starts_with("Event"))
View(df_Events_Progress)
View(df_Events_Progress[[8]][[1]])
View(df_Events_Progress[[8]][[1]])
View(df_Events_Progress[[8]][[3]])
View(df_Events_Progress[[8]][[6]])
View(df_CDM_SystemicTherapy)
