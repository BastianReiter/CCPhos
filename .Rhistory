# Rename feature names according to look-up vector
dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
}
else { return(dataframe) }
})
Rulesets <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
Rules_DataType <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_DataType_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("is.character(", featurename, ")"))) %>%
list_rbind()
Rules_Missings <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_Missings_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("is.na(", featurename, ")"))) %>%
list_rbind()
return(rbind(Rules_DataType,
Rules_Missings))
# if (!is_empty(dataframe))
# {
#     # Rename feature names according to look-up vector
#     dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
# }
}) %>% set_names(names(RawDataSet))
Rules_RDS_BioSampling <- validator(.data = Rulesets$RDS_BioSampling)
Output_BioSampling <- confront(RawDataSet$RDS_BioSampling,
Rules_RDS_BioSampling)
Report_BioSampling <- summary(Output_BioSampling)
View(Report_BioSampling)
View(RawDataSet$RDS_BioSampling)
RawDataSet <- RawDataSet %>%
imap(function(dataframe, name)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
name <- str_remove(name, "RDS_")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Curated
if (!is_empty(dataframe))
{
# Rename feature names according to look-up vector
dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
}
else { return(dataframe) }
})
Rulesets <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
Rules_DataType <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_DataType_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("is.character(", featurename, ")"))) %>%
list_rbind()
Rules_Missings <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_Missings_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("is.na(", featurename, ")"))) %>%
list_rbind()
return(rbind(Rules_DataType,
Rules_Missings))
# if (!is_empty(dataframe))
# {
#     # Rename feature names according to look-up vector
#     dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
# }
}) %>% set_names(names(RawDataSet))
Output_BioSampling <- confront(RawDataSet$RDS_BioSampling,
Rules_RDS_BioSampling)
Report_BioSampling <- summary(Output_BioSampling)
View(Report_BioSampling)
View(RawDataSet$RDS_BioSampling)
Rulesets <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
Rules_DataType <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_DataType_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("is.character(", featurename, ")"))) %>%
list_rbind()
Rules_Missings <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_Missings_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("!is.na(", featurename, ")"))) %>%
list_rbind()
return(rbind(Rules_DataType,
Rules_Missings))
# if (!is_empty(dataframe))
# {
#     # Rename feature names according to look-up vector
#     dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
# }
}) %>% set_names(names(RawDataSet))
Output_BioSampling <- confront(RawDataSet$RDS_BioSampling,
Rules_RDS_BioSampling)
Report_BioSampling <- summary(Output_BioSampling)
View(Report_BioSampling)
RawDataSet <- RawDataSet %>%
imap(function(dataframe, name)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
name <- str_remove(name, "RDS_")   # Remove "RDS_" prefix from table names
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Curated
if (!is_empty(dataframe))
{
# Rename feature names according to look-up vector
dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
}
else { return(dataframe) }
})
Rulesets <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
Rules_DataType <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_DataType_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("is.character(", featurename, ")"))) %>%
list_rbind()
Rules_Missings <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_Missings_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("!is.na(", featurename, ")"))) %>%
list_rbind()
return(rbind(Rules_DataType,
Rules_Missings))
# if (!is_empty(dataframe))
# {
#     # Rename feature names according to look-up vector
#     dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
# }
}) %>% set_names(names(RawDataSet))
Output_BioSampling <- confront(RawDataSet$RDS_BioSampling,
Rules_RDS_BioSampling)
Report_BioSampling <- summary(Output_BioSampling)
View(Report_BioSampling)
ValidationRules <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
Rules_DataType <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_DataType_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("is.character(", featurename, ")"))) %>%
list_rbind()
Rules_Missings <- vc_FeatureNames %>%
map(\(featurename) data.frame(name = paste0("Check_Missings_RDS_", tablename, "_", featurename),
description = "",
rule = paste0("!is.na(", featurename, ")"))) %>%
list_rbind()
return(rbind(Rules_DataType,
Rules_Missings))
}) %>% set_names(names(RawDataSet))
Output_BioSampling <- confront(RawDataSet$RDS_BioSampling,
ValidationRules$RDS_BioSampling)
Output_BioSampling <- confront(RawDataSet$RDS_BioSampling,
ValidationRules$RDS_BioSampling)
Output_BioSampling <- confront(RawDataSet$RDS_BioSampling,
validator(.data = ValidationRules$RDS_BioSampling))
Report_BioSampling <- summary(Output_BioSampling)
View(Report_BioSampling)
Plot_BioSampling <- plot(Output_BioSampling)
?map2
?pmap
ConfrontRDSData <- pmap(.l = list(RawDataSet,
ValidationRules),
.f = \(dataframe, ruleset) confront(dataframe,
validator(.data = ruleset)))
ConfrontRDSData <- pmap(.l = list(RawDataSet,
ValidationRules),
.f = \(dataframe, ruleset) confront(dataframe,
validator(.data = ruleset)) %>% summary())
ValidationRules <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
# Raw feature names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Raw
# Corresponding curated feature names (used for ensured compatibility with R naming rules)
names(vc_FeatureNames) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
# Validation rules: data type
Rules_DataType <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("Data type character | ", tablename, " | ", vc_Features[curatedfeaturename]),
description = "",
rule = paste0("is.character(", curatedfeaturename, ")"))) %>%
list_rbind()
# Validation rules: missing data
Rules_Missings <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("Non-missing values | RDS_", tablename, " | ", vc_Features[curatedfeaturename]),
description = "",
rule = paste0("!is.na(", featurename, ")"))) %>%
list_rbind()
# Return consolidated data frame of validation rules
return(rbind(Rules_DataType,
Rules_Missings))
}) %>% set_names(names(RawDataSet))
ValidationRules <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
# Raw feature names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Raw
# Corresponding curated feature names (used for ensured compatibility with R naming rules)
names(vc_FeatureNames) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
# Validation rules: data type
Rules_DataType <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("Data type character | ", tablename, " | ", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("is.character(", curatedfeaturename, ")"))) %>%
list_rbind()
# Validation rules: missing data
Rules_Missings <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("Non-missing values | RDS_", tablename, " | ", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("!is.na(", featurename, ")"))) %>%
list_rbind()
# Return consolidated data frame of validation rules
return(rbind(Rules_DataType,
Rules_Missings))
}) %>% set_names(names(RawDataSet))
ValidationRules <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
# Raw feature names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Raw
# Corresponding curated feature names (used for ensured compatibility with R naming rules)
names(vc_FeatureNames) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
# Validation rules: data type
Rules_DataType <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("Data type character | ", tablename, " | ", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("is.character(", curatedfeaturename, ")"))) %>%
list_rbind()
# Validation rules: missing data
Rules_Missings <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("Non-missing values | RDS_", tablename, " | ", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("!is.na(", curatedfeaturename, ")"))) %>%
list_rbind()
# Return consolidated data frame of validation rules
return(rbind(Rules_DataType,
Rules_Missings))
}) %>% set_names(names(RawDataSet))
ValidationReports <- pmap(.l = list(RawDataSet,
ValidationRules),
.f = \(dataframe, ruleset) confront(dataframe,
validator(.data = ruleset)) %>% summary())
View(ValidationReports$RDS_Patient)
ValidationRules <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
# Raw feature names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Raw
# Corresponding curated feature names (used for ensured compatibility with R naming rules)
names(vc_FeatureNames) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
# Validation rules: data type
Rules_DataType <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("DataTypeCharacter__", tablename, "__", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("is.character(", curatedfeaturename, ")"))) %>%
list_rbind()
# Validation rules: missing data
Rules_Missings <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("NonMissingValues__", tablename, "__", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("!is.na(", curatedfeaturename, ")"))) %>%
list_rbind()
# Return consolidated data frame of validation rules
return(rbind(Rules_DataType,
Rules_Missings))
}) %>% set_names(names(RawDataSet))
ValidationReports <- pmap(.l = list(RawDataSet,
ValidationRules),
.f = \(dataframe, ruleset) confront(dataframe,
validator(.data = ruleset)) %>% summary())
View(ValidationReports$RDS_Patient)
ValidationRules <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
# Raw feature names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Raw
# Corresponding curated feature names (used for ensured compatibility with R naming rules)
names(vc_FeatureNames) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
# Validation rules: data type
Rules_DataType <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("DataTypeCharacter###", tablename, "###", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("is.character(", curatedfeaturename, ")"))) %>%
list_rbind()
# Validation rules: missing data
Rules_Missings <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("NonMissingValues###", tablename, "###", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("!is.na(", curatedfeaturename, ")"))) %>%
list_rbind()
# Return consolidated data frame of validation rules
return(rbind(Rules_DataType,
Rules_Missings))
}) %>% set_names(names(RawDataSet))
ValidationReports <- pmap(.l = list(RawDataSet,
ValidationRules),
.f = \(dataframe, ruleset) confront(dataframe,
validator(.data = ruleset)) %>% summary())
View(ValidationReports$RDS_Patient)
ValidationRules <- names(RawDataSet) %>%
map(function(tablename)
{
# Get table feature names from meta data
tablename <- str_remove(tablename, "RDS_")   # Remove "RDS_" prefix from table names
# Raw feature names
vc_FeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Raw
# Corresponding curated feature names (used for ensured compatibility with R naming rules)
names(vc_FeatureNames) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == tablename)$FeatureName_Curated
# Validation rules: data type
Rules_DataType <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("DataTypeCharacter...", tablename, "...", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("is.character(", curatedfeaturename, ")"))) %>%
list_rbind()
# Validation rules: missing data
Rules_Missings <- names(vc_FeatureNames) %>%
map(\(curatedfeaturename) data.frame(name = paste0("NonMissingValues...", tablename, "...", vc_FeatureNames[curatedfeaturename]),
description = "",
rule = paste0("!is.na(", curatedfeaturename, ")"))) %>%
list_rbind()
# Return consolidated data frame of validation rules
return(rbind(Rules_DataType,
Rules_Missings))
}) %>% set_names(names(RawDataSet))
ValidationReports <- pmap(.l = list(RawDataSet,
ValidationRules),
.f = \(dataframe, ruleset) confront(dataframe,
validator(.data = ruleset)) %>% summary())
View(ValidationReports$RDS_Patient)
devtools::load_all(".")
devtools::load_all(".")
library(dsCCPhos)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# OPTIONAL: Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Special tables 'sample' and 'molecularmarker' might be empty
sample <- data.frame()
if (nrow(RawDataSet$sample) > 0)
{
sample <- as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs))
}
molecularmarker <- data.frame()
if (nrow(RawDataSet$`molecular-marker`) > 0)
{
molecularmarker <- as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs))
}
# Compile list 'RawDataSet'
#~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- list(sample = sample,
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = molecularmarker,
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Use require() to load package namespaces
require(dplyr)
require(purrr)
# Go through available data frames in RawDataSet and check for completeness
TableCheckPresent <- RawDataSet %>%
imap(function(dataframe, name)
{
TableExists <- (!is_empty(dataframe))
RequiredFeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
PresentFeatureNames <- names(dataframe)
FeatureExistence <- tibble(FeatureName = RequiredFeatureNames) %>%
mutate(Exists = case_when(FeatureName %in% PresentFeatureNames ~ TRUE,
TRUE ~ FALSE))
MissingFeatures <- RequiredFeatureNames[!(RequiredFeatureNames %in% PresentFeatureNames)]
TableComplete <- (length(MissingFeatures) == 0)
return(list(TableExists = TableExists,
TableComplete = TableComplete,
FeatureExistence = FeatureExistence,
MissingFeatures = MissingFeatures))
})
tibble(ABC = c("a", "b", "c"))
Test2 <- c("A", "B", "C")
tibble(test = Test2)
# Go through available data frames in RawDataSet and check for completeness
TableCheckPresent <- RawDataSet %>%
imap(function(dataframe, name)
{
TableExists <- (!is_empty(dataframe))
RequiredFeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
PresentFeatureNames <- names(dataframe)
FeatureExistence <- tibble(FeatureName = RequiredFeatureNames)
# mutate(Exists = case_when(FeatureName %in% PresentFeatureNames ~ TRUE,
#                           TRUE ~ FALSE))
MissingFeatures <- RequiredFeatureNames[!(RequiredFeatureNames %in% PresentFeatureNames)]
TableComplete <- (length(MissingFeatures) == 0)
return(list(TableExists = TableExists,
TableComplete = TableComplete,
FeatureExistence = FeatureExistence,
MissingFeatures = MissingFeatures))
})
# Go through available data frames in RawDataSet and check for completeness
TableCheckPresent <- RawDataSet %>%
imap(function(dataframe, name)
{
TableExists <- (!is_empty(dataframe))
RequiredFeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
PresentFeatureNames <- names(dataframe)
FeatureExistence <- RequiredFeatureNames
# mutate(Exists = case_when(FeatureName %in% PresentFeatureNames ~ TRUE,
#                           TRUE ~ FALSE))
MissingFeatures <- RequiredFeatureNames[!(RequiredFeatureNames %in% PresentFeatureNames)]
TableComplete <- (length(MissingFeatures) == 0)
return(list(TableExists = TableExists,
TableComplete = TableComplete,
FeatureExistence = FeatureExistence,
MissingFeatures = MissingFeatures))
})
# Go through available data frames in RawDataSet and check for completeness
TableCheckPresent <- RawDataSet %>%
imap(function(dataframe, name)
{
TableExists <- (!is_empty(dataframe))
RequiredFeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
PresentFeatureNames <- names(dataframe)
FeatureExistence <- PresentFeatureNames
# mutate(Exists = case_when(FeatureName %in% PresentFeatureNames ~ TRUE,
#                           TRUE ~ FALSE))
MissingFeatures <- RequiredFeatureNames[!(RequiredFeatureNames %in% PresentFeatureNames)]
TableComplete <- (length(MissingFeatures) == 0)
return(list(TableExists = TableExists,
TableComplete = TableComplete,
FeatureExistence = FeatureExistence,
MissingFeatures = MissingFeatures))
})
# Go through available data frames in RawDataSet and check for completeness
TableCheckPresent <- RawDataSet %>%
imap(function(dataframe, name)
{
TableExists <- (!is_empty(dataframe))
RequiredFeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == str_remove(name, "RDS_"))$FeatureName_Raw
PresentFeatureNames <- names(dataframe)
FeatureExistence <- RequiredFeatureNames
mutate(Exists = case_when(FeatureName %in% PresentFeatureNames ~ TRUE,
TRUE ~ FALSE))
MissingFeatures <- RequiredFeatureNames[!(RequiredFeatureNames %in% PresentFeatureNames)]
TableComplete <- (length(MissingFeatures) == 0)
return(list(TableExists = TableExists,
TableComplete = TableComplete,
FeatureExistence = FeatureExistence,
MissingFeatures = MissingFeatures))
})
# Go through available data frames in RawDataSet and check for completeness
TableCheckPresent <- RawDataSet %>%
imap(function(dataframe, name)
{
TableExists <- (!is_empty(dataframe))
RequiredFeatureNames <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == str_remove(name, "RDS_"))$FeatureName_Raw
PresentFeatureNames <- names(dataframe)
FeatureExistence <- tibble(FeatureName = RequiredFeatureNames) %>%
mutate(Exists = case_when(FeatureName %in% PresentFeatureNames ~ TRUE,
TRUE ~ FALSE))
MissingFeatures <- RequiredFeatureNames[!(RequiredFeatureNames %in% PresentFeatureNames)]
TableComplete <- (length(MissingFeatures) == 0)
return(list(TableExists = TableExists,
TableComplete = TableComplete,
FeatureExistence = FeatureExistence,
MissingFeatures = MissingFeatures))
})
