library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteA$aggregateMethods()
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data.frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = T)
datashield.symbols(CCPConnections)
datashield.tables(CCPConnections)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
?ds.mean
?ds.unique
Server_SiteA$aggregateMethods()
?ds.mean
Test <- ds.mean(x = "Patient$geburtsdatum",
type = "split",
datasources = CCPConnections)
Test$Mean.by.Study
Test <- ds.mean(x = "Patient$geburtsdatum",
type = "combine",
datasources = CCPConnections)
Test$Global.Mean
Test <- ds.mean(x = "Patient$geburtsdatum",
type = "both",
datasources = CCPConnections)
Test$Mean.by.Study
Test$ValidityMessage
Test$Nstudies
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
ls(envir = Server_SiteA)
Server_SiteA$workspaces()
Test <- ds.mean(x = "Patient$geburtsdatum",
type = "both",
datasources = CCPConnections)
RawData <- CCPTestData_A
ls_CuratedData <- purrr::map(.x = names(RawData),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(RawData[[TableName]], any_of(vc_Lookup))      # Returns a tibble
})
# Re-set table names
names(ls_CuratedData) <- names(RawData)
ls_MonitorFeatures_BioSampling <- list(SampleType = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Value_Curated,
SampleAliquot = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot")$Value_Curated)
ls_MonitorFeatures_Diagnosis <- list(ICD10Version = NULL,
LocalizationSide = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Value_Curated)
ls_MonitorFeatures_Histology <- list(Grading = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated)
ls_MonitorFeatures_Metastasis <- list(DistantMetastasisLocalization = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Metastasis" & FeatureName == "DistantMetastasisLocalization")$Value_Curated)
ls_MonitorFeatures_MolecularDiagnostics <- list()
ls_MonitorFeatures_Patient <- list(Gender = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Value_Curated,
LastVitalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus")$Value_Curated)
ls_MonitorFeatures_Progress <- list(GlobalStatusAssessment = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatusAssessment")$Value_Curated,
LocalRelapse = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalRelapse")$Value_Curated,
LymphnodalRelapse = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalRelapse")$Value_Curated,
DistantMetastasis = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "DistantMetastasis")$Value_Curated)
ls_MonitorFeatures_RadiationTherapy <- list(RadiationTherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Value_Curated,
RadiationTherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Value_Curated)
ls_MonitorFeatures_Staging <- list(UICCStage = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage")$Value_Curated,
TNM_T = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T")$Value_Curated,
TNM_N = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N")$Value_Curated,
TNM_M = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M")$Value_Curated,
TNM_T_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix")$Value_Curated,
TNM_N_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix")$Value_Curated,
TNM_M_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix")$Value_Curated)
ls_MonitorFeatures_Surgery <- list(SurgeryIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated,
ResidualAssessmentLocal = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated,
ResidualAssessmentTotal = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated)
ls_MonitorFeatures_SystemicTherapy <- list(IsChemotherapy = NULL,
IsImmunotherapy = NULL,
IsHormoneTherapy = NULL,
IsBoneMarrowTransplant = NULL,
ChemotherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "ChemotherapyIntention")$Value_Curated,
ChemotherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "ChemotherapyRelationToSurgery")$Value_Curated)
# Put all objects in one list object to make them passable to functions (alphabetic order)
ls_MonitorFeatures_All <- list(ls_MonitorFeatures_BioSampling,
ls_MonitorFeatures_Diagnosis,
ls_MonitorFeatures_Histology,
ls_MonitorFeatures_Metastasis,
ls_MonitorFeatures_MolecularDiagnostics,
ls_MonitorFeatures_Patient,
ls_MonitorFeatures_Progress,
ls_MonitorFeatures_RadiationTherapy,
ls_MonitorFeatures_Staging,
ls_MonitorFeatures_Surgery,
ls_MonitorFeatures_SystemicTherapy)
ls_Monitors_Raw <- purrr::map2(.x = ls_CuratedData,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Raw")
})
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- ls_CuratedData$BioSampling
df_CDM_Diagnosis <- ls_CuratedData$Diagnosis
df_CDM_Histology <- ls_CuratedData$Histology
df_CDM_Metastasis <- ls_CuratedData$Metastasis
df_CDM_MolecularDiagnostics <- ls_CuratedData$MolecularDiagnostics
df_CDM_Patient <- ls_CuratedData$Patient
df_CDM_Progress <- ls_CuratedData$Progress
df_CDM_RadiationTherapy <- ls_CuratedData$RadiationTherapy
df_CDM_Staging <- ls_CuratedData$Staging
df_CDM_Surgery <- ls_CuratedData$Surgery
df_CDM_SystemicTherapy <- ls_CuratedData$SystemicTherapy
# Transform df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = dsCCPhos::Recode(SampleType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
#--------------------------------------------------
SampleAliquot = dsCCPhos::Recode(SampleAliquot, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot"),
set_names(Value_Curated, Value_Raw))))
?regex
rlang::last_trace()
?str_escape
devtools::load_all(".")
# Transform df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = dsCCPhos::Recode(SampleType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
#--------------------------------------------------
SampleAliquot = dsCCPhos::Recode(SampleAliquot, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot"),
set_names(Value_Curated, Value_Raw))))
devtools::load_all(".")
# Transform df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = dsCCPhos::Recode(SampleType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
#--------------------------------------------------
SampleAliquot = dsCCPhos::Recode(SampleAliquot, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot"),
set_names(Value_Curated, Value_Raw))))
?regex
devtools::load_all(".")
# Transform df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = dsCCPhos::Recode(SampleType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
#--------------------------------------------------
SampleAliquot = dsCCPhos::Recode(SampleAliquot, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot"),
set_names(Value_Curated, Value_Raw))))
Dictionary <- with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))
Dictionary
# Look-up Values come from names(Dictionary)
vc_LookupValues <- grep(paste0("^",      # Embrace Lookup Values with "^" and "$" to isolate them, so that for example "R" is not recognized (and replaced) in "CR", but only when it stands isolated
stringr::str_escape(names(Dictionary)),      # Introduce escaping of special characters, for example "(" and "/"
"$"))
# Look-up Values come from names(Dictionary)
vc_LookupValues <- paste0("^",      # Embrace Lookup Values with "^" and "$" to isolate them, so that for example "R" is not recognized (and replaced) in "CR", but only when it stands isolated
stringr::str_escape(names(Dictionary)),      # Introduce escaping of special characters, for example "(" and "/"
"$")
devtools::load_all(".")
# Transform df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = dsCCPhos::Recode(SampleType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
#--------------------------------------------------
SampleAliquot = dsCCPhos::Recode(SampleAliquot, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot"),
set_names(Value_Curated, Value_Raw))))
rm(list=ls())
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Check out some server properties
Server_SiteA$config()
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = T)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
Test <- ds.mean(x = "Patient$geburtsdatum",
type = "both",
datasources = CCPConnections)
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
# Check out some server properties
Server_SiteA$config()
library(dsCCPhos)
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteA$aggregateMethods()
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = T)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
Server_SiteA$assignMethods()
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
RawData <- CCPTestData_A
ls_CuratedData <- purrr::map(.x = names(RawData),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(RawData[[TableName]], any_of(vc_Lookup))      # Returns a tibble
})
# Re-set table names
names(ls_CuratedData) <- names(RawData)
ls_MonitorFeatures_BioSampling <- list(SampleType = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Value_Curated,
SampleAliquot = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot")$Value_Curated)
ls_MonitorFeatures_Diagnosis <- list(ICD10Version = NULL,
LocalizationSide = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Value_Curated)
ls_MonitorFeatures_Histology <- list(Grading = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated)
ls_MonitorFeatures_Metastasis <- list(DistantMetastasisLocalization = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Metastasis" & FeatureName == "DistantMetastasisLocalization")$Value_Curated)
ls_MonitorFeatures_MolecularDiagnostics <- list()
ls_MonitorFeatures_Patient <- list(Gender = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Value_Curated,
LastVitalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus")$Value_Curated)
ls_MonitorFeatures_Progress <- list(GlobalStatusAssessment = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatusAssessment")$Value_Curated,
LocalRelapse = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalRelapse")$Value_Curated,
LymphnodalRelapse = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalRelapse")$Value_Curated,
DistantMetastasis = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "DistantMetastasis")$Value_Curated)
ls_MonitorFeatures_RadiationTherapy <- list(RadiationTherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Value_Curated,
RadiationTherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Value_Curated)
ls_MonitorFeatures_Staging <- list(UICCStage = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage")$Value_Curated,
TNM_T = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T")$Value_Curated,
TNM_N = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N")$Value_Curated,
TNM_M = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M")$Value_Curated,
TNM_T_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix")$Value_Curated,
TNM_N_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix")$Value_Curated,
TNM_M_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix")$Value_Curated)
ls_MonitorFeatures_Surgery <- list(SurgeryIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated,
ResidualAssessmentLocal = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated,
ResidualAssessmentTotal = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated)
ls_MonitorFeatures_SystemicTherapy <- list(IsChemotherapy = NULL,
IsImmunotherapy = NULL,
IsHormoneTherapy = NULL,
IsBoneMarrowTransplant = NULL,
ChemotherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "ChemotherapyIntention")$Value_Curated,
ChemotherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "ChemotherapyRelationToSurgery")$Value_Curated)
# Put all objects in one list object to make them passable to functions (alphabetic order)
ls_MonitorFeatures_All <- list(ls_MonitorFeatures_BioSampling,
ls_MonitorFeatures_Diagnosis,
ls_MonitorFeatures_Histology,
ls_MonitorFeatures_Metastasis,
ls_MonitorFeatures_MolecularDiagnostics,
ls_MonitorFeatures_Patient,
ls_MonitorFeatures_Progress,
ls_MonitorFeatures_RadiationTherapy,
ls_MonitorFeatures_Staging,
ls_MonitorFeatures_Surgery,
ls_MonitorFeatures_SystemicTherapy)
ls_Monitors_Raw <- purrr::map2(.x = ls_CuratedData,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Raw")
})
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- ls_CuratedData$BioSampling
df_CDM_Diagnosis <- ls_CuratedData$Diagnosis
df_CDM_Histology <- ls_CuratedData$Histology
df_CDM_Metastasis <- ls_CuratedData$Metastasis
df_CDM_MolecularDiagnostics <- ls_CuratedData$MolecularDiagnostics
df_CDM_Patient <- ls_CuratedData$Patient
df_CDM_Progress <- ls_CuratedData$Progress
df_CDM_RadiationTherapy <- ls_CuratedData$RadiationTherapy
df_CDM_Staging <- ls_CuratedData$Staging
df_CDM_Surgery <- ls_CuratedData$Surgery
df_CDM_SystemicTherapy <- ls_CuratedData$SystemicTherapy
# Transform df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = dsCCPhos::Recode(SampleType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
#--------------------------------------------------
SampleAliquot = dsCCPhos::Recode(SampleAliquot, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Diagnosis <- df_CDM_Diagnosis %>%
mutate(ICD10Version = as.integer(str_extract(ICD10Version, "\\d+")),      # Extract ICD-10 catalogue version year from string
#------------------------------------------------
LocalizationSide = str_to_upper(LocalizationSide),
LocalizationSide = str_remove_all(LocalizationSide, " "),
LocalizationSide = dsCCPhos::Recode(LocalizationSide, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Histology <- df_CDM_Histology %>%
mutate(HistologyID = as.integer(str_extract(HistologyID, "\\d+")),      # Extract integer number from string in HistologyID. Serves as surrogate for chronological order of events.
#----------------------------------------------------
Grading = str_to_upper(Grading),
Grading = str_remove_all(Grading, " "),
Grading = str_replace_all(Grading, "\\|", "I"),      # Replace symbol for Roman "One"
Grading = dsCCPhos::Recode(Grading, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading"),
set_names(Value_Curated, Value_Raw))))
devtools::load_all(".")
library(dsCCPhos)
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteA$assignMethods()
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = T)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
library(dsCCPhos)
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
