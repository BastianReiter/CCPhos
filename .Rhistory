Grading = str_remove_all(Grading, " "),
Grading = str_replace_all(Grading, "\\|", "I"),      # Replace symbol for Roman "One"
Grading = dsCCPhos::Recode(Grading, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDS_Metastasis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Metastasis <- df_CDS_Metastasis %>%
mutate(MetastasisDiagnosisDate = lubridate::as_date(MetastasisDiagnosisDate, format = "%d.%m.%Y"),
#--------------------------------------------------
HasMetastasis = as.logical(HasMetastasis),
#--------------------------------------------------
MetastasisLocalization = str_to_upper(MetastasisLocalization),
MetastasisLocalization = str_remove_all(MetastasisLocalization, " "))
# Transform df_CDS_MolecularDiagnostics
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_MolecularDiagnostics <- df_CDS_MolecularDiagnostics %>%
mutate(MolecularDiagnosticsDate = lubridate::as_date(MolecularDiagnosticsDate, format = "%d.%m.%Y"))
# Transform df_CDS_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Patient <- df_CDS_Patient %>%
mutate(Gender = str_to_upper(Gender),      # Convert all lower to upper letters
Gender = str_remove_all(Gender, " "),      # Eliminate spaces
Gender = dsCCPhos::Recode(Gender, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
LastVitalStatusDate = lubridate::as_date(LastVitalStatusDate, format = "%m.%Y") + days(14),
#----------------------------------------------------
LastVitalStatus = dsCCPhos::Recode(LastVitalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDS_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Progress <- df_CDS_Progress %>%
mutate(ProgressReportDate = lubridate::as_date(ProgressReportDate, format = "%d.%m.%Y"),
#----------------------------------------------------
GlobalStatus = dsCCPhos::Recode(GlobalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatus"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
LocalStatus = dsCCPhos::Recode(LocalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalStatus"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
LymphnodalStatus = dsCCPhos::Recode(LymphnodalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalStatus"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
MetastasisStatus = dsCCPhos::Recode(MetastasisStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "MetastasisStatus"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDS_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_RadiationTherapy <- df_CDS_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = dsCCPhos::Recode(RadiationTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------
RadiationTherapyIntention = dsCCPhos::Recode(RadiationTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------
RadiationTherapyStart = as_date(RadiationTherapyStart, format = "%d.%m.%Y"),
RadiationTherapyEnd = as_date(RadiationTherapyEnd, format = "%d.%m.%Y"))
# Transform df_CDS_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Staging <- df_CDS_Staging %>%
mutate(StagingReportDate = lubridate::as_date(StagingReportDate, format = "%d.%m.%Y"),
#------------------------------------------------------
UICCStage = str_to_upper(UICCStage),
UICCStage = str_remove_all(UICCStage, " "),
UICCStage = str_replace_all(UICCStage, c("0A" = "0a",      # For specific values, (re)turn upper to lower letters
"0IS" = "0is")),
UICCStage = str_replace_all(UICCStage, "\\|", "I"),      # Replace vertical bar symbol with Roman "One"
UICCStage = dsCCPhos::Recode(UICCStage, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_T = str_to_lower(TNM_T),      # Convert all upper to lower letters
TNM_T = str_remove_all(TNM_T, " "),
TNM_T = str_replace_all(TNM_T, c("is\\(dcis\\)" = "is(DCIS)",      # For specific values, (re)turn lower to upper letters
"is\\(lcis\\)" = "is(LCIS)",
"t1mi" = "T1mi",
"x" = "X")),
TNM_T = str_replace_all(TNM_T, c("1\\(sm\\)" = "1b",
"1\\(sm1\\)" = "1b",
"1\\(sm2\\)" = "1b",
"1\\(sm3\\)" = "1b",
"1\\(sn3\\)" = "1b")),      # In esophageal cancer, T1b tumors can be subdivided depending on area of affected submucosa. This operation eliminates this subdivision.
TNM_T = dsCCPhos::Recode(TNM_T, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_N = str_to_lower(TNM_N),
TNM_N = str_remove_all(TNM_N, " "),
TNM_N = str_replace_all(TNM_N, c("x" = "X",
"x\\(sn\\)" = "X(sn)",
"0sn" = "0(sn)")),
TNM_N = dsCCPhos::Recode(TNM_N, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_M = str_to_lower(TNM_M),      # Convert all upper to lower letters
TNM_M = str_remove_all(TNM_M, " "),
TNM_M = str_replace_all(TNM_M, c("x" = "X")),
TNM_M = dsCCPhos::Recode(TNM_M, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_ySymbol = str_to_lower(TNM_ySymbol),
TNM_ySymbol = str_remove_all(TNM_ySymbol, " "),
TNM_ySymbol = ifelse(TNM_ySymbol != "y" & (str_starts(TNM_T_Prefix, "y") | str_starts(TNM_N_Prefix, "y") | str_starts(TNM_M_Prefix, "y")), "y", TNM_ySymbol),
#--------------------------------------------------
TNM_rSymbol = str_to_lower(TNM_rSymbol),
TNM_rSymbol = str_remove_all(TNM_rSymbol, " "),
TNM_rSymbol = ifelse(TNM_rSymbol != "r" & (str_starts(TNM_T_Prefix, "r") | str_starts(TNM_N_Prefix, "r") | str_starts(TNM_M_Prefix, "r")), "r", TNM_ySymbol),
#--------------------------------------------------
TNM_T_Prefix = str_to_lower(TNM_T_Prefix),
TNM_T_Prefix = str_remove_all(TNM_T_Prefix, " "),
TNM_T_Prefix = str_replace_all(TNM_T_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_T_Prefix = dsCCPhos::Recode(TNM_T_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_N_Prefix = str_to_lower(TNM_N_Prefix),
TNM_N_Prefix = str_remove_all(TNM_N_Prefix, " "),
TNM_N_Prefix = str_replace_all(TNM_N_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_N_Prefix = dsCCPhos::Recode(TNM_N_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_M_Prefix = str_to_lower(TNM_M_Prefix),
TNM_M_Prefix = str_remove_all(TNM_M_Prefix, " "),
TNM_M_Prefix = str_replace_all(TNM_M_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_M_Prefix = dsCCPhos::Recode(TNM_M_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDS_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Surgery <- df_CDS_Surgery %>%
mutate(SurgeryID = as.integer(str_extract(SurgeryID, "\\d+")),      # Extract integer number from string in SurgeryID. Serves as surrogate for chronological order of events.
#----------------------------------------------------
SurgeryIntention = dsCCPhos::Recode(SurgeryIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
ResidualAssessmentLocal = dsCCPhos::Recode(ResidualAssessmentLocal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
ResidualAssessmentTotal = dsCCPhos::Recode(ResidualAssessmentTotal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDS_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_SystemicTherapy <- df_CDS_SystemicTherapy %>%
mutate(IsChemotherapy = as.logical(IsChemotherapy),
IsImmunotherapy = as.logical(IsImmunotherapy),
IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
#------------------------------------------
SystemicTherapyIntention = dsCCPhos::Recode(SystemicTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------
SystemicTherapyRelationToSurgery = dsCCPhos::Recode(SystemicTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------
SystemicTherapyStart = as_date(SystemicTherapyStart, format = "%d.%m.%Y"),
SystemicTherapyEnd = as_date(SystemicTherapyEnd, format = "%d.%m.%Y"))
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataSet <- list(BioSampling = df_CDS_BioSampling,
Diagnosis = df_CDS_Diagnosis,
Histology = df_CDS_Histology,
Metastasis = df_CDS_Metastasis,
MolecularDiagnostics = df_CDS_MolecularDiagnostics,
Patient = df_CDS_Patient,
Progress = df_CDS_Progress,
RadiationTherapy = df_CDS_RadiationTherapy,
Staging = df_CDS_Staging,
Surgery = df_CDS_Surgery,
SystemicTherapy = df_CDS_SystemicTherapy)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track feature values after Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Transformed <- map2(.x = ls_CuratedDataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Transformed")
})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Finalize curation of data: Ineligible data (includes data that could not be curated) is turned into NA using factor conversion or other methods
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Finalize df_CDS_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_BioSampling <- df_CDS_BioSampling %>%
mutate(SampleType = factor(SampleType,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Label_Curated),      # Convert to factor to mark ineligible values as NA and establish level order where appropriate
SampleAliquot = factor(SampleAliquot,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot")$Value_Curated))
# Finalize df_CDS_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Diagnosis <- df_CDS_Diagnosis %>%
mutate(LocalizationSide = factor(LocalizationSide,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Label_Curated))
# Finalize df_CDS_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Histology <- df_CDS_Histology %>%
mutate(Grading = factor(Grading,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Label_Curated))
# Finalize df_CDS_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Patient <- df_CDS_Patient %>%
mutate(Gender = factor(Gender,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Label_Curated),
LastVitalStatus = factor(LastVitalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus")$Value_Curated))
# Finalize df_CDS_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Progress <- df_CDS_Progress %>%
mutate(GlobalStatus = factor(GlobalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatus")$Label_Curated),
LocalStatus = factor(LocalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalStatus")$Label_Curated),
LymphnodalStatus = factor(LymphnodalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalStatus")$Label_Curated),
MetastasisStatus = factor(MetastasisStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "MetastasisStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "MetastasisStatus")$Label_Curated))
# Finalize df_CDS_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_RadiationTherapy <- df_CDS_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = factor(RadiationTherapyRelationToSurgery,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Label_Curated),
RadiationTherapyIntention = factor(RadiationTherapyIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Label_Curated))
# Finalize df_CDS_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Staging <- df_CDS_Staging %>%
mutate(UICCStage = factor(UICCStage,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage")$Value_Curated),
TNM_T = factor(TNM_T,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T")$Value_Curated),
TNM_N = factor(TNM_N,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N")$Value_Curated),
TNM_M = factor(TNM_M,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M")$Value_Curated),
TNM_T_Prefix = factor(TNM_T_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix")$Value_Curated),
TNM_N_Prefix = factor(TNM_N_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix")$Value_Curated),
TNM_M_Prefix = factor(TNM_M_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix")$Value_Curated),
TNM_ySymbol = factor(TNM_ySymbol,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_ySymbol")$Value_Curated),
TNM_rSymbol = factor(TNM_rSymbol,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_rSymbol")$Value_Curated))
# Finalize df_CDS_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Surgery <- df_CDS_Surgery %>%
mutate(SurgeryIntention = factor(SurgeryIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Label_Curated),
ResidualAssessmentLocal = factor(ResidualAssessmentLocal,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated),
ResidualAssessmentTotal = factor(ResidualAssessmentTotal,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated))
# Finalize df_CDS_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_SystemicTherapy <- df_CDS_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = factor(SystemicTherapyRelationToSurgery,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery")$Label_Curated),
SystemicTherapyIntention = factor(SystemicTherapyIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention")$Label_Curated))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track Feature Values after Finalized Harmonization
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Final <- map2(.x = ls_CuratedDataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Final")
})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Merge Monitor Objects into Coherent Summaries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
{
if (nrow(ls_Monitors_Raw[[i]]) > 0)
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
dplyr::full_join(ls_Monitors_Transformed[[i]], by = join_by(Feature, Value, IsValueEligible, CurationStage, Frequency)) %>%
dplyr::full_join(ls_Monitors_Final[[i]], by = join_by(Feature, Value, IsValueEligible, CurationStage, Frequency)) %>%
tidyr::pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
dplyr::group_by(Feature, Value, IsValueEligible) %>%
dplyr::summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
dplyr::arrange(Feature, desc(IsValueEligible))
}
else
{
df_CurrentSummary <- NULL
}
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
# Name the monitor summary objects
names(ls_MonitorSummaries) <- c("Monitor_BioSampling",
"Monitor_Diagnosis",
"Monitor_Histology",
"Monitor_Metastasis",
"Monitor_MolecularDiagnostics",
"Monitor_Patient",
"Monitor_Progress",
"Monitor_RadiationTherapy",
"Monitor_Staging",
"Monitor_Surgery",
"Monitor_SystemicTherapy")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ADDITIONAL TRANSFORMATIONS (Correction of inconsistencies)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# df_CDS_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Clear duplicate patient entries
#-------------------------------------------------------------------------------
df_Aux_Patient <- df_CDS_Patient %>%
group_by(PatientID) %>%
mutate(CountDifferentCombinations = n()) %>%
filter(CountDifferentCombinations > 1)
# Diagnosis information bundled in df_CDS_Diagnosis through joining with df_CDS_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   A) Removal of duplicate entries
#   B) In patients with multiple but not duplicate diagnosis entries:
#      Use CCPhos-function ClassifyDiagnosisEntries() to plausibly distinguish pseudo-different from actually different diagnoses
#   C) Adjust modified DiagnosisIDs in other tables
#-------------------------------------------------------------------------------
# Join df_CDS_Diagnosis and df_CDS_Histology and create joint ID
df_CDS_Diagnosis <- df_CDS_Diagnosis %>%
left_join(df_CDS_Histology, by = join_by(PatientID, DiagnosisID)) %>%
mutate(DiagnosisID = paste0(DiagnosisID, "/", HistologyID)) %>%
relocate(DiagnosisID, .after = PatientID)
df_CDS_Diagnosis <- df_CDS_Diagnosis %>%
group_by(PatientID) %>%
mutate(CountInitialEntries = n(),
CountDifferentCombinations = n_distinct(InitialDiagnosisDate,
ICD10Code,
ICDOTopographyCode,
LocalizationSide,
HistologyDate,
ICDOMorphologyCode,
Grading)) %>%
group_by(PatientID,
InitialDiagnosisDate,
ICD10Code,
ICDOTopographyCode,
LocalizationSide,
HistologyDate,
ICDOMorphologyCode,
Grading) %>%
mutate(CountDuplicates = n() - 1,
JointIDs = case_when(CountDuplicates == 0 ~ list(NULL),
CountDuplicates > 0 ~ list(DiagnosisID))) %>%
slice_head() %>%
ungroup()
# For monitoring purposes, obtain:
# a) number of duplicate entries and
# b) number of patients that had duplicate diagnosis entries for monitoring purposes
CountDuplicateDiagnoses <- sum(df_CDS_Diagnosis$CountDuplicates, na.rm = TRUE)
CountPatientsWithDuplicates <- df_CDS_Diagnosis %>%
filter(CountDuplicates > 0) %>%
select(PatientID) %>%
n_distinct()
View(df_CDS_Diagnosis)
require(stringr)
require(tidyr)
# For function testing purposes
DiagnosisEntries <- df_CDS_Diagnosis %>% filter(PatientID == "Pat_8386")
# Load meta data
#~~~~~~~~~~~~~~~
# a) Cancer diagnosis groups as proposed by ICD-10
Meta_ICD10Group <- dsCCPhos::Meta_CancerGrouping %>%
select(ICD10CodeShort,
CancerTopographyGroup_ICD10) %>%
rename(ICD10Group = CancerTopographyGroup_ICD10)
RulesProfile = "Default"
# b) Rule set for classification of associated diagnosis entries
RuleSet_DiagnosisAssociation <- dsCCPhos::Meta_DiagnosisAssociation %>%
filter(Profile == RulesProfile)
# c) Vector of names of features that determine classification of diagnosis association
DeterminingFeatures_DiagnosisAssociation = c("ICD10Code",
"ICD10CodeShort",
"ICD10Group",
"ICDOTopographyCode",
"ICDOTopographyCodeShort",
"LocalizationSide",
"ICDOMorphologyCode",
"ICDOMorphologyCodeShort",
"Grading")
# Enhance diagnosis entries by auxiliary variables
DiagnosisEntries <- DiagnosisEntries %>%
arrange(InitialDiagnosisDate) %>%
mutate(ICD10CodeShort = str_sub(ICD10Code, end = 3),
ICDOTopographyCodeShort = str_sub(ICDOTopographyCode, end = 3),
ICDOMorphologyCodeShort = str_sub(ICDOMorphologyCode, end = 4)) %>%
left_join(Meta_ICD10Group, by = join_by(ICD10CodeShort))
# First reference diagnosis
Reference <- DiagnosisEntries %>%
slice_min(InitialDiagnosisDate, HistologyDate) %>%      # Select oldest diagnosis (or diagnoses)
arrange(desc(ICD10Code)) %>%      # If there are more than one diagnoses with the same date, prefer the one that starts with "D" over one that starts with "C" (to account for line in progression)
first() %>%
mutate(ReferenceDiagnosisID = DiagnosisID)
?slice_min
# First reference diagnosis
Reference <- DiagnosisEntries %>%
slice_min(tibble(InitialDiagnosisDate, HistologyDate)) %>%      # Select oldest diagnosis (or diagnoses)
arrange(desc(ICD10Code)) %>%      # If there are more than one diagnoses with the same date, prefer the one that starts with "D" over one that starts with "C" (to account for line in progression)
first() %>%
mutate(ReferenceDiagnosisID = DiagnosisID)
# First set of candidates that are compared to reference diagnosis
Candidates <- DiagnosisEntries %>%
filter(DiagnosisID != Reference$DiagnosisID)
# Initiation of Output data frame
Output <- NULL
# Enhance candidate entries by auxiliary variables
Candidates <- Candidates %>%
mutate(IsLikelyAssociated = eval(parse(GetClassificationCall(TargetFeature = "IsLikelyAssociated",
DeterminingFeatures = DeterminingFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation,
ValueIfNoRuleMet = "FALSE"))))
require(dsCCPhos)
# Enhance candidate entries by auxiliary variables
Candidates <- Candidates %>%
mutate(IsLikelyAssociated = eval(parse(GetClassificationCall(TargetFeature = "IsLikelyAssociated",
DeterminingFeatures = DeterminingFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation,
ValueIfNoRuleMet = "FALSE"))))
library(dsCCPhos)
devtools::load_all(".")
# Enhance candidate entries by auxiliary variables
Candidates <- Candidates %>%
mutate(IsLikelyAssociated = eval(parse(GetClassificationCall(TargetFeature = "IsLikelyAssociated",
DeterminingFeatures = DeterminingFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation,
ValueIfNoRuleMet = "FALSE"))))
# For function testing purposes
DiagnosisEntries <- df_CDS_Diagnosis %>% filter(PatientID == "Pat_8386")
RulesProfile = "Default"
# Load meta data
#~~~~~~~~~~~~~~~
# a) Cancer diagnosis groups as proposed by ICD-10
Meta_ICD10Group <- dsCCPhos::Meta_CancerGrouping %>%
select(ICD10CodeShort,
CancerTopographyGroup_ICD10) %>%
rename(ICD10Group = CancerTopographyGroup_ICD10)
# b) Rule set for classification of associated diagnosis entries
RuleSet_DiagnosisAssociation <- dsCCPhos::Meta_DiagnosisAssociation %>%
filter(Profile == RulesProfile)
# c) Vector of names of features that determine classification of diagnosis association
PredictorFeatures_DiagnosisAssociation = c("ICD10Code",
"ICD10CodeShort",
"ICD10Group",
"ICDOTopographyCode",
"ICDOTopographyCodeShort",
"LocalizationSide",
"ICDOMorphologyCode",
"ICDOMorphologyCodeShort",
"Grading")
# Enhance diagnosis entries by auxiliary variables
DiagnosisEntries <- DiagnosisEntries %>%
arrange(InitialDiagnosisDate) %>%
mutate(ICD10CodeShort = str_sub(ICD10Code, end = 3),
ICDOTopographyCodeShort = str_sub(ICDOTopographyCode, end = 3),
ICDOMorphologyCodeShort = str_sub(ICDOMorphologyCode, end = 4)) %>%
left_join(Meta_ICD10Group, by = join_by(ICD10CodeShort))
# First reference diagnosis
Reference <- DiagnosisEntries %>%
slice_min(tibble(InitialDiagnosisDate, HistologyDate)) %>%      # Select oldest diagnosis (or diagnoses)
arrange(desc(ICD10Code)) %>%      # If there are more than one diagnoses with the same date, prefer the one that starts with "D" over one that starts with "C" (to account for line in progression)
first() %>%
mutate(ReferenceDiagnosisID = DiagnosisID)
# First set of candidates that are compared to reference diagnosis
Candidates <- DiagnosisEntries %>%
filter(DiagnosisID != Reference$DiagnosisID)
# Initiation of Output data frame
Output <- NULL
devtools::load_all(".")
# Enhance candidate entries by auxiliary variables
Candidates <- Candidates %>%
mutate(IsLikelyAssociated = eval(parse(GetClassificationCall(TargetFeature = "IsLikelyAssociated",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation,
ValueIfNoRuleMet = "FALSE"))))
Test <- GetClassificationCall(TargetFeature = "IsLikelyAssociated",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation,
ValueIfNoRuleMet = "FALSE")
Expr <- parse(Test)
?parse
Expr <- parse(text = Test)
# Enhance candidate entries by auxiliary variables
Candidates <- Candidates %>%
mutate(IsLikelyAssociated = eval(parse(text = GetClassificationCall(TargetFeature = "IsLikelyAssociated",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation,
ValueIfNoRuleMet = "FALSE"))))
View(Candidates)
