IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
SystemicTherapyStart = format(as_datetime(SystemicTherapyStart), format = "%Y-%m-%d"),
SystemicTherapyEnd = format(as_datetime(SystemicTherapyEnd), format = "%Y-%m-%d"))
ProgressBar$tick()
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataSet <- list(BioSampling = df_CDS_BioSampling,
Diagnosis = df_CDS_Diagnosis,
Histology = df_CDS_Histology,
Metastasis = df_CDS_Metastasis,
MolecularDiagnostics = df_CDS_MolecularDiagnostics,
Patient = df_CDS_Patient,
Progress = df_CDS_Progress,
RadiationTherapy = df_CDS_RadiationTherapy,
Staging = df_CDS_Staging,
Surgery = df_CDS_Surgery,
SystemicTherapy = df_CDS_SystemicTherapy)
ProgressBar$tick()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track feature values after Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Transformed <- map2(.x = ls_CuratedDataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Transformed")
})
ProgressBar$tick()
# For testing purposes
TargetVector <- df_CDS_Staging$TNM_N_Prefix
TargetVector[TargetVector == "a"]
!is.na(TargetVector[TargetVector == "a"])
which(TargetVector[TargetVector == "a"])
TargetVector[which(TargetVector == "a")]
# For testing purposes
TargetVector <- df_CDS_Staging$TNM_N_Prefix
TableName = "Staging"
FeatureName = "TNM_N_Prefix"
ExcludeIneligibleValues = TRUE
ConvertToFactor = FALSE
AssignFactorLabels = FALSE
vc_Output <- TargetVector
RelevantValueSet <- dsCCPhos::Meta_ValueSets %>%
filter(TableName_Curated == TableName & FeatureName == FeatureName) %>%
arrange(FactorRank)
View(RelevantValueSet)
Meta_ValueSets <- read_excel(path = "./Development/Data/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
library(readxl)
library(usethis)
Meta_ValueSets <- read_excel(path = "./Development/Data/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(Meta_ValueSets, overwrite = TRUE)
RuleSet_RawDataTransformation <- read_excel(path = "./Development/Data/MetaData/RuleSets.xlsx",
sheet = "RawDataTransformation")
# Save data in .rda-file and make it part of package
use_data(RuleSet_RawDataTransformation, overwrite = TRUE)
devtools::load_all(".")
rm(list=ls())
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawDataSet <- LoadRawData(DBConnection)
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(Name_RawDataSet = "RawDataSet",
RuleProfile_RawDataTransformation = "Default",
RuleProfile_DiagnosisRedundancy = "Default",
RuleProfile_DiagnosisAssociation = "Default")
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawDataSet <- LoadRawData(DBConnection)
RuleProfile_RawDataTransformation = "Default"
RuleProfile_DiagnosisRedundancy = "Default"
RuleProfile_DiagnosisAssociation = "Default"
# Use require() to load package namespaces
require(dplyr)
require(dsCCPhos)
require(lubridate)
require(progress)
require(purrr)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODUL 1)  Data Harmonization / Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set up progress bar
CountProgressItems <- 29
ProgressBar <- progress_bar$new(format = "Harmonize data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
ProgressBar$tick()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform feature names
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
})
# Re-set table names
names(ls_CuratedDataSet) <- names(RawDataSet)
ProgressBar$tick()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Definition of features to monitor during Curation (Transformation)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Object syntax: List of vectors
#     - Vector names = Name of feature to be monitored during Curation (Transformation)
#     - Vector values = Set of eligible values defined in Meta Data
# If a feature should be monitored but has no specific set of eligible values, set it NULL
#-------------------------------------------------------------------------------
ls_MonitorFeatures_BioSampling <- list(SampleType = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "BioSampling" & Feature == "SampleType")$Value_Curated,
SampleAliquot = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "BioSampling" & Feature == "SampleAliquot")$Value_Curated)
ls_MonitorFeatures_Diagnosis <- list(ICD10Version = NULL,
LocalizationSide = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Diagnosis" & Feature == "LocalizationSide")$Value_Curated)
ls_MonitorFeatures_Histology <- list(Grading = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Histology" & Feature == "Grading")$Value_Curated)
ls_MonitorFeatures_Metastasis <- list(MetastasisLocalization = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Metastasis" & Feature == "MetastasisLocalization")$Value_Curated)
ls_MonitorFeatures_MolecularDiagnostics <- list()
ls_MonitorFeatures_Patient <- list(Gender = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "Gender")$Value_Curated,
LastVitalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "LastVitalStatus")$Value_Curated)
ls_MonitorFeatures_Progress <- list(GlobalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "GlobalStatus")$Value_Curated,
LocalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LocalStatus")$Value_Curated,
LymphnodalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LymphnodalStatus")$Value_Curated,
MetastasisStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "MetastasisStatus")$Value_Curated)
ls_MonitorFeatures_RadiationTherapy <- list(RadiationTherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyRelationToSurgery")$Value_Curated,
RadiationTherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyIntention")$Value_Curated)
ls_MonitorFeatures_Staging <- list(UICCStage = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "UICCStage")$Value_Curated,
TNM_T = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T")$Value_Curated,
TNM_N = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N")$Value_Curated,
TNM_M = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M")$Value_Curated,
TNM_T_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T_Prefix")$Value_Curated,
TNM_N_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N_Prefix")$Value_Curated,
TNM_M_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M_Prefix")$Value_Curated,
TNM_ySymbol = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_ySymbol")$Value_Curated,
TNM_rSymbol = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_rSymbol")$Value_Curated,
TNM_mSymbol = NULL)
ls_MonitorFeatures_Surgery <- list(SurgeryIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "SurgeryIntention")$Value_Curated,
ResidualAssessmentLocal = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentLocal")$Value_Curated,
ResidualAssessmentTotal = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentTotal")$Value_Curated)
ls_MonitorFeatures_SystemicTherapy <- list(IsChemotherapy = NULL,
IsImmunotherapy = NULL,
IsHormoneTherapy = NULL,
IsBoneMarrowTransplant = NULL,
SystemicTherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyIntention")$Value_Curated,
SystemicTherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyRelationToSurgery")$Value_Curated)
# Put all objects in one list object to make them passable to functions (alphabetic order)
ls_MonitorFeatures_All <- list(ls_MonitorFeatures_BioSampling,
ls_MonitorFeatures_Diagnosis,
ls_MonitorFeatures_Histology,
ls_MonitorFeatures_Metastasis,
ls_MonitorFeatures_MolecularDiagnostics,
ls_MonitorFeatures_Patient,
ls_MonitorFeatures_Progress,
ls_MonitorFeatures_RadiationTherapy,
ls_MonitorFeatures_Staging,
ls_MonitorFeatures_Surgery,
ls_MonitorFeatures_SystemicTherapy)
ProgressBar$tick()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track feature values of raw data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Raw <- purrr::map2(.x = ls_CuratedDataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Raw")
})
ProgressBar$tick()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# CURATION: Value transforming Operations
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Order of operations in each raw data frame:
#   1) Harmonizing and correctional transformation of data values using dsCCPhos::TransformData()
#   2) Recoding data using dsCCPhos::RecodeData()
#         - dsCCPhos::RecodeData() uses a dictionary in the form of a named vector to perform recoding on a target vector
#   3) Data formatting instructions
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_BioSampling <- ls_CuratedDataSet$BioSampling
df_CDS_Diagnosis <- ls_CuratedDataSet$Diagnosis
df_CDS_Histology <- ls_CuratedDataSet$Histology
df_CDS_Metastasis <- ls_CuratedDataSet$Metastasis
df_CDS_MolecularDiagnostics <- ls_CuratedDataSet$MolecularDiagnostics
df_CDS_Patient <- ls_CuratedDataSet$Patient
df_CDS_Progress <- ls_CuratedDataSet$Progress
df_CDS_RadiationTherapy <- ls_CuratedDataSet$RadiationTherapy
df_CDS_Staging <- ls_CuratedDataSet$Staging
df_CDS_Surgery <- ls_CuratedDataSet$Surgery
df_CDS_SystemicTherapy <- ls_CuratedDataSet$SystemicTherapy
# Transform df_CDS_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_BioSampling <- df_CDS_BioSampling %>%
#--- Transformation ----------------------------------
dsCCPhos::TransformData(TableName = "BioSampling", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding ----------------------------------------
mutate(SampleType = dsCCPhos::RecodeData(SampleType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "BioSampling" & Feature == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
SampleAliquot = dsCCPhos::RecodeData(SampleAliquot, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "BioSampling" & Feature == "SampleAliquot"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting --------------------------------------
mutate(SampleTakingDate = format(as_datetime(SampleTakingDate), format = "%Y-%m-%d"))
ProgressBar$tick()
# Transform df_CDS_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Diagnosis <- df_CDS_Diagnosis %>%
#--- Transformation ------------------------------------
dsCCPhos::TransformData(TableName = "Diagnosis", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------------
mutate(LocalizationSide = dsCCPhos::RecodeData(LocalizationSide, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Diagnosis" & Feature == "LocalizationSide"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(InitialDiagnosisDate = format(as_datetime(InitialDiagnosisDate), format = "%Y-%m-%d"),
ICD10Version = as.integer(str_extract(ICD10Version, "\\d+")))      # Extract ICD-10 catalogue version year from string
ProgressBar$tick()
# Transform df_CDS_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Histology <- df_CDS_Histology %>%
#--- Transformation ------------------------------------
dsCCPhos::TransformData(TableName = "Histology", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------------
mutate(Grading = dsCCPhos::RecodeData(Grading, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Histology" & Feature == "Grading"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(HistologyDate = format(as_datetime(HistologyDate), format = "%Y-%m-%d")) %>%
#--- Special -------------------------------------------
{ if ("HistologyID" %in% names(df_CDS_Histology))      # If column exists, extract integer number from string in HistologyID. Serves as surrogate for chronological order of events.
{ mutate(., HistologyID = as.integer(str_extract(HistologyID, "\\d+"))) }
else {.}
}
ProgressBar$tick()
# Transform df_CDS_Metastasis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Metastasis <- df_CDS_Metastasis %>%
#--- Transformation ----------------------------------
dsCCPhos::TransformData(TableName = "Metastasis", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Formatting --------------------------------------
mutate(MetastasisDiagnosisDate = format(as_datetime(MetastasisDiagnosisDate), format = "%Y-%m-%d"),
HasMetastasis = as.logical(HasMetastasis))
ProgressBar$tick()
# Transform df_CDS_MolecularDiagnostics
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_MolecularDiagnostics <- df_CDS_MolecularDiagnostics %>%
#--- Transformation ------------------------
dsCCPhos::TransformData(TableName = "MolecularDiagnostics", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Formatting ----------------------------
mutate(MolecularDiagnosticsDate = format(as_datetime(MolecularDiagnosticsDate), format = "%Y-%m-%d"))
ProgressBar$tick()
# Transform df_CDS_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Patient <- df_CDS_Patient %>%
#--- Transformation ------------------------------------
dsCCPhos::TransformData(TableName = "Patient", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------------
mutate(Gender = dsCCPhos::RecodeData(Gender, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "Gender"),
set_names(Value_Curated, Value_Raw))),
LastVitalStatus = dsCCPhos::RecodeData(LastVitalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "LastVitalStatus"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(LastVitalStatusDate = format(as_datetime(LastVitalStatusDate), format = "%Y-%m-%d"))
ProgressBar$tick()
# Transform df_CDS_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Progress <- df_CDS_Progress %>%
#--- Transformation ------------------------------------
dsCCPhos::TransformData(TableName = "Progress", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------------
mutate(GlobalStatus = dsCCPhos::RecodeData(GlobalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "GlobalStatus"),
set_names(Value_Curated, Value_Raw))),
LocalStatus = dsCCPhos::RecodeData(LocalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LocalStatus"),
set_names(Value_Curated, Value_Raw))),
LymphnodalStatus = dsCCPhos::RecodeData(LymphnodalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LymphnodalStatus"),
set_names(Value_Curated, Value_Raw))),
MetastasisStatus = dsCCPhos::RecodeData(MetastasisStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "MetastasisStatus"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(ProgressReportDate = format(as_datetime(ProgressReportDate), format = "%Y-%m-%d"))
ProgressBar$tick()
# Transform df_CDS_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_RadiationTherapy <- df_CDS_RadiationTherapy %>%
#--- Transformation ----------------------------
dsCCPhos::TransformData(TableName = "RadiationTherapy", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding ----------------------------------
mutate(RadiationTherapyRelationToSurgery = dsCCPhos::RecodeData(RadiationTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
RadiationTherapyIntention = dsCCPhos::RecodeData(RadiationTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyIntention"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting --------------------------------
mutate(RadiationTherapyStart = format(as_datetime(RadiationTherapyStart), format = "%Y-%m-%d"),
RadiationTherapyEnd = format(as_datetime(RadiationTherapyEnd), format = "%Y-%m-%d"))
ProgressBar$tick()
# Transform df_CDS_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Staging <- df_CDS_Staging %>%
#--- Transformation --------------------------------------
dsCCPhos::TransformData(TableName = "Staging", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding --------------------------------------------
mutate(UICCStage = dsCCPhos::RecodeData(UICCStage, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "UICCStage"),
set_names(Value_Curated, Value_Raw))),
TNM_T = dsCCPhos::RecodeData(TNM_T, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T"),
set_names(Value_Curated, Value_Raw))),
TNM_N = dsCCPhos::RecodeData(TNM_N, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N"),
set_names(Value_Curated, Value_Raw))),
TNM_M = dsCCPhos::RecodeData(TNM_M, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M"),
set_names(Value_Curated, Value_Raw))),
TNM_T_Prefix = dsCCPhos::RecodeData(TNM_T_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_N_Prefix = dsCCPhos::RecodeData(TNM_N_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_M_Prefix = dsCCPhos::RecodeData(TNM_M_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M_Prefix"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ------------------------------------------
mutate(StagingReportDate = format(as_datetime(StagingReportDate), format = "%Y-%m-%d"))
ProgressBar$tick()
# Transform df_CDS_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Surgery <- df_CDS_Surgery %>%
#--- Transformation --------------------------------------
dsCCPhos::TransformData(TableName = "Surgery", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding --------------------------------------------
mutate(SurgeryIntention = dsCCPhos::RecodeData(SurgeryIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "SurgeryIntention"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentLocal = dsCCPhos::RecodeData(ResidualAssessmentLocal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentLocal"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentTotal = dsCCPhos::RecodeData(ResidualAssessmentTotal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentTotal"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Special ---------------------------------------------
{ if ("SurgeryID" %in% names(df_CDS_Surgery))      # If column exists, extract integer number from string in SurgeryID. Serves as surrogate for chronological order of events.
{ mutate(., SurgeryID = as.integer(str_extract(SurgeryID, "\\d+"))) }
else {.}
}
ProgressBar$tick()
# Transform df_CDS_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_SystemicTherapy <- df_CDS_SystemicTherapy %>%
#--- Transformation ------------------------------
dsCCPhos::TransformData(TableName = "SystemicTherapy", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------
mutate(SystemicTherapyIntention = dsCCPhos::RecodeData(SystemicTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
SystemicTherapyRelationToSurgery = dsCCPhos::RecodeData(SystemicTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------
mutate(IsChemotherapy = as.logical(IsChemotherapy),
IsImmunotherapy = as.logical(IsImmunotherapy),
IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
SystemicTherapyStart = format(as_datetime(SystemicTherapyStart), format = "%Y-%m-%d"),
SystemicTherapyEnd = format(as_datetime(SystemicTherapyEnd), format = "%Y-%m-%d"))
ProgressBar$tick()
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataSet <- list(BioSampling = df_CDS_BioSampling,
Diagnosis = df_CDS_Diagnosis,
Histology = df_CDS_Histology,
Metastasis = df_CDS_Metastasis,
MolecularDiagnostics = df_CDS_MolecularDiagnostics,
Patient = df_CDS_Patient,
Progress = df_CDS_Progress,
RadiationTherapy = df_CDS_RadiationTherapy,
Staging = df_CDS_Staging,
Surgery = df_CDS_Surgery,
SystemicTherapy = df_CDS_SystemicTherapy)
ProgressBar$tick()
ls_Monitors_Transformed <- map2(.x = ls_CuratedDataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Transformed")
})
ProgressBar$tick()
# Finalize df_CDS_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_BioSampling <- df_CDS_BioSampling %>%
mutate(SampleType = dsCCPhos::FinalizeDataTransformation(SampleType, TableName = "BioSampling", FeatureName = "SampleType"),
SampleAliquot = dsCCPhos::FinalizeDataTransformation(SampleAliquot, TableName = "BioSampling", FeatureName = "SampleAliquot"))
devtools::load_all(".")
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawDataSet <- LoadRawData(DBConnection)
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(Name_RawDataSet = "RawDataSet",
RuleProfile_RawDataTransformation = "Default",
RuleProfile_DiagnosisRedundancy = "Default",
RuleProfile_DiagnosisAssociation = "Default")
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("AttritionTracker_Close")
# use_r("AttritionTracker_Init")
# use_r("AttritionTracker_Update")
# use_r("ClassifyDiagnosisAssociation")
# use_r("ClassifyDiagnosisRedundancy")
# use_r("CompileClassificationCall")
use_r("CompileExclusionRules")
View(CurationOutput$CurationReport$Monitor_Staging)
library(dsCCPhos)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/TestData/CCPTestData_A.RData")
load("./Development/Data/TestData/CCPTestData_B.RData")
load("./Development/Data/TestData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to servers
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhos::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhos::Meta_TableNames$TableName_Curated
# Check if all tables are accessible on all servers
ls_TableCheck <- purrr::map(as.list(CCPTableNames_Curated),
function(tbl)
{
datashield.table_status(conns = CCPConnections,
table = tbl)
})
# Turn list into data.frame
df_TableCheck <- do.call(rbind, ls_TableCheck)
# Make tables from data repository accessible in R session
for(i in 1:length(CCPTableNames_Curated))
{
datashield.assign(conns = CCPConnections,
symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i])
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Make sure assignment was successful on all servers
ds.GetObjectInfo(ObjectName = "RawDataSet",
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
rm(list=ls())
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_B.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_B)
View(CCPTestData_B$MolecularDiagnostics)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_A.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_A)
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_A.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_A)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
rm(list=ls())
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
