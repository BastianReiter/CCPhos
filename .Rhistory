col_types = cols("ops-code" = col_character(),
"OPS-Version" = col_character()))
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy.csv")
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis.csv")
df_BioSampling <- read_csv(file = "./Development/Data/TestData/CSV/sample.csv",
col_types = cols(entnahmedatum = col_date(),
status = col_character(),
projektbezeichnung = col_character(),
aliquot = col_character()))
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis.csv",
col_types = cols("seitenlokalisation_nach_adt-gekid" = col_character()))
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology.csv",
col_types = cols(grading = col_character()))
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis.csv")
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker.csv",
col_types = cols(zusaetzliche_alternative_dokumentation = col_character()))
df_Patient <- read_csv(file = "./Development/Data/TestData/CSV/patient.csv",
col_types = cols("dktk-id-global" = col_character(),
"dktk-id-lokal" = col_character(),
todesursachen = col_character())) %>%
rename("patient-id" = entity_id)
df_Progress <- read_csv(file = "./Development/Data/TestData/CSV/progress.csv")
df_RadiationTherapy <- read_csv(file = "./Development/Data/TestData/CSV/radiation-therapy.csv",
col_types = cols(strahlentherapie_stellung_zu_operativer_therapie = col_character(),
intention_strahlentherapie = col_character()))
df_Staging <- read_csv(file = "./Development/Data/TestData/CSV/tnm.csv")
df_Surgery <- read_csv(file = "./Development/Data/TestData/CSV/surgery.csv",
col_types = cols("ops-code" = col_character(),
"OPS-Version" = col_character()))
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy.csv")
CCPTestData_Total <- list(BioSampling = df_BioSampling,
Diagnosis = df_Diagnosis,
Histology = df_Histology,
Metastasis = df_Metastasis,
MolecularDiagnostics = df_MolecularDiagnostics,
Patient = df_Patient,
Progress = df_Progress,
RadiationTherapy = df_RadiationTherapy,
Staging = df_Staging,
Surgery = df_Surgery,
SystemicTherapy = df_SystemicTherapy)
PatientsPerSite <- floor(nrow(df_Patient) / 4)
vc_PatientIDs_A <- sample(df_Patient$entity_id, PatientsPerSite)
vc_PatientIDs_A <- sample(df_Patient$"patient-id", PatientsPerSite)
df_Patient_Rest <- filter(df_Patient, !(df_Patient$"patient-id" %in% vc_PatientIDs_A))
vc_PatientIDs_B <- sample(df_Patient_Rest$"patient-id", PatientsPerSite)
df_Patient_Rest <- filter(df_Patient_Rest, !(df_Patient_Rest$"patient-id" %in% vc_PatientIDs_B))
vc_PatientIDs_C <- sample(df_Patient_Rest$"patient-id", PatientsPerSite)
df_Patient_Rest <- filter(df_Patient_Rest, !(df_Patient_Rest$"patient-id" %in% vc_PatientIDs_C))
vc_PatientIDs_D <- sample(df_Patient_Rest$"patient-id", PatientsPerSite)
CCPTestData_A <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_A),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_A),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_A),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_A),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_A),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_A),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_A),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_A),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_A),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_A),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_A))
CCPTestData_B <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_B),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_B),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_B),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_B),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_B),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_B),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_B),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_B),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_B),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_B),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_B))
CCPTestData_C <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_C),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_C),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_C),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_C),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_C),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_C),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_C),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_C),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_C),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_C),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_C))
CCPTestData_D <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_D),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_D),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_D),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_D),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_D),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_D),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_D),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_D),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_D),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_D),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_D))
save(CCPTestData_Total, file = "./Development/Data/TestData/CCPTestData_Total.Rdata")
save(CCPTestData_A, file = "./Development/Data/TestData/CCPTestData_A.Rdata")
save(CCPTestData_B, file = "./Development/Data/TestData/CCPTestData_B.Rdata")
save(CCPTestData_C, file = "./Development/Data/TestData/CCPTestData_C.Rdata")
save(CCPTestData_D, file = "./Development/Data/TestData/CCPTestData_D.Rdata")
load("./Development/Data/TestData/CCPTestData_A.RData")
rm(list=ls())
load("./Development/Data/TestData/CCPTestData_A.RData")
load("./Development/Data/TestData/CCPTestData_B.RData")
load("./Development/Data/TestData/CCPTestData_C.RData")
load("./Development/Data/TestData/CCPTestData_D.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteD <- newDSLiteServer(tables = CCPTestData_D,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteD",
url = "Server_SiteD",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available tables in Sites
datashield.tables(CCPConnections)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Test with ds.mean()
Test <- ds.mean(x = "Patient$geburtsdatum",
type = "both",
datasources = CCPConnections)
View(Test)
Test
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology.csv",
col_types = cols(grading = col_character()))
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis.csv",
col_types = cols("seitenlokalisation_nach_adt-gekid" = col_character()))
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology.csv",
col_types = cols(grading = col_character()))
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis.csv",
col_types = cols("seitenlokalisation_nach_adt-gekid" = col_character())) %>%
rename("diagnosis-id" = entity_id)
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis.csv")
df_BioSampling <- read_csv(file = "./Development/Data/TestData/CSV/sample.csv",
col_types = cols(entnahmedatum = col_date(),
status = col_character(),
projektbezeichnung = col_character(),
aliquot = col_character())) %>%
rename("sample-id" = entity_id)
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis.csv",
col_types = cols("seitenlokalisation_nach_adt-gekid" = col_character())) %>%
rename("diagnosis-id" = entity_id)
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology.csv",
col_types = cols(grading = col_character())) %>%
rename("histology-id" = entity_id)
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis.csv") %>%
rename("metastasis-id" = entity_id)
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker.csv",
col_types = cols(zusaetzliche_alternative_dokumentation = col_character()))
rename("mol-marker-id" = entity_id)
df_Patient <- read_csv(file = "./Development/Data/TestData/CSV/patient.csv",
col_types = cols("dktk-id-global" = col_character(),
"dktk-id-lokal" = col_character(),
todesursachen = col_character())) %>%
rename("patient-id" = entity_id)
df_Progress <- read_csv(file = "./Development/Data/TestData/CSV/progress.csv") %>%
rename("progress-id" = entity_id)
df_RadiationTherapy <- read_csv(file = "./Development/Data/TestData/CSV/radiation-therapy.csv",
col_types = cols(strahlentherapie_stellung_zu_operativer_therapie = col_character(),
intention_strahlentherapie = col_character())) %>%
rename("radiation-therapy-id" = entity_id)
df_Staging <- read_csv(file = "./Development/Data/TestData/CSV/tnm.csv") %>%
rename("tnm-id" = entity_id)
df_Surgery <- read_csv(file = "./Development/Data/TestData/CSV/surgery.csv",
col_types = cols("ops-code" = col_character(),
"OPS-Version" = col_character())) %>%
rename("surgery-id" = entity_id)
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy.csv") %>%
rename("system-therapy-id" = entity_id)
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy.csv")
View(df_MolecularDiagnostics)
rm(list=ls())
df_BioSampling <- read_csv(file = "./Development/Data/TestData/CSV/sample.csv",
col_types = cols(entnahmedatum = col_date(),
status = col_character(),
projektbezeichnung = col_character(),
aliquot = col_character())) %>%
rename("sample-id" = entity_id)
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis.csv",
col_types = cols("seitenlokalisation_nach_adt-gekid" = col_character())) %>%
rename("diagnosis-id" = entity_id)
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology.csv",
col_types = cols(grading = col_character())) %>%
rename("histology-id" = entity_id)
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis.csv") %>%
rename("metastasis-id" = entity_id)
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker.csv",
col_types = cols(zusaetzliche_alternative_dokumentation = col_character()))
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker.csv",
col_types = cols(zusaetzliche_alternative_dokumentation = col_character())) %>%
rename("mol-marker-id" = entity_id)
df_Patient <- read_csv(file = "./Development/Data/TestData/CSV/patient.csv",
col_types = cols("dktk-id-global" = col_character(),
"dktk-id-lokal" = col_character(),
todesursachen = col_character())) %>%
rename("patient-id" = entity_id)
df_Progress <- read_csv(file = "./Development/Data/TestData/CSV/progress.csv") %>%
rename("progress-id" = entity_id)
df_RadiationTherapy <- read_csv(file = "./Development/Data/TestData/CSV/radiation-therapy.csv",
col_types = cols(strahlentherapie_stellung_zu_operativer_therapie = col_character(),
intention_strahlentherapie = col_character())) %>%
rename("radiation-therapy-id" = entity_id)
df_Staging <- read_csv(file = "./Development/Data/TestData/CSV/tnm.csv") %>%
rename("tnm-id" = entity_id)
problems(df_Staging)
df_Surgery <- read_csv(file = "./Development/Data/TestData/CSV/surgery.csv",
col_types = cols("ops-code" = col_character(),
"OPS-Version" = col_character())) %>%
rename("surgery-id" = entity_id)
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy.csv")
CCPTestData_Total <- list(BioSampling = df_BioSampling,
Diagnosis = df_Diagnosis,
Histology = df_Histology,
Metastasis = df_Metastasis,
MolecularDiagnostics = df_MolecularDiagnostics,
Patient = df_Patient,
Progress = df_Progress,
RadiationTherapy = df_RadiationTherapy,
Staging = df_Staging,
Surgery = df_Surgery,
SystemicTherapy = df_SystemicTherapy)
PatientsPerSite <- floor(nrow(df_Patient) / 4)
vc_PatientIDs_A <- sample(df_Patient$"patient-id", PatientsPerSite)
df_Patient_Rest <- filter(df_Patient, !(df_Patient$"patient-id" %in% vc_PatientIDs_A))
vc_PatientIDs_B <- sample(df_Patient_Rest$"patient-id", PatientsPerSite)
df_Patient_Rest <- filter(df_Patient_Rest, !(df_Patient_Rest$"patient-id" %in% vc_PatientIDs_B))
vc_PatientIDs_C <- sample(df_Patient_Rest$"patient-id", PatientsPerSite)
df_Patient_Rest <- filter(df_Patient_Rest, !(df_Patient_Rest$"patient-id" %in% vc_PatientIDs_C))
vc_PatientIDs_D <- sample(df_Patient_Rest$"patient-id", PatientsPerSite)
CCPTestData_A <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_A),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_A),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_A),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_A),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_A),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_A),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_A),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_A),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_A),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_A),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_A))
CCPTestData_B <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_B),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_B),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_B),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_B),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_B),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_B),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_B),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_B),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_B),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_B),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_B))
CCPTestData_C <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_C),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_C),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_C),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_C),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_C),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_C),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_C),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_C),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_C),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_C),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_C))
CCPTestData_D <- list(BioSampling = filter(df_BioSampling, df_BioSampling$"patient-id" %in% vc_PatientIDs_D),
Diagnosis = filter(df_Diagnosis, df_Diagnosis$"patient-id" %in% vc_PatientIDs_D),
Histology = filter(df_Histology, df_Histology$"patient-id" %in% vc_PatientIDs_D),
Metastasis = filter(df_Metastasis, df_Metastasis$"patient-id" %in% vc_PatientIDs_D),
MolecularDiagnostics = filter(df_MolecularDiagnostics, df_MolecularDiagnostics$"patient-id" %in% vc_PatientIDs_D),
Patient = filter(df_Patient, df_Patient$"patient-id" %in% vc_PatientIDs_D),
Progress = filter(df_Progress, df_Progress$"patient-id" %in% vc_PatientIDs_D),
RadiationTherapy = filter(df_RadiationTherapy, df_RadiationTherapy$"patient-id" %in% vc_PatientIDs_D),
Staging = filter(df_Staging, df_Staging$"patient-id" %in% vc_PatientIDs_D),
Surgery = filter(df_Surgery, df_Surgery$"patient-id" %in% vc_PatientIDs_D),
SystemicTherapy = filter(df_SystemicTherapy, df_SystemicTherapy$"patient-id" %in% vc_PatientIDs_D))
save(CCPTestData_Total, file = "./Development/Data/TestData/CCPTestData_Total.Rdata")
save(CCPTestData_A, file = "./Development/Data/TestData/CCPTestData_A.Rdata")
save(CCPTestData_B, file = "./Development/Data/TestData/CCPTestData_B.Rdata")
save(CCPTestData_C, file = "./Development/Data/TestData/CCPTestData_C.Rdata")
save(CCPTestData_D, file = "./Development/Data/TestData/CCPTestData_D.Rdata")
load("./Development/Data/TestData/CCPTestData_A.RData")
load("./Development/Data/TestData/CCPTestData_B.RData")
load("./Development/Data/TestData/CCPTestData_C.RData")
load("./Development/Data/TestData/CCPTestData_D.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteD <- newDSLiteServer(tables = CCPTestData_D,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteD",
url = "Server_SiteD",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available tables in Sites
datashield.tables(CCPConnections)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::install_github("tombisho/dsSyntheticClient", dependencies = TRUE)
devtools::install_github("tombisho/dsSyntheticClient", dependencies = TRUE)
devtools::install_github("tombisho/dsSynthetic", dependencies = TRUE)
rm(list=ls())
load("./Development/Data/RealData/CCPTestData_Total.RData")
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteTotal <- newDSLiteServer(tables = CCPTestData_Total,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos",
"dsSynthetic")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteTotal",
url = "Server_SiteTotal",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available tables in Sites
datashield.tables(CCPConnections)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- ds.CurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
View(CurationReports)
View(CurationReports$SiteTotal)
SyntheticData <- ds.syn(data = "Patient",
method = "cart",
m = 1,
seed = 123)
SyntheticData <- ds.syn(data = "Patient",
method = "cart",
m = 1,
seed = 123)
library(dsSyntheticClient)
SyntheticData <- ds.syn(data = "Patient",
method = "cart",
m = 1,
seed = 123)
SyntheticData <- SyntheticData$SiteTotal$Data
SyntheticData <- SyntheticData$SiteTotal$Data$syn
SyntheticData <- ds.syn(data = "Patient",
method = "cart",
m = 1,
seed = 123)
SyntheticData <- SyntheticData$SiteTotal$Data$syn
SyntheticData <- ds.syn(data = "Diagnosis",
method = "cart",
m = 1,
seed = 123)
SyntheticData <- SyntheticData$SiteTotal$Data$syn
SyntheticData <- SyntheticData$SiteTotal$Warning
SyntheticData
SyntheticData <- ds.syn(data = "Diagnosis")
SyntheticData <- ds.syn(data = "Diagnosis")
?syn
?synthpop::syn
# List all available tables in Sites
datashield.tables(CCPConnections)
rm(list = ls())                # to clean out workspace
library(synthpop)              # to load package
# This code will use the supplied data frame SD2011
help(SD2011)                   # this will give you information about it
dim(SD2011)                    # get size of data frame
codebook.syn(SD2011)$tab       # get summary info about variables
?codebook.syn
load("./Development/Data/RealData/CCPTestData_Total.RData")
codebook.syn(CCPTestData_Total$Diagnosis)
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
# Curate data
CuratedData <- dsCCPhos::CurateDataDS("RawData")$CuratedData
save(CuratedData, file = "./Development/Data/RealData/CCPCuratedData.Rdata")
rm(list=ls())
load("./Development/Data/RealData/CCPCuratedData.RData")
codebook.syn(CuratedData$Diagnosis)
View(CuratedData$Diagnosis)
mydata <- SD2011[, c(1, 3, 6, 8, 11, 17, 18, 19, 20, 10)]
codebook.syn(mydata)$tab
# Only remaining item to check is the negative income values
table(mydata$income[mydata$income < 0], useNA = "ifany")
TestSyn <- syn(CuratedData$Diagnosis)
