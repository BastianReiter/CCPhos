try(ProgressBar$tick())
# Finalize df_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Patient <- df_Patient %>%
mutate(Gender = dsCCPhos::FinalizeDataTransformation(Gender, TableName = "Patient", FeatureName = "Gender"),   # Assign factor labels?
LastVitalStatus = dsCCPhos::FinalizeDataTransformation(LastVitalStatus, TableName = "Patient", FeatureName = "LastVitalStatus"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Progress <- df_Progress %>%
mutate(GlobalStatus = dsCCPhos::FinalizeDataTransformation(GlobalStatus, TableName = "Progress", FeatureName = "GlobalStatus"),   # Assign factor labels?
LocalStatus = dsCCPhos::FinalizeDataTransformation(LocalStatus, TableName = "Progress", FeatureName = "LocalStatus"),   # Assign factor labels?
LymphnodalStatus = dsCCPhos::FinalizeDataTransformation(LymphnodalStatus, TableName = "Progress", FeatureName = "LymphnodalStatus"),   # Assign factor labels?
MetastasisStatus = dsCCPhos::FinalizeDataTransformation(MetastasisStatus, TableName = "Progress", FeatureName = "MetastasisStatus"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_RadiationTherapy <- df_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = dsCCPhos::FinalizeDataTransformation(RadiationTherapyRelationToSurgery, TableName = "RadiationTherapy", FeatureName = "RadiationTherapyRelationToSurgery"),   # Assign factor labels?
RadiationTherapyIntention = dsCCPhos::FinalizeDataTransformation(RadiationTherapyIntention, TableName = "RadiationTherapy", FeatureName = "RadiationTherapyIntention"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Staging <- df_Staging %>%
mutate(UICCStage = dsCCPhos::FinalizeDataTransformation(UICCStage, TableName = "Staging", FeatureName = "UICCStage"),
TNM_T = dsCCPhos::FinalizeDataTransformation(TNM_T, TableName = "Staging", FeatureName = "TNM_T"),
TNM_N = dsCCPhos::FinalizeDataTransformation(TNM_N, TableName = "Staging", FeatureName = "TNM_N"),
TNM_M = dsCCPhos::FinalizeDataTransformation(TNM_M, TableName = "Staging", FeatureName = "TNM_M"),
TNM_T_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_T_Prefix, TableName = "Staging", FeatureName = "TNM_T_Prefix"),
TNM_N_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_N_Prefix, TableName = "Staging", FeatureName = "TNM_N_Prefix"),
TNM_M_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_M_Prefix, TableName = "Staging", FeatureName = "TNM_M_Prefix"),
TNM_ySymbol = dsCCPhos::FinalizeDataTransformation(TNM_ySymbol, TableName = "Staging", FeatureName = "TNM_ySymbol"),
TNM_rSymbol = dsCCPhos::FinalizeDataTransformation(TNM_rSymbol, TableName = "Staging", FeatureName = "TNM_rSymbol"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Surgery <- df_Surgery %>%
mutate(SurgeryIntention = dsCCPhos::FinalizeDataTransformation(SurgeryIntention, TableName = "Surgery", FeatureName = "SurgeryIntention"),   # Assign factor labels?
ResidualAssessmentLocal = dsCCPhos::FinalizeDataTransformation(ResidualAssessmentLocal, TableName = "Surgery", FeatureName = "ResidualAssessmentLocal"),
ResidualAssessmentTotal = dsCCPhos::FinalizeDataTransformation(ResidualAssessmentTotal, TableName = "Surgery", FeatureName = "ResidualAssessmentTotal"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_SystemicTherapy <- df_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = dsCCPhos::FinalizeDataTransformation(SystemicTherapyRelationToSurgery, TableName = "SystemicTherapy", FeatureName = "SystemicTherapyRelationToSurgery"),   # Assign factor labels?
SystemicTherapyIntention = dsCCPhos::FinalizeDataTransformation(SystemicTherapyIntention, TableName = "SystemicTherapy", FeatureName = "SystemicTherapyIntention"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Module 3 H)  Track Feature Values after Finalized Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Re-pack data frames into list in order to pass them to map-function
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Names have to be exactly the same (and the same order) as in ls_MonitorMetaData_all
#-------------------------------------------------------------------------------
ls_DataSet <- list(BioSampling = df_BioSampling,
Diagnosis = df_Diagnosis,
Histology = df_Histology,
Metastasis = df_Metastasis,
MolecularDiagnostics = df_MolecularDiagnostics,
Patient = df_Patient,
Progress = df_Progress,
RadiationTherapy = df_RadiationTherapy,
Staging = df_Staging,
Surgery = df_Surgery,
SystemicTherapy = df_SystemicTherapy)
#--- Update PB ---
try(ProgressBar$tick())
# Map raw values to their finalized state to get transformation tracks
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check if object names in ls_TransformationTracks, ls_DataSet and ls_MonitorMetaData are identical to avoid incorrect mapping
if (all(names(ls_TransformationTracks) == names(ls_DataSet)) & all(names(ls_DataSet) == names(ls_MonitorMetaData)))
{
ls_TransformationTracks <- purrr::pmap(.l = list(ls_TransformationTracks,
ls_DataSet,
ls_MonitorMetaData),
.f = function(TransformationTrack, FinalizedDataFrame, MonitorMetaData)
{
if (purrr::is_empty(MonitorMetaData) == FALSE)
{
FinalizedValues <- FinalizedDataFrame %>%
select(c("TrackID", names(MonitorMetaData))) %>%
rename_with(.fn = ~ str_c(., "__Final"),   # Two underscores for later use in pivot_longer()
.cols = all_of(names(MonitorMetaData)))
TransformationTrack %>%
left_join(FinalizedValues,
by = join_by(TrackID)) %>%
distinct(pick(contains("__Raw")), .keep_all = TRUE)
}
else { return(data.frame()) }
})
} else {
stop("Internal error: Object names in ls_TransformationTracks, ls_DataSet and ls_MonitorMetaData must be identical and in the same order.")
}
# Get counts of all distinct values in finalized data sets
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check if object names in ls_DataSet and ls_MonitorMetaData are identical to avoid incorrect mapping
if (all(names(ls_DataSet) == names(ls_MonitorMetaData)))
{
ls_ValueCounts_Final <- map2(.x = ls_DataSet,
.y = ls_MonitorMetaData,
.f = function(DataFrame, MonitorMetaData)
{
DataFrame %>%
dsCCPhos::TrackValueCounts(FeatureNames = names(MonitorMetaData),
TransformationStage = "Final") %>%
select(Feature,
Value,
Frequency) %>%
rename(Value_Final = Value,
Count_Final = Frequency)
})
} else {
stop("Internal error: Object names in ls_DataSet and ls_MonitorMetaData must be identical and in the same order.")
}
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Module 3 I)  Merge monitor objects into coherent summaries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Summarize Transformation Tracks
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_TransformationTracks_Summaries <- purrr::pmap(.l = list(ls_TransformationTracks,
ls_MonitorMetaData),
.f = function(TrackData,
MonitorMetaData)
{
if (purrr::is_empty(TrackData) == FALSE)
{
Summary <- TrackData %>%
mutate(across(everything(), ~ as.character(.x))) %>%      # Turn all columns into character (necessary for pivot_longer() to work correctly)
tidyr::pivot_longer(cols = c(everything(), -TrackID),
names_to = c("Feature", "Stage"),
names_sep = "(__)",      # Separate by '__'-string (two underscores)
values_to = "Value") %>%
tidyr::pivot_wider(names_from = Stage,
values_from = Value) %>%
select(-TrackID) %>%
distinct() %>%
rename(Value_Raw = Raw,
Value_Harmonized = Harmonized,
Value_Recoded = Recoded,
Value_Final = Final) %>%
rowwise() %>%
mutate(IsOccurring = TRUE,
IsEligible_Raw = ifelse(is.na(Value_Raw) | is.null(MonitorMetaData[[Feature]]),      # If value is NA or if there is no set of eligible values, set variable NA...
NA,
Value_Raw %in% MonitorMetaData[[Feature]]$Value_Raw),      # ... else check if specific row value is in set of eligible values
IsEligible_Harmonized = ifelse(is.na(Value_Harmonized) | is.null(MonitorMetaData[[Feature]]),
NA,
Value_Harmonized %in% MonitorMetaData[[Feature]]$Value_Raw),
IsEligible_Recoded = ifelse(is.na(Value_Recoded) | is.null(MonitorMetaData[[Feature]]),
NA,
Value_Recoded %in% MonitorMetaData[[Feature]]$Value_Curated),
IsEligible_Final = ifelse(is.na(Value_Final),
NA,
TRUE)) %>%
ungroup()
# Add set of all eligible values regardless of occurrence to summary
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
for (i in 1:length(MonitorMetaData))   # Loop through all monitored features of a table
{
AllEligibleValues <- tibble(Feature = names(MonitorMetaData)[i],
Value_Raw = MonitorMetaData[[i]]$Value_Raw,
IsOccurring = FALSE,
IsEligible_Raw = TRUE)
Summary <- bind_rows(Summary,
AllEligibleValues)
}
# Filter out eligible values marked as not occurring if they actually occur
# Result: All eligible values are included in summary, regardless of occurrence
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Summary <- Summary %>%
group_by(Feature, Value_Raw) %>%
arrange(desc(IsOccurring), .by_group = TRUE) %>%
slice_head() %>%
ungroup() %>%
arrange(Feature,
desc(IsOccurring),
desc(IsEligible_Raw),
desc(IsEligible_Harmonized),
Value_Raw)
return(Summary)
}
else { return (data.frame()) }
})
# Create detailed transformation monitors
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Joining of info from transformation tracks and value counts
#-------------------------------------------------------------------------------
ls_TransformationMonitors <- purrr::pmap(.l = list(ls_TransformationTracks_Summaries,
ls_ValueCounts_Raw,
ls_ValueCounts_Harmonized,
ls_ValueCounts_Recoded,
ls_ValueCounts_Final),
.f = function(TransformationTracksSummary,
ValueCountsRaw,
ValueCountsHarmonized,
ValueCountsRecoded,
ValueCountsFinal)
{
if (nrow(TransformationTracksSummary) > 0)
{
TransformationTracksSummary %>%
left_join(ValueCountsRaw, by = c("Feature", "Value_Raw")) %>%
left_join(ValueCountsHarmonized, by = c("Feature", "Value_Harmonized")) %>%
left_join(ValueCountsRecoded, by = c("Feature", "Value_Recoded")) %>%
left_join(ValueCountsFinal, by = c("Feature", "Value_Final")) %>%
mutate(Count_Harmonized = case_when(IsOccurring == FALSE ~ NA,
TRUE ~ Count_Harmonized),
Count_Recoded = case_when(IsOccurring == FALSE ~ NA,
TRUE ~ Count_Recoded),
Count_Final = case_when(IsOccurring == FALSE ~ NA,
TRUE ~ Count_Final)) %>%
arrange(Feature,
desc(IsOccurring),
desc(IsEligible_Raw),
desc(IsEligible_Harmonized),
Value_Raw)
}
else { return(NULL) }
})
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Eligibility))
}
else { return(data.frame()) }
})
View(ls_EligibilityOverviews$Progress)
View(ls_EligibilityOverviews$Staging)
View(ls_TransformationMonitors$Staging)
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
distinct(pick(Feature, Value_Harmonized), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
distinct(pick(Feature, Value_Recoded), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
distinct(pick(Feature, Value_Final), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Eligibility))
}
else { return(data.frame()) }
})
View(ls_EligibilityOverviews$Staging)
?recode
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
distinct(pick(Feature, Value_Harmonized), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
distinct(pick(Feature, Value_Recoded), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
distinct(pick(Feature, Value_Final), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Eligibility)) %>%
full_join(SummaryRecoded, by = join_by(Feature, Eligibility)) %>%
full_join(SummaryFinal, by = join_by(Feature, Eligibility))
}
else { return(data.frame()) }
})
View(ls_EligibilityOverviews$Staging)
View(ls_EligibilityOverviews$Patient)
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
distinct(pick(Feature, Value_Harmonized), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
distinct(pick(Feature, Value_Recoded), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
distinct(pick(Feature, Value_Final), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Eligibility)) %>%
full_join(SummaryRecoded, by = join_by(Feature, Eligibility)) %>%
full_join(SummaryFinal, by = join_by(Feature, Eligibility)) %>%
mutate(across(c(Raw, Harmonized, Recoded, Final), ~ case_when(is.na(.x) ~ 0)))
}
else { return(data.frame()) }
})
View(ls_EligibilityOverviews$Patient)
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
distinct(pick(Feature, Value_Harmonized), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
distinct(pick(Feature, Value_Recoded), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
distinct(pick(Feature, Value_Final), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Eligibility = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Eligibility)) %>%
full_join(SummaryRecoded, by = join_by(Feature, Eligibility)) %>%
full_join(SummaryFinal, by = join_by(Feature, Eligibility)) %>%
mutate(across(c(Raw, Harmonized, Recoded, Final), ~ case_when(is.na(.x) ~ 0, .default = .x)))
}
else { return(data.frame()) }
})
View(ls_EligibilityOverviews$Patient)
View(ls_EligibilityOverviews$Staging)
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Category = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
distinct(pick(Feature, Value_Harmonized), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Category = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
distinct(pick(Feature, Value_Recoded), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Category = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
distinct(pick(Feature, Value_Final), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Category = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Category)) %>%
full_join(SummaryRecoded, by = join_by(Feature, Category)) %>%
full_join(SummaryFinal, by = join_by(Feature, Category)) %>%
mutate(Category = case_match(TRUE ~ "Eligible",
FALSE ~ "Ineligible",
is.na(Category) ~ "Missing")) %>%
mutate(across(c(Raw, Harmonized, Recoded, Final), ~ case_when(is.na(.x) ~ 0, .default = .x)))       # Turn all NAs into 0 in count columns
}
else { return(data.frame()) }
})
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Category = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
distinct(pick(Feature, Value_Harmonized), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Category = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
distinct(pick(Feature, Value_Recoded), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Category = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
distinct(pick(Feature, Value_Final), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Category = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Category)) %>%
full_join(SummaryRecoded, by = join_by(Feature, Category)) %>%
full_join(SummaryFinal, by = join_by(Feature, Category)) %>%
mutate(Category = case_match(Category,
TRUE ~ "Eligible",
FALSE ~ "Ineligible",
NA ~ "Missing")) %>%
mutate(across(c(Raw, Harmonized, Recoded, Final), ~ case_when(is.na(.x) ~ 0, .default = .x)))       # Turn all NAs into 0 in count columns
}
else { return(data.frame()) }
})
View(ls_EligibilityOverviews$Staging)
# Create overview of value eligibility in different transformation stages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_EligibilityOverviews <- purrr::map(.x = ls_TransformationMonitors,
.f = function(MonitorData)
{
if (!purrr::is_empty(MonitorData))
{
SummaryRaw <- MonitorData %>%
group_by(Feature, IsEligible_Raw) %>%
summarize(Raw = sum(Count_Raw, na.rm = TRUE)) %>%
rename(Category = IsEligible_Raw)
SummaryHarmonized <- MonitorData %>%
distinct(pick(Feature, Value_Harmonized), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Harmonized) %>%
summarize(Harmonized = sum(Count_Harmonized, na.rm = TRUE)) %>%
rename(Category = IsEligible_Harmonized)
SummaryRecoded <- MonitorData %>%
distinct(pick(Feature, Value_Recoded), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Recoded) %>%
summarize(Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
rename(Category = IsEligible_Recoded)
SummaryFinal <- MonitorData %>%
distinct(pick(Feature, Value_Final), .keep_all = TRUE) %>%
group_by(Feature, IsEligible_Final) %>%
summarize(Final = sum(Count_Final, na.rm = TRUE)) %>%
rename(Category = IsEligible_Final)
Overview <- SummaryRaw %>%
full_join(SummaryHarmonized, by = join_by(Feature, Category)) %>%
full_join(SummaryRecoded, by = join_by(Feature, Category)) %>%
full_join(SummaryFinal, by = join_by(Feature, Category)) %>%
arrange(Feature, desc(Category)) %>%
mutate(Category = case_match(Category,
TRUE ~ "Eligible",
FALSE ~ "Ineligible",
NA ~ "Missing")) %>%
mutate(across(c(Raw, Harmonized, Recoded, Final), ~ case_when(is.na(.x) ~ 0, .default = .x)))       # Turn all NAs into 0 in count columns
}
else { return(data.frame()) }
})
View(ls_EligibilityOverviews$Staging)
