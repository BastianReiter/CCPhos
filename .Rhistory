ungroup()
#--- Update PB ---
try(ProgressBar$tick())
df_Aux_DiagnosisData <- df_CDS_Diagnosis %>%
left_join(df_CDS_Staging, by = join_by(PatientID, DiagnosisID, SubDiagnosisID)) %>%
group_by(DiagnosisID) %>%
arrange(StagingReportDate) %>%
slice_head() %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
df_ADS_Diagnoses <- df_Aux_DiagnosisData %>%
left_join(df_Aux_DiagnosisSummary_Events, by = join_by(PatientID, DiagnosisID)) %>%
#filter(is.na(TimeDiagnosisToDeath) | TimeDiagnosisToDeath >= 0) %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
# Construct diagnosis-related endpoints for clinical outcome measures from event history
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   - Overall survival (OS)
#   -
#   - Progression-free survival (PFS)
#   - Disease-free survival (DFS)
#
#   - Overall response rate
#   - Disease specific survival (Death from disease or from treatment)
#
#
# df_DiagnosisSummary_Histology <- df_CDS_Histology %>%
#                                       group_by(DiagnosisID) %>%
#                                       summarize(CountSubdiagnoses = n_distinct(SubDiagnosisID),
#                                                 CountHistologyReports = n_distinct(HistologyID))
#
#
# df_ADS_Diagnoses <- df_CDS_Diagnosis %>%
#                         left_join(df_DiagnosisSummary_Histology, by = join_by(DiagnosisID))
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 3)  Generate df_ADS_Patients
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- 3
ProgressBar <- progress_bar$new(format = "Composing patient-specific data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
#-------------------------------------------------------------------------------
df_Aux_PatientSummary_Diagnosis <- df_CDS_Diagnosis %>%
group_by(PatientID) %>%
summarize(CountDiagnoses = n_distinct(DiagnosisID)) %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
# !!! TEMPORARY !!! (For easier testing, slice is performed to filter for only one diagnosis per patient)
df_ADS_Patients <- df_CDS_Patient %>%
left_join(df_Aux_PatientSummary_Diagnosis, by = join_by(PatientID)) %>%
left_join(df_ADS_Diagnoses, by = join_by(PatientID)) %>%      # <--- TEMPORARY: Joining with ADS_Diagnoses
group_by(PatientID) %>%
arrange(InitialDiagnosisDate) %>%
slice_head() %>%      # <--- TEMPORARY: Slice performed
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
View(df_ADS_Patients)
View(df_ADS_Events)
View(RawDataSet$RDS_Histology)
devtools::load_all(".")
# Augment data based on curation output
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
ADS <- AugmentationOutput$AugmentedDataSet
ADS$Patients
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
devtools::load_all(".")
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
rlang::last_trace()
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$Details$Staging)
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$ValueSetOverview$Staging)
View(CurationOutput$CurationReport$Transformation$ValueSetOverview$Staging$Raw)
View(CurationOutput$CurationReport$Transformation$ValueSetOverview$Staging$Harmonized)
library(dsCCPhos)
?summarize
?sum
devtools::load_all(".")
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$ValueSetOverview$Staging$Harmonized)
library(dsCCPhos)
devtools::load_all(".")
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$Monitors$Staging)
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
devtools::load_all(".")
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
?fill
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
CurationOutput$CurationReport$Transformation$EligibilityOverviews$Diagnosis
?group_split
?tibble
tibble(AB = A:F, cd = 1:3)
tibble(AB = LETTERS[1:3], cd = 1:3)
?rep
rep(1:3, each = 3)
tibble(AB = rep(LETTERS[1:3], each = 3), cd = 1:3)
rep(1:3, times = 2)
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
?arrange
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
devtools::load_all(".")
library(dsCCPhos)
devtools::load_all(".")
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$UnlinkedEntries)
View(CurationOutput$CurationReport$UnlinkedEntries)
View(CurationOutput$CurationReport$UnlinkedEntries$BioSampling)
CurationOutput$CurationReport$UnlinkedEntries
View(CurationOutput$CurationReport$Transformation$Monitors$Staging)
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
library(dsCCPhos)
View(CurationOutput$CurationReport$Transformation$ValueSetOverviews$Staging$Harmonized)
?across
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
?mutate
devtools::load_all(".")
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$ValueSetOverviews$Staging$Harmonized)
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Transformation$ValueSetOverviews$Staging$Harmonized)
library(dsCCPhos)
View(CurationOutput$CurationReport$Transformation$EligibilityOverviews$Staging)
View(CurationOutput$CurationReport$Transformation$ValueSetOverviews$Staging$Harmonized)
View(CurationOutput$CurationReport$Transformation$ValueSetOverviews$Staging$Raw)
View(CurationOutput$CurationReport$Transformation$ValueSetOverviews$Staging$Harmonized)
library(dsCCPhos)
# dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("GetCohortDescriptionDS")
# use_r("GetObjectStatusDS")
use_r("GetObjectMetaDataDS")
library(devtools)
# dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("GetCohortDescriptionDS")
# use_r("GetObjectStatusDS")
use_r("GetObjectMetaDataDS")
class(RawDataSet)
typeof(RawDataSet)
typeof(RawDataSet$RDS_BioSampling)
class(RawDataSet$RDS_BioSampling)
Test <- 1:3
class(Test)
typeof(Test)
dim(RawDataSet)
dim(RawDataSet$RDS_BioSampling)
length(RawDataSet)
str(RawDataSet)
str(Test)
TestStr <- str(RawDataSet$RDS_BioSampling)
TestStr
?str
names(RawDataSet$RDS_BioSampling)
nrow(RawDataSet)
length(RawDataSet$RDS_BioSampling)
sapply(RawDataSet, class)
sapply(RawDataSet$RDS_BioSampling, class)
sapply(Test, class)
class(RawDataSet)
class(RawDataSet$RDS_BioSampling)
devtools::load_all(".")
library(dsCCPhos)
devtools::load_all(".")
library(dsCCPhos)
?switch
Object <- RawDataSet
MetaData <- list()
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # If 'Object' is a vector, do not apply, instead simply return vector class
sapply(Object, class),
class(Object))
MetaData$RowCount
MetaData$DataTypes
Object <- Test
MetaData <- list()
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # If 'Object' is a vector, do not apply, instead simply return vector class
sapply(Object, class),
class(Object))
MetaData$Class
MetaData$Length
Object <- Test
MetaData <- list()
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))
MetaData$Class
Object <- RawDataSet
MetaData <- list()
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))
MetaData$DataTypes
devtools::load_all(".")
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
CuratedDataSet <- CurationOutput$CuratedDataSet
# Augment data based on curation output
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
ADS <- AugmentationOutput$AugmentedDataSet
View(ADS$Patients)
View(CuratedDataSet$Patient)
View(ADS$Events)
View(ADS$Diagnoses)
View(CuratedDataSet$Diagnosis)
View(CuratedDataSet$Patient)
devtools::load_all(".")
library(dsCCPhos)
Test <- get("ABC", envir = parent.frame())
library(dsCCPhos)
Object <- 1:5
MetaData$ObjectExists <- TRUE
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))
MetaData$ContentOverview <- data.frame(Element = MetaData$Names,
Type = MetaData$DataTypes)
Object <- 1:5
MetaData$ObjectExists <- TRUE
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))
MetaData$ContentOverview <- switch(class(Object) %in% c("list", "data.frame"),
data.frame(Element = MetaData$Names,
Type = MetaData$DataTypes))
MetaData$ObjectExists
devtools::load_all(".")
library(dsCCPhos)
?data.frame
devtools::load_all(".")
library(dsCCPhos)
