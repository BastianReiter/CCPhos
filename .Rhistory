mutate(SurgeryIntention = factor(SurgeryIntention,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated),
ResidualAssessmentLocal = factor(ResidualAssessmentLocal,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated),
ResidualAssessmentTotal = factor(ResidualAssessmentTotal,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated))
# Finalize df_CDM_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_SystemicTherapy <- df_CDM_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = factor(SystemicTherapyRelationToSurgery,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery")$Value_Curated),
SystemicTherapyIntention = factor(SystemicTherapyIntention,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention")$Value_Curated))
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataModel <- list(BioSampling = df_CDM_BioSampling,
Diagnosis = df_CDM_Diagnosis,
Histology = df_CDM_Histology,
Metastasis = df_CDM_Metastasis,
MolecularDiagnostics = df_CDM_MolecularDiagnostics,
Patient = df_CDM_Patient,
Progress = df_CDM_Progress,
RadiationTherapy = df_CDM_RadiationTherapy,
Staging = df_CDM_Staging,
Surgery = df_CDM_Surgery,
SystemicTherapy = df_CDM_SystemicTherapy)
ls_Monitors_Final <- map2(.x = ls_CuratedDataModel,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
CCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Final")
})
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
for (i in 1:length(ls_Monitors_Raw))
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
full_join(ls_Monitors_Transformed[[i]]) %>%
full_join(ls_Monitors_Final[[i]]) %>%
pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
arrange(Feature, desc(IsValueEligible))
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
for (i in 1:length(ls_Monitors_Raw))
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
dplyr::full_join(ls_Monitors_Transformed[[i]]) %>%
dplyr::full_join(ls_Monitors_Final[[i]]) %>%
tidyr::pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
dplyr::group_by(Feature, Value, IsValueEligible) %>%
dplyr::summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
dplyr::arrange(Feature, desc(IsValueEligible))
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
?join_by
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
{
if (nrow(ls_Monitors_Raw[[i]]) > 0)
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
dplyr::full_join(ls_Monitors_Transformed[[i]], join_by(Feature, Value)) %>%
dplyr::full_join(ls_Monitors_Final[[i]], join_by(Feature, Value)) %>%
tidyr::pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
dplyr::group_by(Feature, Value, IsValueEligible) %>%
dplyr::summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
dplyr::arrange(Feature, desc(IsValueEligible))
}
else
{
df_CurrentSummary <- NULL
}
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
rm(list=ls())
DataModel <- LoadRawData()
ls_CuratedDataModel <- purrr::map(.x = names(DataModel),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data
vc_Lookup <- dplyr::filter(CCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(CCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to lookup-vector
dplyr::rename(DataModel[[TableName]], any_of(vc_Lookup))      # Returns a tibble
})
# Re-set table names
names(ls_CuratedDataModel) <- names(DataModel)
ls_MonitorFeatures_BioSampling <- list(SampleType = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Value_Curated,
SampleAliquot = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot")$Value_Curated)
ls_MonitorFeatures_Diagnosis <- list(ICD10Version = NULL,
LocalizationSide = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Value_Curated)
ls_MonitorFeatures_Histology <- list(Grading = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated)
ls_MonitorFeatures_Metastasis <- list(DistantMetastasisLocalization = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Metastasis" & FeatureName == "DistantMetastasisLocalization")$Value_Curated)
ls_MonitorFeatures_MolecularDiagnostics <- list()
ls_MonitorFeatures_Patient <- list(Gender = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Value_Curated,
LastVitalStatus = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus")$Value_Curated)
ls_MonitorFeatures_Progress <- list(GlobalStatusAssessment = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatusAssessment")$Value_Curated,
LocalRelapse = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalRelapse")$Value_Curated,
LymphnodalRelapse = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalRelapse")$Value_Curated,
DistantMetastasis = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "DistantMetastasis")$Value_Curated)
ls_MonitorFeatures_RadiationTherapy <- list(RadiationTherapyRelationToSurgery = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Value_Curated,
RadiationTherapyIntention = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Value_Curated)
ls_MonitorFeatures_Staging <- list(UICCStage = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage")$Value_Curated,
TNM_T = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T")$Value_Curated,
TNM_N = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N")$Value_Curated,
TNM_M = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M")$Value_Curated,
TNM_T_Prefix = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix")$Value_Curated,
TNM_N_Prefix = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix")$Value_Curated,
TNM_M_Prefix = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix")$Value_Curated)
ls_MonitorFeatures_Surgery <- list(SurgeryIntention = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated,
ResidualAssessmentLocal = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated,
ResidualAssessmentTotal = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated)
ls_MonitorFeatures_SystemicTherapy <- list(IsChemotherapy = NULL,
IsImmunotherapy = NULL,
IsHormoneTherapy = NULL,
IsBoneMarrowTransplant = NULL,
ChemotherapyIntention = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "ChemotherapyIntention")$Value_Curated,
ChemotherapyRelationToSurgery = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "ChemotherapyRelationToSurgery")$Value_Curated)
# Put all objects in one list object to make them passable to functions (alphabetic order)
ls_MonitorFeatures_All <- list(ls_MonitorFeatures_BioSampling,
ls_MonitorFeatures_Diagnosis,
ls_MonitorFeatures_Histology,
ls_MonitorFeatures_Metastasis,
ls_MonitorFeatures_MolecularDiagnostics,
ls_MonitorFeatures_Patient,
ls_MonitorFeatures_Progress,
ls_MonitorFeatures_RadiationTherapy,
ls_MonitorFeatures_Staging,
ls_MonitorFeatures_Surgery,
ls_MonitorFeatures_SystemicTherapy)
ls_Monitors_Raw <- purrr::map2(.x = ls_CuratedDataModel,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
CCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Raw")
})
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- ls_CuratedDataModel$BioSampling
df_CDM_Diagnosis <- ls_CuratedDataModel$Diagnosis
df_CDM_Histology <- ls_CuratedDataModel$Histology
df_CDM_Metastasis <- ls_CuratedDataModel$Metastasis
df_CDM_MolecularDiagnostics <- ls_CuratedDataModel$MolecularDiagnostics
df_CDM_Patient <- ls_CuratedDataModel$Patient
df_CDM_Progress <- ls_CuratedDataModel$Progress
df_CDM_RadiationTherapy <- ls_CuratedDataModel$RadiationTherapy
df_CDM_Staging <- ls_CuratedDataModel$Staging
df_CDM_Surgery <- ls_CuratedDataModel$Surgery
df_CDM_SystemicTherapy <- ls_CuratedDataModel$SystemicTherapy
# Transform df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = CCPhos::Recode(SampleType, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType"),      # Looking up Feature to transform in Meta Data Table of Eligible Values
set_names(Value_Curated, Value_Raw))),      # This returns a vector of the form c("Value_Raw1" = "Value1", ...), thereby inducing replacement of original values with new ones as defined in Meta Data
#--------------------------------------------------
SampleAliquot = CCPhos::Recode(SampleAliquot, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Diagnosis <- df_CDM_Diagnosis %>%
mutate(ICD10Version = as.integer(str_extract(ICD10Version, "\\d+")),      # Extract ICD-10 catalogue version year from string
#------------------------------------------------
LocalizationSide = str_to_upper(LocalizationSide),
LocalizationSide = str_remove_all(LocalizationSide, " "),
LocalizationSide = CCPhos::Recode(LocalizationSide, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Histology <- df_CDM_Histology %>%
mutate(HistologyID = as.integer(str_extract(HistologyID, "\\d+")),      # Extract integer number from string in HistologyID. Serves as surrogate for chronological order of events.
#----------------------------------------------------
Grading = str_to_upper(Grading),
Grading = str_remove_all(Grading, " "),
Grading = str_replace_all(Grading, "\\|", "I"),      # Replace symbol for Roman "One"
Grading = CCPhos::Recode(Grading, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_Metastasis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Metastasis <- df_CDM_Metastasis %>%
mutate(MetastasisDiagnosisDate = lubridate::as_date(MetastasisDiagnosisDate, format = "%d.%m.%Y"),
#--------------------------------------------------
HasDistantMetastasis = as.logical(HasDistantMetastasis),
#--------------------------------------------------
DistantMetastasisLocalization = str_to_upper(DistantMetastasisLocalization),
DistantMetastasisLocalization = str_remove_all(DistantMetastasisLocalization, " "))
# Transform df_CDM_MolecularDiagnostics
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_MolecularDiagnostics <- df_CDM_MolecularDiagnostics %>%
mutate(MolecularDiagnosticsDate = lubridate::as_date(MolecularDiagnosticsDate, format = "%d.%m.%Y"))
# Transform df_CDM_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Patient <- df_CDM_Patient %>%
mutate(Gender = str_to_upper(Gender),      # Convert all lower to upper letters
Gender = str_remove_all(Gender, " "),      # Eliminate spaces
Gender = CCPhos::Recode(Gender, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
LastVitalStatusDate = lubridate::as_date(LastVitalStatusDate, format = "%m.%Y") + days(14),
#----------------------------------------------------
LastVitalStatus = CCPhos::Recode(LastVitalStatus, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Progress <- df_CDM_Progress %>%
mutate(DateOfInvestigation = lubridate::as_date(DateOfInvestigation, format = "%d.%m.%Y"),
#----------------------------------------------------
GlobalStatusAssessment = CCPhos::Recode(GlobalStatusAssessment, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatusAssessment"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
LocalRelapse = CCPhos::Recode(LocalRelapse, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalRelapse"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
LymphnodalRelapse = CCPhos::Recode(LymphnodalRelapse, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalRelapse"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------------------
DistantMetastasis = CCPhos::Recode(DistantMetastasis, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "DistantMetastasis"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_RadiationTherapy <- df_CDM_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = CCPhos::Recode(RadiationTherapyRelationToSurgery, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------
RadiationTherapyIntention = CCPhos::Recode(RadiationTherapyIntention, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
#----------------------------------------
RadiationTherapyStart = as_date(RadiationTherapyStart, format = "%d.%m.%Y"),
RadiationTherapyEnd = as_date(RadiationTherapyEnd, format = "%d.%m.%Y"))
# Transform df_CDM_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Staging <- df_CDM_Staging %>%
mutate(TNMDocumentationDate = lubridate::as_date(TNMDocumentationDate, format = "%d.%m.%Y"),
#------------------------------------------------------
UICCStage = str_to_upper(UICCStage),
UICCStage = str_remove_all(UICCStage, " "),
UICCStage = str_replace_all(UICCStage, c("0A" = "0a",      # For specific values, (re)turn upper to lower letters
"0IS" = "0is")),
UICCStage = str_replace_all(UICCStage, "\\|", "I"),      # Replace vertical bar symbol with Roman "One"
UICCStage = CCPhos::Recode(UICCStage, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_T = str_to_lower(TNM_T),      # Convert all upper to lower letters
TNM_T = str_remove_all(TNM_T, " "),
TNM_T = str_replace_all(TNM_T, c("is\\(dcis\\)" = "is(DCIS)",      # For specific values, (re)turn lower to upper letters
"is\\(lcis\\)" = "is(LCIS)",
"t1mi" = "T1mi",
"x" = "X")),
TNM_T = str_replace_all(TNM_T, c("1\\(sm\\)" = "1b",
"1\\(sm1\\)" = "1b",
"1\\(sm2\\)" = "1b",
"1\\(sm3\\)" = "1b",
"1\\(sn3\\)" = "1b")),      # In esophageal cancer, T1b tumors can be subdivided depending on area of affected submucosa. This operation eliminates this subdivision.
TNM_T = CCPhos::Recode(TNM_T, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_N = str_to_lower(TNM_N),
TNM_N = str_remove_all(TNM_N, " "),
TNM_N = str_replace_all(TNM_N, c("x" = "X",
"x\\(sn\\)" = "X(sn)",
"0sn" = "0(sn)")),
TNM_N = CCPhos::Recode(TNM_N, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_M = str_to_lower(TNM_M),      # Convert all upper to lower letters
TNM_M = str_remove_all(TNM_M, " "),
TNM_M = str_replace_all(TNM_M, c("x" = "X")),
TNM_M = CCPhos::Recode(TNM_M, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_T_Prefix = str_to_lower(TNM_T_Prefix),
TNM_T_Prefix = str_remove_all(TNM_T_Prefix, " "),
TNM_T_Prefix = str_replace_all(TNM_T_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_T_Prefix = CCPhos::Recode(TNM_T_Prefix, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_N_Prefix = str_to_lower(TNM_N_Prefix),
TNM_N_Prefix = str_remove_all(TNM_N_Prefix, " "),
TNM_N_Prefix = str_replace_all(TNM_N_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_N_Prefix = CCPhos::Recode(TNM_N_Prefix, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_M_Prefix = str_to_lower(TNM_M_Prefix),
TNM_M_Prefix = str_remove_all(TNM_M_Prefix, " "),
TNM_M_Prefix = str_replace_all(TNM_M_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_M_Prefix = CCPhos::Recode(TNM_M_Prefix, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Surgery <- df_CDM_Surgery %>%
mutate(SurgeryID = as.integer(str_extract(SurgeryID, "\\d+")),      # Extract integer number from string in SurgeryID. Serves as surrogate for chronological order of events.
#----------------------------------------------------
SurgeryIntention = CCPhos::Recode(SurgeryIntention, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
ResidualAssessmentLocal = CCPhos::Recode(ResidualAssessmentLocal, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
ResidualAssessmentTotal = CCPhos::Recode(ResidualAssessmentTotal, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDM_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_SystemicTherapy <- df_CDM_SystemicTherapy %>%
mutate(IsChemotherapy = as.logical(IsChemotherapy),
IsImmunotherapy = as.logical(IsImmunotherapy),
IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
#------------------------------------------
SystemicTherapyIntention = CCPhos::Recode(SystemicTherapyIntention, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------
SystemicTherapyRelationToSurgery = CCPhos::Recode(SystemicTherapyRelationToSurgery, with(dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "ChemotherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------
SystemicTherapyStart = as_date(SystemicTherapyStart, format = "%d.%m.%Y"),
SystemicTherapyEnd = as_date(SystemicTherapyEnd, format = "%d.%m.%Y"))
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataModel <- list(BioSampling = df_CDM_BioSampling,
Diagnosis = df_CDM_Diagnosis,
Histology = df_CDM_Histology,
Metastasis = df_CDM_Metastasis,
MolecularDiagnostics = df_CDM_MolecularDiagnostics,
Patient = df_CDM_Patient,
Progress = df_CDM_Progress,
RadiationTherapy = df_CDM_RadiationTherapy,
Staging = df_CDM_Staging,
Surgery = df_CDM_Surgery,
SystemicTherapy = df_CDM_SystemicTherapy)
ls_Monitors_Transformed <- map2(.x = ls_CuratedDataModel,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
CCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Transformed")
})
# Finalize df_CDM_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_BioSampling <- df_CDM_BioSampling %>%
mutate(SampleType = factor(SampleType,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Value_Curated),
SampleAliquot = factor(SampleAliquot,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot")$Value_Curated))
# Finalize df_CDM_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Diagnosis <- df_CDM_Diagnosis %>%
mutate(LocalizationSide = factor(LocalizationSide,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Value_Curated))
# Finalize df_CDM_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Histology <- df_CDM_Histology %>%
mutate(Grading = factor(Grading,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated),
GradingLabel = factor(Grading,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated,
labels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Label_Curated))
# Finalize df_CDM_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Patient <- df_CDM_Patient %>%
mutate(Gender = factor(Gender,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Value_Curated),      # Convert to factor to mark ineligible values as NA and establish level order where appropriate
LastVitalStatus = factor(LastVitalStatus,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus")$Value_Curated))
# Finalize df_CDM_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Progress <- df_CDM_Progress %>%
mutate(GlobalStatusAssessment = factor(GlobalStatusAssessment,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatusAssessment")$Value_Curated),
LocalRelapse = factor(LocalRelapse,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalRelapse")$Value_Curated),
LymphnodalRelapse = factor(LymphnodalRelapse,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalRelapse")$Value_Curated),
DistantMetastasis = factor(DistantMetastasis,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "DistantMetastasis")$Value_Curated))
# Finalize df_CDM_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_RadiationTherapy <- df_CDM_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = factor(RadiationTherapyRelationToSurgery,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Value_Curated),
RadiationTherapyIntention = factor(RadiationTherapyIntention,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Value_Curated))
# Finalize df_CDM_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Staging <- df_CDM_Staging %>%
mutate(UICCStage = factor(UICCStage,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage")$Value_Curated),
TNM_T = factor(TNM_T,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T")$Value_Curated),
TNM_N = factor(TNM_N,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N")$Value_Curated),
TNM_M = factor(TNM_M,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M")$Value_Curated),
TNM_T_Prefix = factor(TNM_T_Prefix,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix")$Value_Curated),
TNM_N_Prefix = factor(TNM_N_Prefix,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix")$Value_Curated),
TNM_M_Prefix = factor(TNM_M_Prefix,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix")$Value_Curated))
# Finalize df_CDM_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_Surgery <- df_CDM_Surgery %>%
mutate(SurgeryIntention = factor(SurgeryIntention,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated),
ResidualAssessmentLocal = factor(ResidualAssessmentLocal,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated),
ResidualAssessmentTotal = factor(ResidualAssessmentTotal,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated))
# Finalize df_CDM_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDM_SystemicTherapy <- df_CDM_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = factor(SystemicTherapyRelationToSurgery,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery")$Value_Curated),
SystemicTherapyIntention = factor(SystemicTherapyIntention,
levels = dplyr::filter(CCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention")$Value_Curated))
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataModel <- list(BioSampling = df_CDM_BioSampling,
Diagnosis = df_CDM_Diagnosis,
Histology = df_CDM_Histology,
Metastasis = df_CDM_Metastasis,
MolecularDiagnostics = df_CDM_MolecularDiagnostics,
Patient = df_CDM_Patient,
Progress = df_CDM_Progress,
RadiationTherapy = df_CDM_RadiationTherapy,
Staging = df_CDM_Staging,
Surgery = df_CDM_Surgery,
SystemicTherapy = df_CDM_SystemicTherapy)
ls_Monitors_Final <- map2(.x = ls_CuratedDataModel,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
CCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Final")
})
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
{
if (nrow(ls_Monitors_Raw[[i]]) > 0)
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
dplyr::full_join(ls_Monitors_Transformed[[i]], join_by(Feature, Value)) %>%
dplyr::full_join(ls_Monitors_Final[[i]], join_by(Feature, Value)) %>%
tidyr::pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
dplyr::group_by(Feature, Value, IsValueEligible) %>%
dplyr::summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
dplyr::arrange(Feature, desc(IsValueEligible))
}
else
{
df_CurrentSummary <- NULL
}
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
{
if (nrow(ls_Monitors_Raw[[i]]) > 0)
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
dplyr::full_join(ls_Monitors_Transformed[[i]]) %>%
dplyr::full_join(ls_Monitors_Final[[i]]) %>%
tidyr::pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
dplyr::group_by(Feature, Value, IsValueEligible) %>%
dplyr::summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
dplyr::arrange(Feature, desc(IsValueEligible))
}
else
{
df_CurrentSummary <- NULL
}
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
# Name the monitor summary objects
names(ls_MonitorSummaries) <- c("Monitor_BioSampling",
"Monitor_Diagnosis",
"Monitor_Histology",
"Monitor_Metastasis",
"Monitor_MolecularDiagnostics",
"Monitor_Patient",
"Monitor_Progress",
"Monitor_RadiationTherapy",
"Monitor_Staging",
"Monitor_Surgery",
"Monitor_SystemicTherapy")
