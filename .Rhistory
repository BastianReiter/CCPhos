"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Use require() to load package namespaces
require(dplyr)
require(dsCCPhos)
require(lubridate)
require(progress)
require(purrr)
require(stats)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate Messaging objects
Messages <- list()
Messages$Completed <- FALSE
# For testing purposes
RuleSet_RawDataHarmonization.S <- dsCCPhos::RuleSet_RawDataHarmonization
RuleProfile_RawDataHarmonization.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
# Setting up 'ls_DataSet' as object that holds all data throughout the function. It will be un- and repacked a couple of times during processing.
ls_DataSet <- RawDataSet
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { str_remove(TableName, "RDS_") })
AllTableNames <- dsCCPhos::Meta_TableNames$TableName_Curated
MissingTableNames <- AllTableNames[!(AllTableNames %in% names(ls_DataSet))]
is.null(MissingTableNames)
length(MissingTableNames)
# Create empty data frames for missing tables
if (length(MissingTableNames) > 0)
{
for (i in 1:length(MissingTableNames))
{
ls_DataSet[[MissingTableNames[i]]] <- data.frame()
}
}
# Reestablish original order of tables in ls_DataSet
ls_DataSet <- ls_DataSet[AllTableNames]
# Looping through tables to rename features
ls_DataSet <- ls_DataSet %>%
imap(function(dataframe, name)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Curated
if (nrow(dataframe) > 0)
{
# Rename feature names according to look-up vector
dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
}
else
{
# Create empty data.frame with pre-defined column names
df <- data.frame(matrix(nrow = 0,
ncol = length(names(vc_Lookup)))) %>%
setNames(names(vc_Lookup)) %>%
mutate(across(everything(), ~ as.character(.x)))
return(df)
}
})
devtools::load_all(".")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData_WithMissingTables.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
sample <- data.frame()
if (nrow(RawDataSet$sample) > 0)
{
sample <- as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs))
}
molecularmarker <- data.frame()
if (nrow(RawDataSet$`molecular-marker`) > 0)
{
molecularmarker <- as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs))
}
RawDataSet <- list(sample = sample,
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = molecularmarker,
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData_WithMissingTables.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
sample <- data.frame()
if (nrow(RawDataSet$sample) > 0)
{
sample <- as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs))
}
molecularmarker <- data.frame()
if (nrow(RawDataSet$`molecular-marker`) > 0)
{
molecularmarker <- as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs))
}
RawDataSet <- list(sample = sample,
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = molecularmarker,
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
require(dplyr)
require(dsCCPhos)
require(lubridate)
require(progress)
require(purrr)
require(stats)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate Messaging objects
Messages <- list()
Messages$Completed <- FALSE
# For testing purposes
RuleSet_RawDataHarmonization.S <- dsCCPhos::RuleSet_RawDataHarmonization
RuleProfile_RawDataHarmonization.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 1)  Transformation of table and feature names
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Setting up 'ls_DataSet' as object that holds all data throughout the function. It will be un- and repacked a couple of times during processing.
ls_DataSet <- RawDataSet
# Rename tables (Remove the 'RDS_'-prefix)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { str_remove(TableName, "RDS_") })
# If tables are missing, create corresponding empty tables for easier management throughout following processing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AllTableNames <- dsCCPhos::Meta_TableNames$TableName_Curated
MissingTableNames <- AllTableNames[!(AllTableNames %in% names(ls_DataSet))]
# Create empty data frames for missing tables
if (length(MissingTableNames) > 0)
{
for (i in 1:length(MissingTableNames))
{
ls_DataSet[[MissingTableNames[i]]] <- data.frame()
}
}
# Reestablish original order of tables in ls_DataSet
ls_DataSet <- ls_DataSet[AllTableNames]
# Rename features
#~~~~~~~~~~~~~~~~
# Looping through tables to rename features
ls_DataSet <- ls_DataSet %>%
imap(function(dataframe, name)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Curated
if (nrow(dataframe) > 0)
{
# Rename feature names according to look-up vector
dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
}
else
{
# Create empty data.frame with pre-defined column names
df <- data.frame(matrix(nrow = 0,
ncol = length(names(vc_Lookup)))) %>%
setNames(names(vc_Lookup)) %>%
mutate(across(everything(), ~ as.character(.x)))
return(df)
}
})
# # Unpack list into data frames for easier management
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# df_BioSampling <- ls_DataSet$BioSampling
# df_Diagnosis <- ls_DataSet$Diagnosis
# df_Histology <- ls_DataSet$Histology
# df_Metastasis <- ls_DataSet$Metastasis
# df_MolecularDiagnostics <- ls_DataSet$MolecularDiagnostics
# df_Patient <- ls_DataSet$Patient
# df_Progress <- ls_DataSet$Progress
# df_RadiationTherapy <- ls_DataSet$RadiationTherapy
# df_Staging <- ls_DataSet$Staging
# df_Surgery <- ls_DataSet$Surgery
# df_SystemicTherapy <- ls_DataSet$SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 2)  Primary table cleaning
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Remove entries that are not linked to related tables
#   - Remove duplicate entries
#-------------------------------------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Count unlinked entries (Part 1)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Count entries in data frames before cleaning
CountEntriesBeforeCleaning <- ls_DataSet %>%
map_int(\(dataframe) nrow(dataframe))
# Set up progress bar
CountProgressItems <- 12
ProgressBar <- progress_bar$new(format = "Cleaning table entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
ls_DataSet <- ls_DataSet %>%
imap(function(dataframe, name)
{
if (name == "Patient")
{
# Get vector of PatientIDs that are linked with one or more DiagnosisIDs
vc_EligiblePatientIDs <- dataframe %>%
left_join(ls_DataSet$Diagnosis, by = join_by(PatientID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(PatientID)
# Filter out patient entries with no related diagnosis data and keep only distinct rows (removal of duplicates)
return(dataframe %>%
filter(PatientID %in% vc_EligiblePatientIDs) %>%
distinct())
}
if (name == "Diagnosis")
{
# Get vector of DiagnosisIDs that are linked with a PatientID
vc_EligibleDiagnosisIDs <- dataframe %>%
left_join(ls_DataSet$Patient, by = join_by(PatientID)) %>%
filter(!is.na(PatientID)) %>%
pull(DiagnosisID)
# Filter out diagnosis entries with no related patient data and keep only distinct rows (removal of duplicates)
return(dataframe %>%
filter(DiagnosisID %in% vc_EligibleDiagnosisIDs) %>%
distinct(across(-DiagnosisID), .keep_all = TRUE))      # Keep only rows that are distinct (everywhere but DiagnosisID)
}
if (name == "Histology")
{
# Get vector of HistologyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleHistologyIDs <- dataframe %>%
left_join(ls_DataSet$Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(HistologyID)
# Filter out histology entries with no related diagnosis data and keep only distinct rows (removal of duplicates)
return(dataframe %>%
filter(HistologyID %in% vc_EligibleHistologyIDs) %>%
distinct(across(-HistologyID), .keep_all = TRUE))
}
if (name == "BioSampling")
{
if (!(is.null(dataframe) | length(dataframe) == 0))
{
# Get vector of SampleIDs that are linked with a PatientID
vc_EligibleSampleIDs <- dataframe %>%
left_join(ls_DataSet$Patient, by = join_by(PatientID)) %>%
filter(!is.na(PatientID)) %>%
pull(SampleID)
# Filter out...
return(dataframe %>%
filter(SampleID %in% vc_EligibleSampleIDs) %>%
distinct())
}
else (return(dataframe))
}
if (name == "Metastasis")
{
# Get vector of MetastasisIDs that are linked with a PatientID / DiagnosisID
vc_EligibleMetastasisIDs <- dataframe %>%
left_join(ls_DataSet$Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(MetastasisID)
# Filter out...
return(dataframe %>%
filter(MetastasisID %in% vc_EligibleMetastasisIDs) %>%
distinct(across(-MetastasisID), .keep_all = TRUE))
}
if (name == "MolecularDiagnostics")
{
if (!(is.null(dataframe) | length(dataframe) == 0))
{
# Get vector of MolecularDiagnosticsIDs that are linked with a PatientID / DiagnosisID
vc_EligibleMolecularDiagnosticsIDs <- dataframe %>%
left_join(ls_DataSet$Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(MolecularDiagnosticsID)
# Filter out...
return(dataframe %>%
filter(MolecularDiagnosticsID %in% vc_EligibleMolecularDiagnosticsIDs) %>%
distinct(across(-MolecularDiagnosticsID), .keep_all = TRUE))
}
else (return(dataframe))
}
if (name == "Progress")
{
# Get vector of ProgressIDs that are linked with a PatientID / DiagnosisID
vc_EligibleProgressIDs <- dataframe %>%
left_join(ls_DataSet$Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(ProgressID)
# Filter out...
return(dataframe %>%
filter(ProgressID %in% vc_EligibleProgressIDs) %>%
distinct(across(-ProgressID), .keep_all = TRUE))
}
if (name == "RadiationTherapy")
{
# Get vector of RadiationTherapyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleRadiationTherapyIDs <- dataframe %>%
left_join(ls_DataSet$Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(RadiationTherapyID)
# Filter out...
return(dataframe %>%
filter(RadiationTherapyID %in% vc_EligibleRadiationTherapyIDs) %>%
distinct(across(-RadiationTherapyID), .keep_all = TRUE))
}
if (name == "Staging")
{
# Get vector of StagingIDs that are linked with a PatientID / DiagnosisID
vc_EligibleStagingIDs <- dataframe %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(StagingID)
# Filter out...
return(dataframe %>%
filter(StagingID %in% vc_EligibleStagingIDs) %>%
distinct(across(-StagingID), .keep_all = TRUE))
}
if (name == "Surgery")
{
# Get vector of SurgeryIDs that are linked with a PatientID / DiagnosisID
vc_EligibleSurgeryIDs <- dataframe %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(SurgeryID)
# Filter out...
return(dataframe %>%
filter(SurgeryID %in% vc_EligibleSurgeryIDs) %>%
distinct(across(-SurgeryID), .keep_all = TRUE))
}
if (name == "SystemicTherapy")
{
# Get vector of SystemicTherapyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleSystemicTherapyIDs <- dataframe %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(SystemicTherapyID)
# Filter out...
return(dataframe %>%
filter(SystemicTherapyID %in% vc_EligibleSystemicTherapyIDs) %>%
distinct(across(-SystemicTherapyID), .keep_all = TRUE))
}
try(ProgressBar$tick()) })
devtools::load_all(".")
rm(list = ls())
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData_WithMissingTables.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
sample <- data.frame()
if (nrow(RawDataSet$sample) > 0)
{
sample <- as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs))
}
molecularmarker <- data.frame()
if (nrow(RawDataSet$`molecular-marker`) > 0)
{
molecularmarker <- as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs))
}
RawDataSet <- list(sample = sample,
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = molecularmarker,
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
devtools::load_all(".")
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
CuratedDataSet <- CurationOutput$CuratedDataSet
View(CuratedDataSet$Patient)
# Augment data
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
ADS <- AugmentationOutput$AugmentedDataSet
View(ADS$Patients)
SampleStatistics <- GetSampleStatisticsDS(TableName.S = "ADS$Patients",
FeatureName.S = "LastVitalStatus")
?exists
is.null(ABC)
exists(ABC)
ABC <- data.frame()
is.null(ABC)
?purrr::is_empty
purrr::is_empty(ABC)
devtools::load_all(".")
devtools::load_all(".")
?try
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
RawDataSet <- list(sample = sample,
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = molecularmarker,
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
sample <- data.frame()
if (nrow(RawDataSet$sample) > 0)
{
sample <- as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs))
}
molecularmarker <- data.frame()
if (nrow(RawDataSet$`molecular-marker`) > 0)
{
molecularmarker <- as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs))
}
RawDataSet <- list(sample = sample,
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = molecularmarker,
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
View(RawDataSet$patient)
View(RawDataSet$diagnosis)
