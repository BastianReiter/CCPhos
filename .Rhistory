systemische_therapie_ende = df_SDM_SystemicTherapy$DateSystemicTherapyEnd,
systemische_therapie_protokoll = df_SDM_SystemicTherapy$SystemicTherapyProtocol,
systemische_therapie_substanzen = df_SDM_SystemicTherapy$SystemicTherapySubstances,
chemotherapie = df_SDM_SystemicTherapy$IsChemotherapy,
hormontherapie = df_SDM_SystemicTherapy$IsHormonetherapy,
immuntherapie = df_SDM_SystemicTherapy$IsImmunotherapy,
knochenmarktransplantation = df_SDM_SystemicTherapy$IsBonemarrowtransplant))
df_Staging <- DBI::dbReadTable(TestDB, name = "tnm")
df_Staging <- df_Staging %>%
bind_rows(data.frame(tnm.id = df_SDM_Staging$TnmID,
diagnosis.id = df_SDM_Staging$TumorID,
patient.id = df_SDM_Staging$PatientID,
datum_der_tnm_dokumentation_datum_befund = df_SDM_Staging$DateTNMDocumentation,
uicc_stadium = df_SDM_Staging$UICCStage,
tnm.t = df_SDM_Staging$TNM_T,
tnm.n = df_SDM_Staging$TNM_N,
tnm.m = df_SDM_Staging$TNM_M,
c_p_u_preefix_t = df_SDM_Staging$TNM_T_Prefix,
c_p_u_preefix_n = df_SDM_Staging$TNM_N_Prefix,
c_p_u_preefix_m = df_SDM_Staging$TNM_M_Prefix,
tnm.y.symbol = df_SDM_Staging$TNM_ySymbol,
tnm.r.symbol = df_SDM_Staging$TNM_rSymbol,
tnm.m.symbol = df_SDM_Staging$TNM_mSymbol,
tnm.version = df_SDM_Staging$TNMVersion))
DBI::dbWriteTable(TestDB, name = "patient", value = df_Patients, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "diagnosis", value = df_Diagnosis, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "histology", value = df_Histology, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "metastasis", value = df_Metastasis, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "molecular-marker", value = df_MolecularDiagnostics, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "progress", value = df_Progress, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "radiation-therapy", value = df_Radiotherapy, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "sample", value = df_BioSampling, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "surgery", value = df_Surgery, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "system-therapy", value = df_SystemicTherapy, overwrite = TRUE)
DBI::dbWriteTable(TestDB, name = "tnm", value = df_Staging, overwrite = TRUE)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("MakeSyntheticDB")
# use_r("Augment")
use_r("Connect")
library(devtools)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("MakeSyntheticDB")
# use_r("Augment")
use_r("Connect")
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
use_r("LoadData")
library(devtools)
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dbplyr")
# use_package("dplyr")
# use_package("duckdb")
# use_package("ggplot2")
# use_package("gt")
# use_package("gtExtras")
# use_package("lubridate")
# use_package("readxl")
use_package("RPostgreSQL")
LoadData <- function()
{
ConnectToOpalDB()
}
LoadData()
rm(list=ls())
library(CCPhos)
devtools::load_all(".")
devtools::load_all(".")
LoadData()
ls()
ls()[!"TestDB"]
ls()["TestDB"]
ls()[ls() != "TestDB"]
rm(list = ls()[ls() != "TestDB"])
DBI::dbListTables(TestDB)
?DBI::dbGetQuery
df_SDM_Patients <- DBI::dbGetQuery(conn = TestDB,
statement = "SELECT * FROM patient")
View(df_SDM_Patients)
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dbplyr")
# use_package("dplyr")
# use_package("duckdb")
# use_package("ggplot2")
# use_package("gt")
# use_package("gtExtras")
# use_package("lubridate")
# use_package("readxl")
use_package("RPostgres")
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dbplyr")
# use_package("dplyr")
# use_package("duckdb")
# use_package("ggplot2")
# use_package("gt")
# use_package("gtExtras")
# use_package("lubridate")
# use_package("readxl")
use_package("RPostgres")
?RPostgres::Postgres
OpalDBConnection <- TestDB
df_SDM_Patients <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM patient") %>% tibble::as_tibble()
df_SDM_Diagnosis <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM diagnosis") %>% tibble::as_tibble()
DBI::dbListTables(OpalDBConnection)
df_SDM_Histology <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM histology") %>% tibble::as_tibble()
df_SDM_Metastasis <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM metastasis") %>% tibble::as_tibble()
df_SDM_MolecularDiagnostics <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM molecular-marker") %>% tibble::as_tibble()
df_SDM_MolecularDiagnostics <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'molecular-marker'") %>% tibble::as_tibble()
df_SDM_Progress <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM progress") %>% tibble::as_tibble()
df_SDM_RadiationTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'radiation-therapy'") %>% tibble::as_tibble()
df_SDM_Surgery <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM surgery") %>% tibble::as_tibble()
df_SDM_SystemicTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'system-therapy'") %>% tibble::as_tibble()
df_SDM_Patients <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM patient") %>% tibble::as_tibble()
df_SDM_Diagnosis <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM diagnosis") %>% tibble::as_tibble()
df_SDM_Histology <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM histology") %>% tibble::as_tibble()
df_SDM_Metastasis <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM metastasis") %>% tibble::as_tibble()
df_SDM_MolecularDiagnostics <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'molecular-marker'") %>% tibble::as_tibble()
df_SDM_Progress <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM progress") %>% tibble::as_tibble()
df_SDM_RadiationTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'radiation-therapy'") %>% tibble::as_tibble()
df_SDM_Surgery <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM surgery") %>% tibble::as_tibble()
df_SDM_SystemicTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'system-therapy'") %>% tibble::as_tibble()
df_SDM_Staging <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM tnm") %>% tibble::as_tibble()
df_SDM_BioSampling <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM sample") %>% tibble::as_tibble()
#' LoadData
#'
#' @return
#' @export
#'
#' @examples
# LoadData <- function()
# {
rm(list = ls())
ConnectToOpalDB()
OpalDBConnection <- TestDB
DBI::dbListTables(OpalDBConnection)
ls_RawDataModel <- list(df_RDM_Patients = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM patient") %>% tibble::as_tibble(),
df_RDM_Diagnosis = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM diagnosis") %>% tibble::as_tibble(),
df_RDM_Histology <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM histology") %>% tibble::as_tibble(),
df_RDM_Metastasis <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM metastasis") %>% tibble::as_tibble(),
df_RDM_MolecularDiagnostics <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'molecular-marker'") %>% tibble::as_tibble(),
df_RDM_Progress <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM progress") %>% tibble::as_tibble(),
df_RDM_RadiationTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'radiation-therapy'") %>% tibble::as_tibble(),
df_RDM_Surgery <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM surgery") %>% tibble::as_tibble(),
df_RDM_SystemicTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'system-therapy'") %>% tibble::as_tibble(),
df_RDM_Staging <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM tnm") %>% tibble::as_tibble(),
df_RDM_BioSampling <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM sample") %>% tibble::as_tibble())
#' LoadData
#'
#' @return
#' @export
#'
#' @examples
# LoadData <- function()
# {
rm(list = ls())
ConnectToOpalDB()
OpalDBConnection <- TestDB
DBI::dbListTables(OpalDBConnection)
ls_RawDataModel <- list(df_RDM_Patients = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM patient") %>% tibble::as_tibble(),
df_RDM_Diagnosis = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM diagnosis") %>% tibble::as_tibble(),
df_RDM_Histology <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM histology") %>% tibble::as_tibble(),
df_RDM_Metastasis <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM metastasis") %>% tibble::as_tibble(),
df_RDM_MolecularDiagnostics <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'molecular-marker'") %>% tibble::as_tibble(),
df_RDM_Progress <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM progress") %>% tibble::as_tibble(),
df_RDM_RadiationTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'radiation-therapy'") %>% tibble::as_tibble(),
df_RDM_Surgery <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM surgery") %>% tibble::as_tibble(),
df_RDM_SystemicTherapy <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'system-therapy'") %>% tibble::as_tibble(),
df_RDM_Staging <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM tnm") %>% tibble::as_tibble(),
df_RDM_BioSampling <- DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM sample") %>% tibble::as_tibble())
#' LoadData
#'
#' @return
#' @export
#'
#' @examples
# LoadData <- function()
# {
rm(list = ls())
ConnectToOpalDB()
OpalDBConnection <- TestDB
DBI::dbListTables(OpalDBConnection)
ls_RawDataModel <- list(df_RDM_Patients = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM patient") %>% tibble::as_tibble(),
df_RDM_Diagnosis = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM diagnosis") %>% tibble::as_tibble(),
df_RDM_Histology = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM histology") %>% tibble::as_tibble(),
df_RDM_Metastasis = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM metastasis") %>% tibble::as_tibble(),
df_RDM_MolecularDiagnostics = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'molecular-marker'") %>% tibble::as_tibble(),
df_RDM_Progress = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM progress") %>% tibble::as_tibble(),
df_RDM_RadiationTherapy = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'radiation-therapy'") %>% tibble::as_tibble(),
df_RDM_Surgery = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM surgery") %>% tibble::as_tibble(),
df_RDM_SystemicTherapy = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM 'system-therapy'") %>% tibble::as_tibble(),
df_RDM_Staging = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM tnm") %>% tibble::as_tibble(),
df_RDM_BioSampling = DBI::dbGetQuery(conn = OpalDBConnection,
statement = "SELECT * FROM sample") %>% tibble::as_tibble())
devtools::load_all(".")
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
use_r("LoadMetaData")
library(readxl)
library(usethis)
df_Meta_ValueSets <- read_excel(path = here::here(MetaDataPath, MetaDataFileName),
sheet = "ValueSets")
df_Meta_ValueSets <- read_excel(path = "./MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
df_Meta_ValueSets <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(df_Meta_ValueSets, overwrite = TRUE)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
use_r("data")
Meta_ValueSets <- read_excel(path = "./Development/MetaData/MetaDataCCP.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(Meta_ValueSets, overwrite = TRUE)
?DBI::dbConnect
View(Meta_ValueSets)
devtools::load_all(".")
devtools::load_all(".")
?CCPhos::Meta_ValueSets
rm(list = ls())
CCPhos::LoadRawData()
library(devtools)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
# use_r("data")
use_r("Harmonize")
DataModel <- LoadRawData()
DBI::dbListTables(TestDB)
rm(list = ls())
DataModel <- LoadRawData()
# Disconnect
duckdb::dbDisconnect(conn = OpalDBConnection)
# Disconnect
duckdb::dbDisconnect(con = OpalDBConnection)
# Disconnect
duckdb::dbDisconnect(con = OpalDBConnection)
?duckdb::`dbDisconnect,duckdb_connection-method`
rm(list=ls())
DataModel <- LoadRawData()
View(TestDB)
DBI::dbListTables(TestDB)
View(DataModel$df_RDM_Diagnosis)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
# use_r("data")
use_r("DataModelToDB")
devtools::load_all(".")
CCPDataModel <- CCPhos::XMLToDataModel(XMLSchemaFilePath = "./Development/MetaData/SchemaOpalDB.xml")
devtools::load_all(".")
CCPDataModel <- CCPhos::XMLToDataModel(XMLSchemaFilePath = "./Development/MetaData/SchemaOpalDB.xml")
TestDB <- CCPhos::DataModelToDB(DataModel = CCPDataModel,
DBPath = ":memory:")
CCPDataModel$patient
View(CCPDataModel$patient)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
# use_r("data")
use_r("DataModelToCSV")
names(CCPDataModel)
names(CCPDataModel)[i]
names(CCPDataModel)[1]
length(CCPDataModel[1])
length(CCPDataModel[[1]])
CCPDataModel[1]
?tibble::tibble()
cbind(1, 1:3)
as_tibble(cbind(1, 1:3))
tibble::tibble(cbind(1, 1:3))
tibble::tibble(tbl = "test", val = 1:3)
names(CCPDataModel[[1]])
colnames(CCPDataModel[[1]])
summary(CCPDataModel$patient)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
# use_r("data")
# use_r("DataModelToCSV")
# use_r("DataModelToDB")
use_r("GetDFInfo")
?unlist
?add_column
?pull
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
names(CCPDataModel[[1]])
names(CCPDataModel[1])
?names
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
?write.csv
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dbplyr")
# use_package("dplyr")
# use_package("duckdb")
# use_package("ggplot2")
# use_package("gt")
# use_package("gtExtras")
# use_package("lubridate")
use_package("readr")
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
CCPDataModel[[1]]
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
names(CCPDataModel[1])
deparse(substitute(CCPDataModel[[1]]))
substitute(CCPDataModel[[1]])
eval(CCPDataModel[[1]])
substitute(eval(CCPDataModel[[1]]))
deparse(substitute(eval(CCPDataModel[[1]])))
get_dataframe_name <- function(dataframe) {
as.character(substitute(dataframe))
}
# Example
my_data <- data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))
dataframe_name <- get_dataframe_name(my_data)
print(dataframe_name)
?assign
names(CCPDataModel[1])
names(CCPDataModel)
names(CCPDataModel)[1]
CCPDataModel[[1]]
typeof(CCPDataModel[[1]])
typeof(CCPDataModel[1])
typeof(CCPDataModel[1][1])
as.data.frame(CCPDataModel[[1]])
typeof(as.data.frame(CCPDataModel[[1]]))
test <- data.frame()
typeof(test)
is.data.frame(CCPDataModel[[1]])
is.data.frame(CCPDataModel[1])
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
assign(names(CCPDataModel)[1], CCPDataModel[[1]])
View(patient)
test <- data.frame(x = 1:3, y = 4:6)
CCPhos::GetDFInfo(test)
devtools::load_all(".")
devtools::load_all(".")
CCPhos::GetDFInfo(test)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
?eval
?name
GetDFInfo(test)
GetDFInfo(CCPDataModel[[1]])
GetDFInfo(CCPDataModel[1])
GetDFInfo(CCPDataModel$patient)
GetDFInfo(as.data.frame(CCPDataModel$patient))
devtools::load_all(".")
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
test2 <- CCPDataModel[[1]]
View(test2)
?unpack
?unlist
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Augment")
# use_r("ConnectToOpalDB")
# use_r("Curate")
# use_r("data")
use_r("DataListToDataModel")
names(CCPDataModel)
CCPDataModel$"patient"
eval("CCPDataModel$patient")
CCPDataModel["patient"]
is.data.frame(CCPDataModel["patient"])
is.data.frame(CCPDataModel["patient"][])
is.data.frame(CCPDataModel["patient", ])
is.data.frame(CCPDataModel[, "patient"])
is.data.frame(CCPDataModel["patient"])
typeof(CCPDataModel["patient"])
test <- as.data.frame(CCPDataModel["patient"])
View(test)
is.data.frame(test)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
devtools::load_all(".")
CCPhos::DataModelToCSV(DataModel = CCPDataModel)
View(DataModel$df_RDM_Metastasis)
View(DataModel$df_RDM_Progress)
View(DataModel$df_RDM_Metastasis)
View(DataModel$df_RDM_Staging)
names(CCPDataModel)
library(devtools)
library(CCPhos)
DataModel <- LoadRawData()
load(file = "./Development/Data/RealData/SDM_CCPFrankfurt.RData")
CCPDataModel <- CCPhos::XMLToDataModel(XMLSchemaFilePath = "./Development/MetaData/SchemaOpalDB.xml")
TestDB <- CCPhos::DataModelToDB(DataModel = CCPDataModel,
DBPath = ":memory:")
TestDB <- CCPhos::DataModelToDB(DataModel = CCPDataModel,
DBPath = ":memory:")
DBI::dbListTables(TestDB)
df_Patients <- DBI::dbReadTable(TestDB, name = "patient")
df_Patients <- df_Patients %>%
bind_rows(data.frame(patient.id = df_SDM_Patients$PatientID,
dktk.id.lokal = df_SDM_Patients$PatientID_Site,
geburtsdatum = as.Date(paste(df_SDM_Patients$YearOfBirth, 6, 15, sep = "-")),
geschlecht = df_SDM_Patients$Sex,
datum_des_letztbekannten_vitalstatus = df_SDM_Patients$DateLastVitalStatus,
vitalstatus = df_SDM_Patients$LastVitalStatus))
devtools::load_all(".")
rm(list = ls())
DataModel <- LoadRawData()
load(file = "./Development/Data/RealData/SDM_CCPFrankfurt.RData")
rm(list = ls())
load(file = "./Development/Data/RealData/SDM_CCPFrankfurt.RData")
CCPDataModel <- CCPhos::XMLToDataModel(XMLSchemaFilePath = "./Development/MetaData/SchemaOpalDB.xml")
TestDB <- CCPhos::DataModelToDB(DataModel = CCPDataModel,
DBPath = ":memory:")
devtools::load_all(".")
DataModel <- LoadRawData()
DataModel <- LoadRawData()
