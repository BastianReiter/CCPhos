#--- Update PB ---
try(ProgressBar$tick())
# Transform df_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Progress <- df_Progress %>%
#--- Transformation ------------------------------------
dsCCPhos::TransformData(TableName = "Progress", RuleSet = RuleSet_RawDataTransformation.S, RuleProfile = RuleProfile_RawDataTransformation.S) %>%
#--- Recoding ------------------------------------------
mutate(GlobalStatus = dsCCPhos::RecodeData(GlobalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "GlobalStatus"),
set_names(Value_Curated, Value_Raw))),
LocalStatus = dsCCPhos::RecodeData(LocalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LocalStatus"),
set_names(Value_Curated, Value_Raw))),
LymphnodalStatus = dsCCPhos::RecodeData(LymphnodalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LymphnodalStatus"),
set_names(Value_Curated, Value_Raw))),
MetastasisStatus = dsCCPhos::RecodeData(MetastasisStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "MetastasisStatus"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(ProgressReportDate = format(as_datetime(ProgressReportDate), format = "%Y-%m-%d"),
LocalRelapseDate = format(as_datetime(LocalRelapseDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_RadiationTherapy <- df_RadiationTherapy %>%
#--- Transformation ----------------------------
dsCCPhos::TransformData(TableName = "RadiationTherapy", RuleSet = RuleSet_RawDataTransformation.S, RuleProfile = RuleProfile_RawDataTransformation.S) %>%
#--- Recoding ----------------------------------
mutate(RadiationTherapyRelationToSurgery = dsCCPhos::RecodeData(RadiationTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
RadiationTherapyIntention = dsCCPhos::RecodeData(RadiationTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyIntention"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting --------------------------------
mutate(RadiationTherapyStart = format(as_datetime(RadiationTherapyStart), format = "%Y-%m-%d"),
RadiationTherapyEnd = format(as_datetime(RadiationTherapyEnd), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Staging <- df_Staging %>%
#--- Transformation --------------------------------------
dsCCPhos::TransformData(TableName = "Staging", RuleSet = RuleSet_RawDataTransformation.S, RuleProfile = RuleProfile_RawDataTransformation.S) %>%
#--- Recoding --------------------------------------------
mutate(UICCStage = dsCCPhos::RecodeData(UICCStage, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "UICCStage"),
set_names(Value_Curated, Value_Raw))),
TNM_T = dsCCPhos::RecodeData(TNM_T, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T"),
set_names(Value_Curated, Value_Raw))),
TNM_N = dsCCPhos::RecodeData(TNM_N, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N"),
set_names(Value_Curated, Value_Raw))),
TNM_M = dsCCPhos::RecodeData(TNM_M, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M"),
set_names(Value_Curated, Value_Raw))),
TNM_T_Prefix = dsCCPhos::RecodeData(TNM_T_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_N_Prefix = dsCCPhos::RecodeData(TNM_N_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_M_Prefix = dsCCPhos::RecodeData(TNM_M_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M_Prefix"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ------------------------------------------
mutate(StagingReportDate = format(as_datetime(StagingReportDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Surgery <- df_Surgery %>%
#--- Transformation --------------------------------------
dsCCPhos::TransformData(TableName = "Surgery", RuleSet = RuleSet_RawDataTransformation.S, RuleProfile = RuleProfile_RawDataTransformation.S) %>%
#--- Recoding --------------------------------------------
mutate(SurgeryIntention = dsCCPhos::RecodeData(SurgeryIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "SurgeryIntention"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentLocal = dsCCPhos::RecodeData(ResidualAssessmentLocal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentLocal"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentTotal = dsCCPhos::RecodeData(ResidualAssessmentTotal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentTotal"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ------------------------------------------
mutate(SurgeryDate = format(as_datetime(SurgeryDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_SystemicTherapy <- df_SystemicTherapy %>%
#--- Transformation ------------------------------
dsCCPhos::TransformData(TableName = "SystemicTherapy", RuleSet = RuleSet_RawDataTransformation.S, RuleProfile = RuleProfile_RawDataTransformation.S) %>%
#--- Recoding ------------------------------------
mutate(SystemicTherapyIntention = dsCCPhos::RecodeData(SystemicTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
SystemicTherapyRelationToSurgery = dsCCPhos::RecodeData(SystemicTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------
mutate(IsChemotherapy = as.logical(IsChemotherapy),
IsImmunotherapy = as.logical(IsImmunotherapy),
IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
SystemicTherapyStart = format(as_datetime(SystemicTherapyStart), format = "%Y-%m-%d"),
SystemicTherapyEnd = format(as_datetime(SystemicTherapyEnd), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
devtools::load_all(".")
rm(list=ls())
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 10000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataTransformation.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$Staging)
RuleSet_RawDataTransformation <- read_excel(path = "./Development/Data/MetaData/RuleSets.xlsx",
sheet = "RawDataTransformation")
# Save data in .rda-file and make it part of package
use_data(RuleSet_RawDataTransformation, overwrite = TRUE)
devtools::load_all(".")
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 10000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# For testing purposes
RuleSet_RawDataTransformation.S = dsCCPhos::RuleSet_RawDataTransformation
RuleProfile_RawDataTransformation.S = "Default"
RuleSet_DiagnosisRedundancy.S = dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S = "Default"
RuleSet_DiagnosisAssociation.S = dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S = "Default"
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate Messaging objects
Messages <- list()
Messages$DataTransformation <- character()
Messages$DiagnosisClassification <- character()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 1)  Transformation of table and feature names
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Setting up 'ls_DataSet' as object that holds all data throughout the function. It will be un- and repacked a couple of times during processing.
ls_DataSet <- RawDataSet
# Rename tables (Remove the 'RDS_'-prefix)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { str_remove(TableName, "RDS_") })
# Rename features
#~~~~~~~~~~~~~~~~
# Looping through tables to rename features
ls_DataSet <- purrr::map(.x = names(ls_DataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(ls_DataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
}) %>%
setNames(names(ls_DataSet))      # List member names are preserved using setNames()
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_BioSampling <- ls_DataSet$BioSampling
df_Diagnosis <- ls_DataSet$Diagnosis
df_Histology <- ls_DataSet$Histology
df_Metastasis <- ls_DataSet$Metastasis
df_MolecularDiagnostics <- ls_DataSet$MolecularDiagnostics
df_Patient <- ls_DataSet$Patient
df_Progress <- ls_DataSet$Progress
df_RadiationTherapy <- ls_DataSet$RadiationTherapy
df_Staging <- ls_DataSet$Staging
df_Surgery <- ls_DataSet$Surgery
df_SystemicTherapy <- ls_DataSet$SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 2)  Primary table cleaning
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Remove entries that are not linked to related tables
#   - Remove duplicate entries
#-------------------------------------------------------------------------------
# Set up progress bar
CountProgressItems <- 12
ProgressBar <- progress_bar$new(format = "Cleaning table entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
#--- Patient -------------------------------------------------------------------
# Get vector of PatientIDs that are linked with one or more DiagnosisIDs
vc_EligiblePatientIDs <- df_Patient %>%
left_join(df_Diagnosis, by = join_by(PatientID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(PatientID)
# Filter out patient entries with no related diagnosis data and keep only distinct rows (removal of duplicates)
df_Patient <- df_Patient %>%
filter(PatientID %in% vc_EligiblePatientIDs) %>%
distinct()
try(ProgressBar$tick())
#--- Diagnosis -----------------------------------------------------------------
# Get vector of DiagnosisIDs that are linked with a PatientID
vc_EligibleDiagnosisIDs <- df_Diagnosis %>%
left_join(df_Patient, by = join_by(PatientID)) %>%
filter(!is.na(PatientID)) %>%
pull(DiagnosisID)
# Filter out diagnosis entries with no related patient data and keep only distinct rows (removal of duplicates)
df_Diagnosis <- df_Diagnosis %>%
filter(DiagnosisID %in% vc_EligibleDiagnosisIDs) %>%
distinct(across(-DiagnosisID), .keep_all = TRUE)      # Keep only rows that are distinct (everywhere but DiagnosisID)
try(ProgressBar$tick())
#--- Histology -----------------------------------------------------------------
# Get vector of HistologyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleHistologyIDs <- df_Histology %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(HistologyID)
# Filter out histology entries with no related diagnosis data and keep only distinct rows (removal of duplicates)
df_Histology <- df_Histology %>%
filter(HistologyID %in% vc_EligibleHistologyIDs) %>%
distinct(across(-HistologyID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- BioSampling ---------------------------------------------------------------
# Get vector of SampleIDs that are linked with a PatientID
vc_EligibleSampleIDs <- df_BioSampling %>%
left_join(df_Patient, by = join_by(PatientID)) %>%
filter(!is.na(PatientID)) %>%
pull(SampleID)
# Filter out...
df_BioSampling <- df_BioSampling %>%
filter(SampleID %in% vc_EligibleSampleIDs) %>%
distinct()
try(ProgressBar$tick())
#--- Metastasis ----------------------------------------------------------------
# Get vector of MetastasisIDs that are linked with a PatientID / DiagnosisID
vc_EligibleMetastasisIDs <- df_Metastasis %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(MetastasisID)
# Filter out...
df_Metastasis <- df_Metastasis %>%
filter(MetastasisID %in% vc_EligibleMetastasisIDs) %>%
distinct(across(-MetastasisID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- MolecularDiagnostics ------------------------------------------------------
# Get vector of MolecularDiagnosticsIDs that are linked with a PatientID / DiagnosisID
vc_EligibleMolecularDiagnosticsIDs <- df_MolecularDiagnostics %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(MolecularDiagnosticsID)
# Filter out...
df_MolecularDiagnostics <- df_MolecularDiagnostics %>%
filter(MolecularDiagnosticsID %in% vc_EligibleMolecularDiagnosticsIDs) %>%
distinct(across(-MolecularDiagnosticsID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Progress ------------------------------------------------------------------
# Get vector of ProgressIDs that are linked with a PatientID / DiagnosisID
vc_EligibleProgressIDs <- df_Progress %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(ProgressID)
# Filter out...
df_Progress <- df_Progress %>%
filter(ProgressID %in% vc_EligibleProgressIDs) %>%
distinct(across(-ProgressID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- RadiationTherapy ----------------------------------------------------------
# Get vector of RadiationTherapyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleRadiationTherapyIDs <- df_RadiationTherapy %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(RadiationTherapyID)
# Filter out...
df_RadiationTherapy <- df_RadiationTherapy %>%
filter(RadiationTherapyID %in% vc_EligibleRadiationTherapyIDs) %>%
distinct(across(-RadiationTherapyID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Staging -------------------------------------------------------------------
# Get vector of StagingIDs that are linked with a PatientID / DiagnosisID
vc_EligibleStagingIDs <- df_Staging %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(StagingID)
# Filter out...
df_Staging <- df_Staging %>%
filter(StagingID %in% vc_EligibleStagingIDs) %>%
distinct(across(-StagingID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Surgery -------------------------------------------------------------------
# Get vector of SurgeryIDs that are linked with a PatientID / DiagnosisID
vc_EligibleSurgeryIDs <- df_Surgery %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(SurgeryID)
# Filter out...
df_Surgery <- df_Surgery %>%
filter(SurgeryID %in% vc_EligibleSurgeryIDs) %>%
distinct(across(-SurgeryID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Systemic Therapy ----------------------------------------------------------
# Get vector of SystemicTherapyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleSystemicTherapyIDs <- df_SystemicTherapy %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(SystemicTherapyID)
# Filter out...
df_SystemicTherapy <- df_SystemicTherapy %>%
filter(SystemicTherapyID %in% vc_EligibleSystemicTherapyIDs) %>%
distinct(across(-SystemicTherapyID), .keep_all = TRUE)
try(ProgressBar$tick())
try(ProgressBar$terminate())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 3)  Data Harmonization / Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   A) Definition of features to monitor during Transformation
#   B) Value transformation
#        - Harmonization and correction
#        - Recoding
#        - Formatting
#   C) Finalize transformation of data
#        - Removing of ineligible values
#        - Optional conversion to factor
#-------------------------------------------------------------------------------
# Set up progress bar
CountProgressItems <- 29
ProgressBar <- progress_bar$new(format = "Harmonizing data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Module 3 A)  Definition of features to monitor during Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Object syntax: List of vectors
#     - Vector names = Name of feature to be monitored during Curation (Transformation)
#     - Vector values = Set of eligible values defined in Meta Data
# If a feature should be monitored but has no specific set of eligible values, set it NULL
#-------------------------------------------------------------------------------
ls_MonitorFeatures_BioSampling <- list(SampleType = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "BioSampling" & Feature == "SampleType")$Value_Curated,
SampleAliquot = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "BioSampling" & Feature == "SampleAliquot")$Value_Curated)
ls_MonitorFeatures_Diagnosis <- list(ICD10Version = NULL,
LocalizationSide = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Diagnosis" & Feature == "LocalizationSide")$Value_Curated)
ls_MonitorFeatures_Histology <- list(Grading = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Histology" & Feature == "Grading")$Value_Curated)
ls_MonitorFeatures_Metastasis <- list(MetastasisLocalization = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Metastasis" & Feature == "MetastasisLocalization")$Value_Curated)
ls_MonitorFeatures_MolecularDiagnostics <- list()
ls_MonitorFeatures_Patient <- list(Gender = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "Gender")$Value_Curated,
LastVitalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "LastVitalStatus")$Value_Curated)
ls_MonitorFeatures_Progress <- list(GlobalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "GlobalStatus")$Value_Curated,
LocalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LocalStatus")$Value_Curated,
LymphnodalStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LymphnodalStatus")$Value_Curated,
MetastasisStatus = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "MetastasisStatus")$Value_Curated)
ls_MonitorFeatures_RadiationTherapy <- list(RadiationTherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyRelationToSurgery")$Value_Curated,
RadiationTherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyIntention")$Value_Curated)
ls_MonitorFeatures_Staging <- list(UICCStage = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "UICCStage")$Value_Curated,
TNM_T = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T")$Value_Curated,
TNM_N = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N")$Value_Curated,
TNM_M = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M")$Value_Curated,
TNM_T_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T_Prefix")$Value_Curated,
TNM_N_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N_Prefix")$Value_Curated,
TNM_M_Prefix = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M_Prefix")$Value_Curated,
TNM_ySymbol = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_ySymbol")$Value_Curated,
TNM_rSymbol = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_rSymbol")$Value_Curated,
TNM_mSymbol = NULL)
ls_MonitorFeatures_Surgery <- list(SurgeryIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "SurgeryIntention")$Value_Curated,
ResidualAssessmentLocal = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentLocal")$Value_Curated,
ResidualAssessmentTotal = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentTotal")$Value_Curated)
ls_MonitorFeatures_SystemicTherapy <- list(IsChemotherapy = NULL,
IsImmunotherapy = NULL,
IsHormoneTherapy = NULL,
IsBoneMarrowTransplant = NULL,
SystemicTherapyIntention = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyIntention")$Value_Curated,
SystemicTherapyRelationToSurgery = dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyRelationToSurgery")$Value_Curated)
# Put all objects in one list object to make them passable to functions (alphabetic order)
# Names must be in same order as in ls_DataSet
ls_MonitorFeatures_All <- list(BioSampling = ls_MonitorFeatures_BioSampling,
Diagnosis = ls_MonitorFeatures_Diagnosis,
Histology = ls_MonitorFeatures_Histology,
Metastasis = ls_MonitorFeatures_Metastasis,
MolecularDiagnostics = ls_MonitorFeatures_MolecularDiagnostics,
Patient = ls_MonitorFeatures_Patient,
Progress = ls_MonitorFeatures_Progress,
RadiationTherapy = ls_MonitorFeatures_RadiationTherapy,
Staging = ls_MonitorFeatures_Staging,
Surgery = ls_MonitorFeatures_Surgery,
SystemicTherapy = ls_MonitorFeatures_SystemicTherapy)
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track feature values of raw data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Re-pack data frames into list in order to pass them to map-function
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Names have to be exactly the same (and the same order) as in ls_MonitorFeatures_all
#-------------------------------------------------------------------------------
ls_DataSet <- list(BioSampling = df_BioSampling,
Diagnosis = df_Diagnosis,
Histology = df_Histology,
Metastasis = df_Metastasis,
MolecularDiagnostics = df_MolecularDiagnostics,
Patient = df_Patient,
Progress = df_Progress,
RadiationTherapy = df_RadiationTherapy,
Staging = df_Staging,
Surgery = df_Surgery,
SystemicTherapy = df_SystemicTherapy)
#--- Update PB ---
try(ProgressBar$tick())
# Check if object names in ls_DataSet and ls_MonitorFeatures_All are identical to avoid incorrect mapping
if (all(names(ls_DataSet) == names(ls_MonitorFeatures_All)))
{
ls_Monitors_Raw <- purrr::map2(.x = ls_DataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Raw")
})
} else {
stop("Internal error: Object names in ls_DataSet and ls_MonitorFeatures_All must be identical and in the same order.")
}
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Module 3 B)  Value transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Order of operations in each raw data frame:
#     1) Harmonizing and correctional transformation of data values using dsCCPhos::TransformData()
#           - General rules using regular expressions and functions defined in rule set
#           - Direct value transformation using hash tables defined in rule set
#     2) Recoding data using dsCCPhos::RecodeData()
#           - dsCCPhos::RecodeData() uses a dictionary in the form of a named vector to perform recoding on a target vector
#     3) Data formatting instructions
#-------------------------------------------------------------------------------
# For testing purposes
DataFrame <- df_Staging
TableName <- "Staging"
RuleSet <- dsCCPhos::RuleSet_RawDataTransformation
RuleProfile <- "Default"
# Compile general transformation rules with dsCCPhos::CompileTransformationRules
TransformationRules <- CompileTransformationRules(TableName,
RuleSet,
RuleProfile)
# Compile hash tables for direct value transformation
HashTables <- CompileHashTables(TableName,
RuleSet,
RuleProfile)
HashTables
df_Output <- DataFrame
if (!is.na(TransformationRules))
{
df_Output <- df_Output %>%
eval(expr = parse(text = paste0("mutate(., ", TransformationRules, ")")))
}
View(df_Output)
HashTables[[3]]
i <- 3
Feature <- names(HashTables)[i]
Feature
HashTable <- HashTables[[Feature]]
HashTable
df_Output <- df_Output %>%
mutate(!!Feature := case_when(!!sym(Feature) %in% names(HashTable) ~ HashTable[!!sym(Feature)]))
View(df_Output)
df_Output <- DataFrame
HashTable["yp"]
HashTable["p"]
as.character(HashTable["yp"])
i <- 3
Feature <- names(HashTables)[i]
HashTable <- HashTables[[Feature]]
df_Output <- df_Output %>%
mutate(!!Feature := case_when(!!Feature %in% names(HashTable) ~ as.character(HashTable[!!Feature])))
df_Output <- DataFrame
View(df_Output)
df_Output <- df_Output %>%
mutate({{ Feature }} := case_when({{ Feature }} %in% names(HashTable) ~ as.character(HashTable[{{ Feature }}])))
?dplyr::cur_column
Features <- names(HashTables)
# Compile general transformation rules with dsCCPhos::CompileTransformationRules
TransformationRules <- CompileTransformationRules(TableName,
RuleSet,
RuleProfile)
TransformationRules
