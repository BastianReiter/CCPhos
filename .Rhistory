"0IS" = "0is")),
UICCStage = str_replace_all(UICCStage, "\\|", "I"),      # Replace vertical bar symbol with Roman "One"
UICCStage = dsCCPhos::Recode(UICCStage, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_T = str_to_lower(TNM_T),      # Convert all upper to lower letters
TNM_T = str_remove_all(TNM_T, " "),
TNM_T = str_replace_all(TNM_T, c("is\\(dcis\\)" = "is(DCIS)",      # For specific values, (re)turn lower to upper letters
"is\\(lcis\\)" = "is(LCIS)",
"t1mi" = "T1mi",
"x" = "X")),
TNM_T = str_replace_all(TNM_T, c("1\\(sm\\)" = "1b",
"1\\(sm1\\)" = "1b",
"1\\(sm2\\)" = "1b",
"1\\(sm3\\)" = "1b",
"1\\(sn3\\)" = "1b")),      # In esophageal cancer, T1b tumors can be subdivided depending on area of affected submucosa. This operation eliminates this subdivision.
TNM_T = dsCCPhos::Recode(TNM_T, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_N = str_to_lower(TNM_N),
TNM_N = str_remove_all(TNM_N, " "),
TNM_N = str_replace_all(TNM_N, c("x" = "X",
"x\\(sn\\)" = "X(sn)",
"0sn" = "0(sn)")),
TNM_N = dsCCPhos::Recode(TNM_N, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_M = str_to_lower(TNM_M),      # Convert all upper to lower letters
TNM_M = str_remove_all(TNM_M, " "),
TNM_M = str_replace_all(TNM_M, c("x" = "X")),
TNM_M = dsCCPhos::Recode(TNM_M, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_ySymbol = str_to_lower(TNM_ySymbol),
TNM_ySymbol = str_remove_all(TNM_ySymbol, " "),
TNM_ySymbol = ifelse(TNM_ySymbol != "y" & (str_starts(TNM_T_Prefix, "y") | str_starts(TNM_N_Prefix, "y") | str_starts(TNM_M_Prefix, "y")), "y", TNM_ySymbol),
#--------------------------------------------------
TNM_rSymbol = str_to_lower(TNM_rSymbol),
TNM_rSymbol = str_remove_all(TNM_rSymbol, " "),
TNM_rSymbol = ifelse(TNM_rSymbol != "r" & (str_starts(TNM_T_Prefix, "r") | str_starts(TNM_N_Prefix, "r") | str_starts(TNM_M_Prefix, "r")), "r", TNM_ySymbol),
#--------------------------------------------------
TNM_T_Prefix = str_to_lower(TNM_T_Prefix),
TNM_T_Prefix = str_remove_all(TNM_T_Prefix, " "),
TNM_T_Prefix = str_replace_all(TNM_T_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_T_Prefix = dsCCPhos::Recode(TNM_T_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix"),
set_names(Value_Curated, Value_Raw))),
#--------------------------------------------------
TNM_N_Prefix = str_to_lower(TNM_N_Prefix),
TNM_N_Prefix = str_remove_all(TNM_N_Prefix, " "),
TNM_N_Prefix = str_replace_all(TNM_N_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_N_Prefix = dsCCPhos::Recode(TNM_N_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
TNM_M_Prefix = str_to_lower(TNM_M_Prefix),
TNM_M_Prefix = str_remove_all(TNM_M_Prefix, " "),
TNM_M_Prefix = str_replace_all(TNM_M_Prefix, c("yc" = "c",
"yu" = "u",
"yp" = "p")),
TNM_M_Prefix = dsCCPhos::Recode(TNM_M_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDS_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Surgery <- df_CDS_Surgery %>%
mutate(SurgeryID = as.integer(str_extract(SurgeryID, "\\d+")),      # Extract integer number from string in SurgeryID. Serves as surrogate for chronological order of events.
#----------------------------------------------------
SurgeryIntention = dsCCPhos::Recode(SurgeryIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
ResidualAssessmentLocal = dsCCPhos::Recode(ResidualAssessmentLocal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------------------
ResidualAssessmentTotal = dsCCPhos::Recode(ResidualAssessmentTotal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal"),
set_names(Value_Curated, Value_Raw))))
# Transform df_CDS_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_SystemicTherapy <- df_CDS_SystemicTherapy %>%
mutate(IsChemotherapy = as.logical(IsChemotherapy),
IsImmunotherapy = as.logical(IsImmunotherapy),
IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
#------------------------------------------
SystemicTherapyIntention = dsCCPhos::Recode(SystemicTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------
SystemicTherapyRelationToSurgery = dsCCPhos::Recode(SystemicTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
#------------------------------------------
SystemicTherapyStart = as_date(SystemicTherapyStart, format = "%d.%m.%Y"),
SystemicTherapyEnd = as_date(SystemicTherapyEnd, format = "%d.%m.%Y"))
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataSet <- list(BioSampling = df_CDS_BioSampling,
Diagnosis = df_CDS_Diagnosis,
Histology = df_CDS_Histology,
Metastasis = df_CDS_Metastasis,
MolecularDiagnostics = df_CDS_MolecularDiagnostics,
Patient = df_CDS_Patient,
Progress = df_CDS_Progress,
RadiationTherapy = df_CDS_RadiationTherapy,
Staging = df_CDS_Staging,
Surgery = df_CDS_Surgery,
SystemicTherapy = df_CDS_SystemicTherapy)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track feature values after Transformation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Transformed <- map2(.x = ls_CuratedDataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Transformed")
})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Finalize curation of data: Ineligible data (includes data that could not be curated) is turned into NA using factor conversion or other methods
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Finalize df_CDS_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_BioSampling <- df_CDS_BioSampling %>%
mutate(SampleType = factor(SampleType,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleType")$Label_Curated),      # Convert to factor to mark ineligible values as NA and establish level order where appropriate
SampleAliquot = factor(SampleAliquot,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "BioSampling" & FeatureName == "SampleAliquot")$Value_Curated))
# Finalize df_CDS_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Diagnosis <- df_CDS_Diagnosis %>%
mutate(LocalizationSide = factor(LocalizationSide,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Diagnosis" & FeatureName == "LocalizationSide")$Label_Curated))
# Finalize df_CDS_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Histology <- df_CDS_Histology %>%
mutate(Grading = factor(Grading,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Histology" & FeatureName == "Grading")$Label_Curated))
# Finalize df_CDS_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Patient <- df_CDS_Patient %>%
mutate(Gender = factor(Gender,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "Gender")$Label_Curated),
LastVitalStatus = factor(LastVitalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Patient" & FeatureName == "LastVitalStatus")$Value_Curated))
# Finalize df_CDS_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Progress <- df_CDS_Progress %>%
mutate(GlobalStatus = factor(GlobalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "GlobalStatus")$Label_Curated),
LocalStatus = factor(LocalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LocalStatus")$Label_Curated),
LymphnodalStatus = factor(LymphnodalStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "LymphnodalStatus")$Label_Curated),
MetastasisStatus = factor(MetastasisStatus,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "MetastasisStatus")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Progress" & FeatureName == "MetastasisStatus")$Label_Curated))
# Finalize df_CDS_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_RadiationTherapy <- df_CDS_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = factor(RadiationTherapyRelationToSurgery,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyRelationToSurgery")$Label_Curated),
RadiationTherapyIntention = factor(RadiationTherapyIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "RadiationTherapy" & FeatureName == "RadiationTherapyIntention")$Label_Curated))
# Finalize df_CDS_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Staging <- df_CDS_Staging %>%
mutate(UICCStage = factor(UICCStage,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "UICCStage")$Value_Curated),
TNM_T = factor(TNM_T,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T")$Value_Curated),
TNM_N = factor(TNM_N,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N")$Value_Curated),
TNM_M = factor(TNM_M,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M")$Value_Curated),
TNM_T_Prefix = factor(TNM_T_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_T_Prefix")$Value_Curated),
TNM_N_Prefix = factor(TNM_N_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_N_Prefix")$Value_Curated),
TNM_M_Prefix = factor(TNM_M_Prefix,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_M_Prefix")$Value_Curated),
TNM_ySymbol = factor(TNM_ySymbol,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_ySymbol")$Value_Curated),
TNM_rSymbol = factor(TNM_rSymbol,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Staging" & FeatureName == "TNM_rSymbol")$Value_Curated))
# Finalize df_CDS_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_Surgery <- df_CDS_Surgery %>%
mutate(SurgeryIntention = factor(SurgeryIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "SurgeryIntention")$Label_Curated),
ResidualAssessmentLocal = factor(ResidualAssessmentLocal,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentLocal")$Value_Curated),
ResidualAssessmentTotal = factor(ResidualAssessmentTotal,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "Surgery" & FeatureName == "ResidualAssessmentTotal")$Value_Curated))
# Finalize df_CDS_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_SystemicTherapy <- df_CDS_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = factor(SystemicTherapyRelationToSurgery,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyRelationToSurgery")$Label_Curated),
SystemicTherapyIntention = factor(SystemicTherapyIntention,
levels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention")$Value_Curated,
labels = dplyr::filter(dsCCPhos::Meta_ValueSets, TableName_Curated == "SystemicTherapy" & FeatureName == "SystemicTherapyIntention")$Label_Curated))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Track Feature Values after Finalized Harmonization
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_Monitors_Final <- map2(.x = ls_CuratedDataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Final")
})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Merge Monitor Objects into Coherent Summaries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
{
if (nrow(ls_Monitors_Raw[[i]]) > 0)
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
dplyr::full_join(ls_Monitors_Transformed[[i]], by = join_by(Feature, Value, IsValueEligible, CurationStage, Frequency)) %>%
dplyr::full_join(ls_Monitors_Final[[i]], by = join_by(Feature, Value, IsValueEligible, CurationStage, Frequency)) %>%
tidyr::pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
dplyr::group_by(Feature, Value, IsValueEligible) %>%
dplyr::summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
dplyr::arrange(Feature, desc(IsValueEligible))
}
else
{
df_CurrentSummary <- NULL
}
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
# Name the monitor summary objects
names(ls_MonitorSummaries) <- c("Monitor_BioSampling",
"Monitor_Diagnosis",
"Monitor_Histology",
"Monitor_Metastasis",
"Monitor_MolecularDiagnostics",
"Monitor_Patient",
"Monitor_Progress",
"Monitor_RadiationTherapy",
"Monitor_Staging",
"Monitor_Surgery",
"Monitor_SystemicTherapy")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ADDITIONAL TRANSFORMATIONS (Identification and correction of inconsistencies)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# df_CDS_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Clear redundant patient entries
#-------------------------------------------------------------------------------
df_Aux_Patient <- df_CDS_Patient %>%
group_by(PatientID) %>%
mutate(CountDifferentCombinations = n()) %>%
filter(CountDifferentCombinations > 1)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteTotal",
url = "Server_SiteTotal",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available tables in Sites
datashield.tables(CCPConnections)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
# Assign Raw Data Set (RDS) object
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawDataSet",
datasources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
DSI::datashield.logout(CCPConnections)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
#load("./Development/Data/RealData/CCPTestData_Total.RData")
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available dataSHIELD methods on servers
DSI::datashield.methods(conns = CCPConnections)
devtools::load_all(".")
DSI::datashield.logout(CCPConnections)
library(dsCCPhos)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
#load("./Development/Data/RealData/CCPTestData_Total.RData")
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available dataSHIELD methods on servers
DSI::datashield.methods(conns = CCPConnections)
# Alternatively use DSI::datashield.method_status() to get more comparable overview
# AGGREGATE functions
DSI::datashield.method_status(conns = CCPConnections,
type = "aggregate")
# ASSIGN functions
DSI::datashield.method_status(conns = CCPConnections,
type = "assign")
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
# Get overview of accessible tables on servers
DSI::datashield.tables(conns = CCPConnections)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhos::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhos::Meta_TableNames$TableName_Curated
# Check if all tables are accessible on all servers
ls_TableCheck <- purrr::map(as.list(CCPTableNames_Curated),
function(tbl)
{
datashield.table_status(conns = CCPConnections,
table = paste0(ProjectName, tbl))
})
# Check if all tables are accessible on all servers
ls_TableCheck <- purrr::map(as.list(CCPTableNames_Curated),
function(tbl)
{
datashield.table_status(conns = CCPConnections,
table = tbl)
})
# Turn list into data.frame
df_TableCheck <- do.call(rbind, ls_TableCheck)
View(df_TableCheck)
for(i in 1:length(CCPTableNames_Curated))
{
datashield.assign(conns = CCPConnections,
symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i])
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Make sure assignment was successful on all servers
ds.GetObjectInfo(ObjectName = "RawDataSet",
DataSources = CCPConnections)
# Test with ds.mean()
Test <- ds.mean(x = "Metastasis$datum_fernmetastasen",
type = "both",
datasources = CCPConnections)
Test
# Get validation report of Raw Data Set (RDS)
ValidationReportRDS <- ds.GetValidationReport_RawData(Name_RawDataSet = "RawDataSet",
DataSources = CCPConnections)
ValidationReportRDS
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- ds.GetCurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Monitor_Staging)
# Augment data (based on curated data)
dsCCPhosClient::ds.AugmentData(Name_CurationOutput = "CurationOutput",
Name_Output = "AugmentationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
library(dsCCPhos)
