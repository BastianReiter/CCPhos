# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
library(devtools)
use_package("cli")
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 10000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
require(dplyr)
require(dsCCPhos)
require(lubridate)
require(progress)
require(purrr)
require(stats)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate Messaging objects
Messages <- list()
Messages$DataTransformation <- character()
Messages$DiagnosisClassification <- character()
Messages$Completion <- character()
# For testing purposes
RuleSet_RawDataTransformation.S <- dsCCPhos::RuleSet_RawDataTransformation
RuleProfile_RawDataTransformation.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 1)  Transformation of table and feature names
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Setting up 'ls_DataSet' as object that holds all data throughout the function. It will be un- and repacked a couple of times during processing.
ls_DataSet <- RawDataSet
# Rename tables (Remove the 'RDS_'-prefix)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { str_remove(TableName, "RDS_") })
# Rename features
#~~~~~~~~~~~~~~~~
# Looping through tables to rename features
ls_DataSet <- purrr::map(.x = names(ls_DataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(ls_DataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
}) %>%
setNames(names(ls_DataSet))      # List member names are preserved using setNames()
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_BioSampling <- ls_DataSet$BioSampling
df_Diagnosis <- ls_DataSet$Diagnosis
df_Histology <- ls_DataSet$Histology
df_Metastasis <- ls_DataSet$Metastasis
df_MolecularDiagnostics <- ls_DataSet$MolecularDiagnostics
df_Patient <- ls_DataSet$Patient
df_Progress <- ls_DataSet$Progress
df_RadiationTherapy <- ls_DataSet$RadiationTherapy
df_Staging <- ls_DataSet$Staging
df_Surgery <- ls_DataSet$Surgery
df_SystemicTherapy <- ls_DataSet$SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 2)  Primary table cleaning
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Remove entries that are not linked to related tables
#   - Remove duplicate entries
#-------------------------------------------------------------------------------
# Set up progress bar
CountProgressItems <- 12
ProgressBar <- progress_bar$new(format = "Cleaning table entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
# For monitoring
CountEntriesBeforeCleaning <- c(BioSampling = nrow(df_BioSampling),
Diagnosis = nrow(df_Diagnosis),
Histology = nrow(df_Histology),
Metastasis = nrow(df_Metastasis),
MolecularDiagnostics = nrow(df_MolecularDiagnostics),
Patient = nrow(df_Patient),
Progress = nrow(df_Progress),
RadiationTherapy = nrow(df_RadiationTherapy),
Staging = nrow(df_Staging),
Surgery = nrow(df_Surgery),
SystemicTherapy = nrow(df_SystemicTherapy))
CountEntriesBeforeCleaning
#--- Patient -------------------------------------------------------------------
# Get vector of PatientIDs that are linked with one or more DiagnosisIDs
vc_EligiblePatientIDs <- df_Patient %>%
left_join(df_Diagnosis, by = join_by(PatientID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(PatientID)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 10000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Use require() to load package namespaces
require(dplyr)
require(dsCCPhos)
require(lubridate)
require(progress)
require(purrr)
require(stats)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate Messaging objects
Messages <- list()
Messages$DataTransformation <- character()
Messages$DiagnosisClassification <- character()
Messages$Completion <- character()
# For testing purposes
RuleSet_RawDataTransformation.S <- dsCCPhos::RuleSet_RawDataTransformation
RuleProfile_RawDataTransformation.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 1)  Transformation of table and feature names
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Setting up 'ls_DataSet' as object that holds all data throughout the function. It will be un- and repacked a couple of times during processing.
ls_DataSet <- RawDataSet
# Rename tables (Remove the 'RDS_'-prefix)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { str_remove(TableName, "RDS_") })
# Rename features
#~~~~~~~~~~~~~~~~
# Looping through tables to rename features
ls_DataSet <- purrr::map(.x = names(ls_DataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(ls_DataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
}) %>%
setNames(names(ls_DataSet))      # List member names are preserved using setNames()
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_BioSampling <- ls_DataSet$BioSampling
df_Diagnosis <- ls_DataSet$Diagnosis
df_Histology <- ls_DataSet$Histology
df_Metastasis <- ls_DataSet$Metastasis
df_MolecularDiagnostics <- ls_DataSet$MolecularDiagnostics
df_Patient <- ls_DataSet$Patient
df_Progress <- ls_DataSet$Progress
df_RadiationTherapy <- ls_DataSet$RadiationTherapy
df_Staging <- ls_DataSet$Staging
df_Surgery <- ls_DataSet$Surgery
df_SystemicTherapy <- ls_DataSet$SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 2)  Primary table cleaning
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Remove entries that are not linked to related tables
#   - Remove duplicate entries
#-------------------------------------------------------------------------------
# Set up progress bar
CountProgressItems <- 12
ProgressBar <- progress_bar$new(format = "Cleaning table entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
# For monitoring
CountEntriesBeforeCleaning <- c(BioSampling = nrow(df_BioSampling),
Diagnosis = nrow(df_Diagnosis),
Histology = nrow(df_Histology),
Metastasis = nrow(df_Metastasis),
MolecularDiagnostics = nrow(df_MolecularDiagnostics),
Patient = nrow(df_Patient),
Progress = nrow(df_Progress),
RadiationTherapy = nrow(df_RadiationTherapy),
Staging = nrow(df_Staging),
Surgery = nrow(df_Surgery),
SystemicTherapy = nrow(df_SystemicTherapy))
#--- Patient -------------------------------------------------------------------
# Get vector of PatientIDs that are linked with one or more DiagnosisIDs
vc_EligiblePatientIDs <- df_Patient %>%
left_join(df_Diagnosis, by = join_by(PatientID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(PatientID)
# Filter out patient entries with no related diagnosis data and keep only distinct rows (removal of duplicates)
df_Patient <- df_Patient %>%
filter(PatientID %in% vc_EligiblePatientIDs) %>%
distinct()
try(ProgressBar$tick())
#--- Diagnosis -----------------------------------------------------------------
# Get vector of DiagnosisIDs that are linked with a PatientID
vc_EligibleDiagnosisIDs <- df_Diagnosis %>%
left_join(df_Patient, by = join_by(PatientID)) %>%
filter(!is.na(PatientID)) %>%
pull(DiagnosisID)
# Filter out diagnosis entries with no related patient data and keep only distinct rows (removal of duplicates)
df_Diagnosis <- df_Diagnosis %>%
filter(DiagnosisID %in% vc_EligibleDiagnosisIDs) %>%
distinct(across(-DiagnosisID), .keep_all = TRUE)      # Keep only rows that are distinct (everywhere but DiagnosisID)
try(ProgressBar$tick())
#--- Histology -----------------------------------------------------------------
# Get vector of HistologyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleHistologyIDs <- df_Histology %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(HistologyID)
# Filter out histology entries with no related diagnosis data and keep only distinct rows (removal of duplicates)
df_Histology <- df_Histology %>%
filter(HistologyID %in% vc_EligibleHistologyIDs) %>%
distinct(across(-HistologyID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- BioSampling ---------------------------------------------------------------
# Get vector of SampleIDs that are linked with a PatientID
vc_EligibleSampleIDs <- df_BioSampling %>%
left_join(df_Patient, by = join_by(PatientID)) %>%
filter(!is.na(PatientID)) %>%
pull(SampleID)
# Filter out...
df_BioSampling <- df_BioSampling %>%
filter(SampleID %in% vc_EligibleSampleIDs) %>%
distinct()
try(ProgressBar$tick())
#--- Metastasis ----------------------------------------------------------------
# Get vector of MetastasisIDs that are linked with a PatientID / DiagnosisID
vc_EligibleMetastasisIDs <- df_Metastasis %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(MetastasisID)
# Filter out...
df_Metastasis <- df_Metastasis %>%
filter(MetastasisID %in% vc_EligibleMetastasisIDs) %>%
distinct(across(-MetastasisID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- MolecularDiagnostics ------------------------------------------------------
# Get vector of MolecularDiagnosticsIDs that are linked with a PatientID / DiagnosisID
vc_EligibleMolecularDiagnosticsIDs <- df_MolecularDiagnostics %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(MolecularDiagnosticsID)
# Filter out...
df_MolecularDiagnostics <- df_MolecularDiagnostics %>%
filter(MolecularDiagnosticsID %in% vc_EligibleMolecularDiagnosticsIDs) %>%
distinct(across(-MolecularDiagnosticsID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Progress ------------------------------------------------------------------
# Get vector of ProgressIDs that are linked with a PatientID / DiagnosisID
vc_EligibleProgressIDs <- df_Progress %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(ProgressID)
# Filter out...
df_Progress <- df_Progress %>%
filter(ProgressID %in% vc_EligibleProgressIDs) %>%
distinct(across(-ProgressID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- RadiationTherapy ----------------------------------------------------------
# Get vector of RadiationTherapyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleRadiationTherapyIDs <- df_RadiationTherapy %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(RadiationTherapyID)
# Filter out...
df_RadiationTherapy <- df_RadiationTherapy %>%
filter(RadiationTherapyID %in% vc_EligibleRadiationTherapyIDs) %>%
distinct(across(-RadiationTherapyID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Staging -------------------------------------------------------------------
# Get vector of StagingIDs that are linked with a PatientID / DiagnosisID
vc_EligibleStagingIDs <- df_Staging %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(StagingID)
# Filter out...
df_Staging <- df_Staging %>%
filter(StagingID %in% vc_EligibleStagingIDs) %>%
distinct(across(-StagingID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Surgery -------------------------------------------------------------------
# Get vector of SurgeryIDs that are linked with a PatientID / DiagnosisID
vc_EligibleSurgeryIDs <- df_Surgery %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(SurgeryID)
# Filter out...
df_Surgery <- df_Surgery %>%
filter(SurgeryID %in% vc_EligibleSurgeryIDs) %>%
distinct(across(-SurgeryID), .keep_all = TRUE)
try(ProgressBar$tick())
#--- Systemic Therapy ----------------------------------------------------------
# Get vector of SystemicTherapyIDs that are linked with a PatientID / DiagnosisID
vc_EligibleSystemicTherapyIDs <- df_SystemicTherapy %>%
left_join(df_Diagnosis, by = join_by(PatientID, DiagnosisID)) %>%
filter(!is.na(DiagnosisID)) %>%
pull(SystemicTherapyID)
# Filter out...
df_SystemicTherapy <- df_SystemicTherapy %>%
filter(SystemicTherapyID %in% vc_EligibleSystemicTherapyIDs) %>%
distinct(across(-SystemicTherapyID), .keep_all = TRUE)
CountEntriesAfterCleaning <- c(BioSampling = nrow(df_BioSampling),
Diagnosis = nrow(df_Diagnosis),
Histology = nrow(df_Histology),
Metastasis = nrow(df_Metastasis),
MolecularDiagnostics = nrow(df_MolecularDiagnostics),
Patient = nrow(df_Patient),
Progress = nrow(df_Progress),
RadiationTherapy = nrow(df_RadiationTherapy),
Staging = nrow(df_Staging),
Surgery = nrow(df_Surgery),
SystemicTherapy = nrow(df_SystemicTherapy))
CountUnlinkedEntries <- CountEntriesAfterCleaning - CountEntriesBeforeCleaning
CountUnlinkedEntries <- CountEntriesBeforeCleaning - CountEntriesAfterCleaning
CountUnlinkedEntries
Test <- readr::format_delim(dsCCPhos::RuleSet_RawDataTransformation)
Test <- readr::format_csv(dsCCPhos::RuleSet_RawDataTransformation)
Test
Test <- readr::format_csv2(dsCCPhos::RuleSet_RawDataTransformation)
Test
Test2 <- readr::read_csv2(Test)
Test2
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 10000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataTransformation.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
CountUnlinkedEntries[3]
paste0(CountUnlinkedEntries[3])
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataTransformation.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(CurationOutput$CurationReport$UnlinkedEntries)
devtools::load_all(".")
library(dsCCPhos)
library(dsCCPhos)
?DSI::dsIsCompleted
?setNames
Test <- c(a = "A", b = "B", c = "C")
Test
devtools::load_all(".")
library(dsCCPhos)
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 10000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataTransformation.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Sub-sample test data for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataTransformation.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
CDS_Diagnosis <- CurationOutput$CuratedDataSet$Diagnosis
CDS_DiagnosisDF <- as.data.frame(CDS_Diagnosis)
View(CDS_DiagnosisDF)
str(CurationOutput)
summary(CurationOutput)
View(CurationOutput$CurationReport$UnlinkedEntries)
devtools::load_all(".")
# Augment data based on curation output
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
CuratedDataSet <- CurationOutput$CuratedDataSet
# Augment data based on curation output
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
devtools::load_all(".")
# Augment data based on curation output
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
devtools::load_all(".")
# Augment data based on curation output
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
View(AugmentationOutput$Patients)
View(AugmentationOutput$AugmentedDataSet$Patients)
library(dsCCPhos)
AugmentationOutput$AugmentationMessages
library(dsCCPhos)
library(dsCCPhos)
