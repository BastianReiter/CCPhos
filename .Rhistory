rename_with(.fn = ~ str_c(., "__Transformed"),   # Two underscores for later use in pivot_longer()
.cols = all_of(names(MonitorFeatures)))
TransformationTracks %>%
left_join(TransformedValues,
by = join_by(TrackID)) %>%
distinct(pick(contains("__Raw")), .keep_all = TRUE)
}
else { return(data.frame()) }
})
} else {
stop("Internal error: Object names in ls_TransformationTracks, ls_DataSet and ls_MonitorFeatures_All must be identical and in the same order.")
}
# Get frequencies of all distinct values in transformed data sets
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check if object names in ls_DataSet and ls_MonitorFeatures_All are identical to avoid incorrect mapping
if (all(names(ls_DataSet) == names(ls_MonitorFeatures_All)))
{
ls_ValueCounts_Transformed <- map2(.x = ls_DataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackValueCounts(Features = MonitorFeatures,
TransformationStage = "Transformed")
})
} else {
stop("Internal error: Object names in ls_DataSet and ls_MonitorFeatures_All must be identical and in the same order.")
}
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Module 3 E)  Finalize transformation of data values using dsCCPhos::FinalizeDataTransformation()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - (Optional) Exclusion of ineligible data (including data that could not be transformed)
#   - (Optional) Conversion to ordered factor
#   - (Optional) Assignment of factor labels   <-- Conversion to factor is put off for now, 02/2024
#   - All predefined information stored in dsCCPhos::Meta_ValueSets
#-------------------------------------------------------------------------------
# Finalize df_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_BioSampling <- df_BioSampling %>%
mutate(SampleType = dsCCPhos::FinalizeDataTransformation(SampleType, TableName = "BioSampling", FeatureName = "SampleType"),
SampleAliquot = dsCCPhos::FinalizeDataTransformation(SampleAliquot, TableName = "BioSampling", FeatureName = "SampleAliquot"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Diagnosis <- df_Diagnosis %>%
mutate(LocalizationSide = dsCCPhos::FinalizeDataTransformation(LocalizationSide, TableName = "Diagnosis", FeatureName = "LocalizationSide"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Histology <- df_Histology %>%
mutate(Grading = dsCCPhos::FinalizeDataTransformation(Grading, TableName = "Histology", FeatureName = "Grading"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Patient <- df_Patient %>%
mutate(Gender = dsCCPhos::FinalizeDataTransformation(Gender, TableName = "Patient", FeatureName = "Gender"),   # Assign factor labels?
LastVitalStatus = dsCCPhos::FinalizeDataTransformation(LastVitalStatus, TableName = "Patient", FeatureName = "LastVitalStatus"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Progress <- df_Progress %>%
mutate(GlobalStatus = dsCCPhos::FinalizeDataTransformation(GlobalStatus, TableName = "Progress", FeatureName = "GlobalStatus"),   # Assign factor labels?
LocalStatus = dsCCPhos::FinalizeDataTransformation(LocalStatus, TableName = "Progress", FeatureName = "LocalStatus"),   # Assign factor labels?
LymphnodalStatus = dsCCPhos::FinalizeDataTransformation(LymphnodalStatus, TableName = "Progress", FeatureName = "LymphnodalStatus"),   # Assign factor labels?
MetastasisStatus = dsCCPhos::FinalizeDataTransformation(MetastasisStatus, TableName = "Progress", FeatureName = "MetastasisStatus"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_RadiationTherapy <- df_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = dsCCPhos::FinalizeDataTransformation(RadiationTherapyRelationToSurgery, TableName = "RadiationTherapy", FeatureName = "RadiationTherapyRelationToSurgery"),   # Assign factor labels?
RadiationTherapyIntention = dsCCPhos::FinalizeDataTransformation(RadiationTherapyIntention, TableName = "RadiationTherapy", FeatureName = "RadiationTherapyIntention"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Staging <- df_Staging %>%
mutate(UICCStage = dsCCPhos::FinalizeDataTransformation(UICCStage, TableName = "Staging", FeatureName = "UICCStage"),
TNM_T = dsCCPhos::FinalizeDataTransformation(TNM_T, TableName = "Staging", FeatureName = "TNM_T"),
TNM_N = dsCCPhos::FinalizeDataTransformation(TNM_N, TableName = "Staging", FeatureName = "TNM_N"),
TNM_M = dsCCPhos::FinalizeDataTransformation(TNM_M, TableName = "Staging", FeatureName = "TNM_M"),
TNM_T_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_T_Prefix, TableName = "Staging", FeatureName = "TNM_T_Prefix"),
TNM_N_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_N_Prefix, TableName = "Staging", FeatureName = "TNM_N_Prefix"),
TNM_M_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_M_Prefix, TableName = "Staging", FeatureName = "TNM_M_Prefix"),
TNM_ySymbol = dsCCPhos::FinalizeDataTransformation(TNM_ySymbol, TableName = "Staging", FeatureName = "TNM_ySymbol"),
TNM_rSymbol = dsCCPhos::FinalizeDataTransformation(TNM_rSymbol, TableName = "Staging", FeatureName = "TNM_rSymbol"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Surgery <- df_Surgery %>%
mutate(SurgeryIntention = dsCCPhos::FinalizeDataTransformation(SurgeryIntention, TableName = "Surgery", FeatureName = "SurgeryIntention"),   # Assign factor labels?
ResidualAssessmentLocal = dsCCPhos::FinalizeDataTransformation(ResidualAssessmentLocal, TableName = "Surgery", FeatureName = "ResidualAssessmentLocal"),
ResidualAssessmentTotal = dsCCPhos::FinalizeDataTransformation(ResidualAssessmentTotal, TableName = "Surgery", FeatureName = "ResidualAssessmentTotal"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_SystemicTherapy <- df_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = dsCCPhos::FinalizeDataTransformation(SystemicTherapyRelationToSurgery, TableName = "SystemicTherapy", FeatureName = "SystemicTherapyRelationToSurgery"),   # Assign factor labels?
SystemicTherapyIntention = dsCCPhos::FinalizeDataTransformation(SystemicTherapyIntention, TableName = "SystemicTherapy", FeatureName = "SystemicTherapyIntention"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Module 3 F)  Track Feature Values after Finalized Harmonization
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Re-pack data frames into list in order to pass them to map-function
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Names have to be exactly the same (and the same order) as in ls_MonitorFeatures_all
#-------------------------------------------------------------------------------
ls_CuratedDataSet <- list(BioSampling = df_BioSampling,
Diagnosis = df_Diagnosis,
Histology = df_Histology,
Metastasis = df_Metastasis,
MolecularDiagnostics = df_MolecularDiagnostics,
Patient = df_Patient,
Progress = df_Progress,
RadiationTherapy = df_RadiationTherapy,
Staging = df_Staging,
Surgery = df_Surgery,
SystemicTherapy = df_SystemicTherapy)
#--- Update PB ---
try(ProgressBar$tick())
# Map raw values to their finalized state to get transformation tracks
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check if object names in ls_TransformationTracks, ls_DataSet and ls_MonitorFeatures_All are identical to avoid incorrect mapping
if (all(names(ls_TransformationTracks) == names(ls_DataSet)) & all(names(ls_DataSet) == names(ls_MonitorFeatures_All)))
{
ls_TransformationTracks <- purrr::pmap(.l = list(ls_TransformationTracks,
ls_DataSet,
ls_MonitorFeatures_All),
.f = function(TransformationTrack, FinalizedDataFrame, MonitorFeatures)
{
if (purrr::is_empty(MonitorFeatures) == FALSE)
{
FinalizedValues <- FinalizedDataFrame %>%
select(c("TrackID", names(MonitorFeatures))) %>%
rename_with(.fn = ~ str_c(., "__Final"),   # Two underscores for later use in pivot_longer()
.cols = all_of(names(MonitorFeatures)))
TransformationTrack %>%
left_join(FinalizedValues,
by = join_by(TrackID)) %>%
distinct(pick(contains("__Raw")), .keep_all = TRUE)
}
else { return(data.frame()) }
})
} else {
stop("Internal error: Object names in ls_TransformationTracks, ls_DataSet and ls_MonitorFeatures_All must be identical and in the same order.")
}
# Get frequencies of all distinct values in finalized data sets
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check if object names in ls_DataSet and ls_MonitorFeatures_All are identical to avoid incorrect mapping
if (all(names(ls_DataSet) == names(ls_MonitorFeatures_All)))
{
ls_ValueCounts_Final <- map2(.x = ls_DataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackValueCounts(Features = MonitorFeatures,
TransformationStage = "Final")
})
} else {
stop("Internal error: Object names in ls_DataSet and ls_MonitorFeatures_All must be identical and in the same order.")
}
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Module 3 G)  Merge monitor objects into coherent summaries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_TransformationTracks_Summaries <- purrr::pmap(.l = list(ls_TransformationTracks,
ls_MonitorFeatures_All),
.f = function(TrackData,
FeatureInfo)
{
if (purrr::is_empty(TrackData) == FALSE)
{
TrackData %>%
mutate(across(everything(), ~ as.character(.x))) %>%      # Turn all columns into character (necessary for pivot_longer())
tidyr::pivot_longer(cols = c(everything(), -TrackID),
names_to = c("Feature", "Stage"),
names_sep = "(__)",      # Separate by two underscores
values_to = "Value") %>%
distinct(pick(c(everything(), -TrackID)), .keep_all = TRUE) %>%
tidyr::pivot_wider(names_from = Stage,
values_from = Value) %>%
select(-TrackID) %>%
rename(Value = Raw,
Value_Transformed = Transformed,
Value_Final = Final) %>%
rowwise() %>%
mutate(IsEligible_Raw = Value %in% FeatureInfo[[Feature]],
IsEligible_Transformed = Value_Transformed %in% FeatureInfo[[Feature]]) %>%
ungroup() %>%
arrange(Feature)
}
else { return (data.frame()) }
})
ls_ValueCounts_Summaries <- purrr::pmap(.l = list(ls_ValueCounts_Raw,
ls_ValueCounts_Transformed,
ls_ValueCounts_Final),
.f = function(ValueCounts_Raw,
ValueCounts_Transformed,
ValueCounts_Final)
{
if (nrow(ValueCounts_Raw) > 0)
{
ValueCounts_Raw %>%
dplyr::full_join(ValueCounts_Transformed, by = join_by(Feature, Value, IsValueEligible, TransformationStage, Frequency)) %>%
dplyr::full_join(ValueCounts_Final, by = join_by(Feature, Value, IsValueEligible, TransformationStage, Frequency)) %>%
tidyr::pivot_wider(names_from = TransformationStage,
values_from = Frequency) %>%
select(-IsValueEligible) %>%
group_by(Feature, Value) %>%
summarize(Count_Raw = sum(Raw, na.rm = TRUE),
Count_Transformed = sum(Transformed, na.rm = TRUE),
Count_Final = sum(Final, na.rm = TRUE)) %>%
arrange(Feature)
}
else { return(data.frame()) }
})
ls_TransformationSummaries <- purrr::pmap(.l = list(ls_TransformationTracks_Summaries,
ls_ValueCounts_Summaries),
.f = function(TransformationTracksSummary,
ValueCountsSummary)
{
if (nrow(TransformationTracksSummary))
{
TransformationTracksSummary %>%
full_join(ValueCountsSummary, by = c("Feature", "Value"))
}
else { return(NULL) }
})
try(ProgressBar$tick())
try(ProgressBar$terminate())
# Print info message
cli::cat_bullet("Data transformation monitors are stored in 'CurationReport$Transformation'", bullet = "info")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 4)  Process diagnosis data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   A) Joining of df_Diagnosis and df_Histology to get coherent diagnosis data
#   B) Classification and removal of redundant diagnosis entries
#        - Afterwards update Diagnosis IDs in related tables
#   C) Classification and bundling of associated diagnosis entries
#        - Afterwards update Diagnosis IDs in related tables
#   D) Reconstruct df_Histology from df_Diagnosis
#-------------------------------------------------------------------------------
# Module 4 A) Join df_Diagnosis and df_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Create composed ID ('DiagnosisID / HistologyID')
#   - Add auxiliary features for filtering purposes
#-------------------------------------------------------------------------------
df_Diagnosis <- df_Diagnosis %>%
left_join(df_Histology, by = join_by(PatientID, DiagnosisID)) %>%
mutate(OriginalDiagnosisID = DiagnosisID,
DiagnosisID = paste0(DiagnosisID, "/", HistologyID)) %>%
relocate(DiagnosisID, .after = PatientID) %>%
group_by(PatientID) %>%
mutate(PatientCountInitialEntries = n()) %>%
ungroup()
# Module 4 B) Classification and removal of redundant entries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - In patients with multiple diagnosis entries:
#     Use dsCCPhos-function ClassifyDiagnosisRedundancy() to identify and consolidate redundant diagnosis entries
#   - Rules for classification of redundancy are defined in customizable data object delivered with dsCCPhos
#   - Replace redundant DiagnosisIDs in all related tables
#-------------------------------------------------------------------------------
# Compile rule calls from data in RuleSet_DiagnosisRedundancy.S using dsCCPhos::CompileClassificationCall
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Names of features that are required to compile rule calls from RuleSet_DiagnosisRedundancy.S
PredictorFeatures_DiagnosisRedundancy = c("CountDeviatingValues",
"InitialDiagnosisDate",
"ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"HistologyDate",
"ICDOMorphologyCode",
"Grading")
# Pass required information to dsCCPhos::CompileClassificationCall to compile rull calls (dplyr::case_when-Statements)
Call_IsLikelyRedundant <- CompileClassificationCall(TargetFeature = "IsLikelyRedundant",
PredictorFeatures = PredictorFeatures_DiagnosisRedundancy,
RuleSet = RuleSet_DiagnosisRedundancy.S,
RuleProfile = RuleProfile_DiagnosisRedundancy.S,
ValueIfNoRuleMet = FALSE)
# Make list of rule calls to pass them to function
RuleCalls_DiagnosisRedundancy <- list(IsLikelyRedundant = Call_IsLikelyRedundant)
# Set up progress bar
CountProgressItems <- df_Diagnosis %>% filter(PatientCountInitialEntries > 1) %>% pull(PatientID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Classifying redundant diagnosis entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Filter patients with multiple diagnosis entries and apply dsCCPhos::ClassifyDiagnosisRedundancy()
df_Aux_Diagnosis_ClassifiedRedundancies <- df_Diagnosis %>%
filter(PatientCountInitialEntries > 1) %>%
group_by(PatientID) %>%
group_modify(~ ClassifyDiagnosisRedundancy(DiagnosisEntries = .x,
RuleCalls = RuleCalls_DiagnosisRedundancy,
ProgressBarObject = ProgressBar)) %>%
ungroup()
# Reassemble df_Diagnosis after processing of redundant diagnosis entries
df_Diagnosis <- df_Diagnosis %>%
filter(PatientCountInitialEntries == 1) %>%
bind_rows(df_Aux_Diagnosis_ClassifiedRedundancies) %>%
arrange(PatientID) %>%
group_by(PatientID) %>%
mutate(PatientCountDistinctEntries = n()) %>%
ungroup()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Redundant diagnosis entries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# a) Number of redundant diagnosis entries and
# b) Number of patients that had redundant diagnosis entries
CountDiagnosisRedundancies <- sum(df_Diagnosis$CountRedundancies, na.rm = TRUE)
CountPatientsWithDiagnosisRedundancies <- df_Diagnosis %>%
filter(CountRedundancies > 0) %>%
pull(PatientID) %>%
n_distinct()
# Print message for live monitoring in local tests
Message <- paste0("Found ", CountDiagnosisRedundancies, " redundancies related to ", CountPatientsWithDiagnosisRedundancies, " patient IDs.")
cli::cat_bullet(Message, bullet = "info")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Replace IDs (Original DiagnosisID and not newly composed one) of redundant diagnosis entries in related tables
# Get table of affected DiagnosisIDs
df_Aux_Diagnosis_IDMappingRedundancies <- df_Diagnosis %>%
ungroup() %>%
filter(CountRedundancies > 0) %>%
select(PatientID, RedundantOriginalIDs, OriginalDiagnosisID) %>%
unnest(cols = c(RedundantOriginalIDs)) %>%
rename(all_of(c(OldDiagnosisID = "RedundantOriginalIDs",
NewDiagnosisID = "OriginalDiagnosisID"))) %>%
filter(OldDiagnosisID != NewDiagnosisID) %>%
distinct()
# Replace IDs of redundant diagnosis entries in related tables
df_Metastasis <- df_Metastasis %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_MolecularDiagnostics <- df_MolecularDiagnostics %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Progress <- df_Progress %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_RadiationTherapy <- df_RadiationTherapy %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Staging <- df_Staging %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Surgery <- df_Surgery %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_SystemicTherapy <- df_SystemicTherapy %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
# Remove columns of redundant IDs (not needed anymore)
df_Diagnosis <-  df_Diagnosis %>%
select(-c(RedundantIDs,
RedundantOriginalIDs,
CountRedundancies))
# Module 4 C) Classify associations between diagnosis entries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - In patients with multiple distinct diagnosis entries:
#     Use dsCCPhos-function ClassifyDiagnosisAssociations() to plausibly distinguish pseudo-different from actually different diagnoses
#   - Rules for classification of associated diagnosis entries are defined in customizable data object delivered with dsCCPhos
#   - Replace DiagnosisIDs in all related tables with ReferenceDiagnosisID
#-------------------------------------------------------------------------------
# Names of features that are required to compile rule calls from RuleSet_DiagnosisAssociation.S
PredictorFeatures_DiagnosisAssociation <- c("ICD10Code",
"ICD10CodeShort",
"ICD10Group",
"ICDOTopographyCode",
"ICDOTopographyCodeShort",
"LocalizationSide",
"ICDOMorphologyCode",
"ICDOMorphologyCodeShort",
"Grading")
# Compile rule calls (unevaluated dplyr::case_when-Statements) with dsCCPhos::CompileClassificationCall
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Call_IsLikelyAssociated <- CompileClassificationCall(TargetFeature = "IsLikelyAssociated",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = FALSE)
Call_InconsistencyCheck <- CompileClassificationCall(TargetFeature = "InconsistencyCheck",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = "No apparent inconsistency")
Call_ImplausibilityCheck <- CompileClassificationCall(TargetFeature = "ImplausibilityCheck",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = "No apparent implausibility")
Call_Relation_ICD10 <- CompileClassificationCall(TargetFeature = "Relation_ICD10",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_ICDOTopography <- CompileClassificationCall(TargetFeature = "Relation_ICDOTopography",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_LocalizationSide <- CompileClassificationCall(TargetFeature = "Relation_LocalizationSide",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_ICDOMorphology <- CompileClassificationCall(TargetFeature = "Relation_ICDOMorphology",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_Grading <- CompileClassificationCall(TargetFeature = "Relation_Grading",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_IsLikelyProgression <- CompileClassificationCall(TargetFeature = "IsLikelyProgression",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA)
Call_IsLikelyRecoding <- CompileClassificationCall(TargetFeature = "IsLikelyRecoding",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA)
# Make list of rule calls to pass them to function
RuleCalls_DiagnosisAssociation <- list(IsLikelyAssociated = Call_IsLikelyAssociated,
InconsistencyCheck = Call_InconsistencyCheck,
ImplausibilityCheck = Call_ImplausibilityCheck,
Relation_ICD10 = Call_Relation_ICD10,
Relation_ICDOTopography = Call_Relation_ICDOTopography,
Relation_LocalizationSide = Call_Relation_LocalizationSide,
Relation_ICDOMorphology = Call_Relation_ICDOMorphology,
Relation_Grading = Call_Relation_Grading,
IsLikelyProgression = Call_IsLikelyProgression,
IsLikelyRecoding = Call_IsLikelyRecoding)
# Set up progress bar
CountProgressItems <- df_Diagnosis %>% filter(PatientCountDistinctEntries > 1) %>% pull(PatientID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Classifying associated diagnosis entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Filter patients with multiple distinct diagnosis entries and apply dsCCPhos::ClassifyDiagnosisAssociations()
df_Aux_Diagnosis_ClassifiedAssociations <- df_Diagnosis %>%
filter(PatientCountDistinctEntries > 1) %>%
group_by(PatientID) %>%
group_modify(~ ClassifyDiagnosisAssociation(DiagnosisEntries = .x,
RuleCalls = RuleCalls_DiagnosisAssociation,
ProgressBarObject = ProgressBar)) %>%
ungroup()
# Reassemble df_Diagnosis after processing of associated diagnosis entries
df_Diagnosis <- df_Diagnosis %>%
filter(PatientCountDistinctEntries == 1) %>%
mutate(ReferenceDiagnosisID = DiagnosisID,
IsLikelyAssociated = FALSE) %>%
bind_rows(df_Aux_Diagnosis_ClassifiedAssociations) %>%
mutate(IsReferenceEntry = (ReferenceDiagnosisID == DiagnosisID),
.after = DiagnosisID) %>%
arrange(PatientID) %>%
relocate(c(PatientID, ReferenceDiagnosisID), .before = DiagnosisID) %>%
rename(all_of(c(SubDiagnosisID = "DiagnosisID",
DiagnosisID = "ReferenceDiagnosisID")))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Associated diagnosis entries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# a) Number of associated diagnosis entries and
# b) Number of patients that have associated diagnosis entries
CountDiagnosisAssociations <- sum(df_Diagnosis$IsLikelyAssociated, na.rm = TRUE)
CountPatientsWithDiagnosisAssociations <- df_Aux_Diagnosis_ClassifiedAssociations %>%
filter(IsLikelyAssociated == TRUE) %>%
pull(PatientID) %>%
n_distinct()
# Print message for live monitoring in local tests
Message <- paste0("Classified ", CountDiagnosisAssociations, " associated diagnosis entries related to ", CountPatientsWithDiagnosisAssociations, " patient IDs.")
cli::cat_bullet(Message, bullet = "info")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create table for DiagnosisID replacement in related tables
df_Aux_Diagnosis_IDMappingAssociations <- df_Diagnosis %>%
ungroup() %>%
select(PatientID, OriginalDiagnosisID, DiagnosisID, SubDiagnosisID) %>%
rename(all_of(c(OldDiagnosisID = "OriginalDiagnosisID",
NewDiagnosisID = "DiagnosisID"))) %>%
distinct()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Update related tables
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#     - Replace DiagnosisIDs to associate entries (and add SubDiagnosisIDs in same move)
#     - Rearrange column order
#-------------------------------------------------------------------------------
df_Metastasis <- df_Metastasis %>%
ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingAssociations) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = MetastasisID)
if (nrow(df_MolecularDiagnostics) > 0)
{
df_MolecularDiagnostics <- df_MolecularDiagnostics %>%
ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingAssociations) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = MolecularDiagnosticsID)
}
df_Progress <- df_Progress %>%
ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingAssociations) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = ProgressID)
df_RadiationTherapy <- df_RadiationTherapy %>%
ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingAssociations) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = RadiationTherapyID)
df_Staging <- df_Staging %>%
ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingAssociations) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = StagingID)
df_Surgery <- df_Surgery %>%
ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingAssociations) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = SurgeryID)
df_SystemicTherapy <- df_SystemicTherapy %>%
ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingAssociations) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = SystemicTherapyID)
# Module 4 D) Reconstruct df_Histology from df_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Remove OriginalDiagnosisID column (not needed anymore)
df_Diagnosis <-  df_Diagnosis %>%
select(-OriginalDiagnosisID)
# Reconstruct df_Histology
df_Histology <- df_Diagnosis %>%
select(all_of(c("SubDiagnosisID", names(df_Histology)))) %>%
relocate(c(PatientID, DiagnosisID, SubDiagnosisID), .before = HistologyID)
