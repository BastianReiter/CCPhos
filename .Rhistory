#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_MolecularDiagnostics <- df_MolecularDiagnostics %>%
#--- Transformation ------------------------
dsCCPhos::TransformData(TableName = "MolecularDiagnostics", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = .RuleProfile_RawDataTransformation) %>%
#--- Formatting ----------------------------
mutate(MolecularDiagnosticsDate = format(as_datetime(MolecularDiagnosticsDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_Patient <- df_Patient %>%
#--- Transformation ------------------------------------
dsCCPhos::TransformData(TableName = "Patient", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = .RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------------
mutate(Gender = dsCCPhos::RecodeData(Gender, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "Gender"),
set_names(Value_Curated, Value_Raw))),
LastVitalStatus = dsCCPhos::RecodeData(LastVitalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "LastVitalStatus"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(LastVitalStatusDate = format(as_datetime(LastVitalStatusDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Progress <- df_Progress %>%
#--- Transformation ------------------------------------
dsCCPhos::TransformData(TableName = "Progress", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = .RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------------
mutate(GlobalStatus = dsCCPhos::RecodeData(GlobalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "GlobalStatus"),
set_names(Value_Curated, Value_Raw))),
LocalStatus = dsCCPhos::RecodeData(LocalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LocalStatus"),
set_names(Value_Curated, Value_Raw))),
LymphnodalStatus = dsCCPhos::RecodeData(LymphnodalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LymphnodalStatus"),
set_names(Value_Curated, Value_Raw))),
MetastasisStatus = dsCCPhos::RecodeData(MetastasisStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "MetastasisStatus"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(ProgressReportDate = format(as_datetime(ProgressReportDate), format = "%Y-%m-%d"),
LocalRelapseDate = format(as_datetime(LocalRelapseDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_RadiationTherapy <- df_RadiationTherapy %>%
#--- Transformation ----------------------------
dsCCPhos::TransformData(TableName = "RadiationTherapy", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = .RuleProfile_RawDataTransformation) %>%
#--- Recoding ----------------------------------
mutate(RadiationTherapyRelationToSurgery = dsCCPhos::RecodeData(RadiationTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
RadiationTherapyIntention = dsCCPhos::RecodeData(RadiationTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationTherapyIntention"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting --------------------------------
mutate(RadiationTherapyStart = format(as_datetime(RadiationTherapyStart), format = "%Y-%m-%d"),
RadiationTherapyEnd = format(as_datetime(RadiationTherapyEnd), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_Staging <- df_Staging %>%
#--- Transformation --------------------------------------
dsCCPhos::TransformData(TableName = "Staging", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = .RuleProfile_RawDataTransformation) %>%
#--- Recoding --------------------------------------------
mutate(UICCStage = dsCCPhos::RecodeData(UICCStage, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "UICCStage"),
set_names(Value_Curated, Value_Raw))),
TNM_T = dsCCPhos::RecodeData(TNM_T, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T"),
set_names(Value_Curated, Value_Raw))),
TNM_N = dsCCPhos::RecodeData(TNM_N, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N"),
set_names(Value_Curated, Value_Raw))),
TNM_M = dsCCPhos::RecodeData(TNM_M, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M"),
set_names(Value_Curated, Value_Raw))),
TNM_T_Prefix = dsCCPhos::RecodeData(TNM_T_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_N_Prefix = dsCCPhos::RecodeData(TNM_N_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_M_Prefix = dsCCPhos::RecodeData(TNM_M_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M_Prefix"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ------------------------------------------
mutate(StagingReportDate = format(as_datetime(StagingReportDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_Surgery <- df_Surgery %>%
#--- Transformation --------------------------------------
dsCCPhos::TransformData(TableName = "Surgery", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = .RuleProfile_RawDataTransformation) %>%
#--- Recoding --------------------------------------------
mutate(SurgeryIntention = dsCCPhos::RecodeData(SurgeryIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "SurgeryIntention"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentLocal = dsCCPhos::RecodeData(ResidualAssessmentLocal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentLocal"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentTotal = dsCCPhos::RecodeData(ResidualAssessmentTotal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentTotal"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ------------------------------------------
mutate(SurgeryDate = format(as_datetime(SurgeryDate), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Transform df_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_SystemicTherapy <- df_SystemicTherapy %>%
#--- Transformation ------------------------------
dsCCPhos::TransformData(TableName = "SystemicTherapy", RuleSet = dsCCPhos::RuleSet_RawDataTransformation, RuleProfile = .RuleProfile_RawDataTransformation) %>%
#--- Recoding ------------------------------------
mutate(SystemicTherapyIntention = dsCCPhos::RecodeData(SystemicTherapyIntention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyIntention"),
set_names(Value_Curated, Value_Raw))),
SystemicTherapyRelationToSurgery = dsCCPhos::RecodeData(SystemicTherapyRelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "SystemicTherapyRelationToSurgery"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------
mutate(IsChemotherapy = as.logical(IsChemotherapy),
IsImmunotherapy = as.logical(IsImmunotherapy),
IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
SystemicTherapyStart = format(as_datetime(SystemicTherapyStart), format = "%Y-%m-%d"),
SystemicTherapyEnd = format(as_datetime(SystemicTherapyEnd), format = "%Y-%m-%d"))
#--- Update PB ---
try(ProgressBar$tick())
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_DataSet <- list(BioSampling = df_BioSampling,
Diagnosis = df_Diagnosis,
Histology = df_Histology,
Metastasis = df_Metastasis,
MolecularDiagnostics = df_MolecularDiagnostics,
Patient = df_Patient,
Progress = df_Progress,
RadiationTherapy = df_RadiationTherapy,
Staging = df_Staging,
Surgery = df_Surgery,
SystemicTherapy = df_SystemicTherapy)
#--- Update PB ---
try(ProgressBar$tick())
ls_Monitors_Transformed <- map2(.x = ls_DataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Transformed")
})
try(ProgressBar$tick())
# Finalize df_BioSampling
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_BioSampling <- df_BioSampling %>%
mutate(SampleType = dsCCPhos::FinalizeDataTransformation(SampleType, TableName = "BioSampling", FeatureName = "SampleType"),
SampleAliquot = dsCCPhos::FinalizeDataTransformation(SampleAliquot, TableName = "BioSampling", FeatureName = "SampleAliquot"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Diagnosis <- df_Diagnosis %>%
mutate(LocalizationSide = dsCCPhos::FinalizeDataTransformation(LocalizationSide, TableName = "Diagnosis", FeatureName = "LocalizationSide"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~
df_Histology <- df_Histology %>%
mutate(Grading = dsCCPhos::FinalizeDataTransformation(Grading, TableName = "Histology", FeatureName = "Grading"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Patient
#~~~~~~~~~~~~~~~~~~~~~~~~
df_Patient <- df_Patient %>%
mutate(Gender = dsCCPhos::FinalizeDataTransformation(Gender, TableName = "Patient", FeatureName = "Gender"),   # Assign factor labels?
LastVitalStatus = dsCCPhos::FinalizeDataTransformation(LastVitalStatus, TableName = "Patient", FeatureName = "LastVitalStatus"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Progress
#~~~~~~~~~~~~~~~~~~~~~~~~~
df_Progress <- df_Progress %>%
mutate(GlobalStatus = dsCCPhos::FinalizeDataTransformation(GlobalStatus, TableName = "Progress", FeatureName = "GlobalStatus"),   # Assign factor labels?
LocalStatus = dsCCPhos::FinalizeDataTransformation(LocalStatus, TableName = "Progress", FeatureName = "LocalStatus"),   # Assign factor labels?
LymphnodalStatus = dsCCPhos::FinalizeDataTransformation(LymphnodalStatus, TableName = "Progress", FeatureName = "LymphnodalStatus"),   # Assign factor labels?
MetastasisStatus = dsCCPhos::FinalizeDataTransformation(MetastasisStatus, TableName = "Progress", FeatureName = "MetastasisStatus"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_RadiationTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_RadiationTherapy <- df_RadiationTherapy %>%
mutate(RadiationTherapyRelationToSurgery = dsCCPhos::FinalizeDataTransformation(RadiationTherapyRelationToSurgery, TableName = "RadiationTherapy", FeatureName = "RadiationTherapyRelationToSurgery"),   # Assign factor labels?
RadiationTherapyIntention = dsCCPhos::FinalizeDataTransformation(RadiationTherapyIntention, TableName = "RadiationTherapy", FeatureName = "RadiationTherapyIntention"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Staging
#~~~~~~~~~~~~~~~~~~~~~~~~
df_Staging <- df_Staging %>%
mutate(UICCStage = dsCCPhos::FinalizeDataTransformation(UICCStage, TableName = "Staging", FeatureName = "UICCStage"),
TNM_T = dsCCPhos::FinalizeDataTransformation(TNM_T, TableName = "Staging", FeatureName = "TNM_T"),
TNM_N = dsCCPhos::FinalizeDataTransformation(TNM_N, TableName = "Staging", FeatureName = "TNM_N"),
TNM_M = dsCCPhos::FinalizeDataTransformation(TNM_M, TableName = "Staging", FeatureName = "TNM_M"),
TNM_T_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_T_Prefix, TableName = "Staging", FeatureName = "TNM_T_Prefix"),
TNM_N_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_N_Prefix, TableName = "Staging", FeatureName = "TNM_N_Prefix"),
TNM_M_Prefix = dsCCPhos::FinalizeDataTransformation(TNM_M_Prefix, TableName = "Staging", FeatureName = "TNM_M_Prefix"),
TNM_ySymbol = dsCCPhos::FinalizeDataTransformation(TNM_ySymbol, TableName = "Staging", FeatureName = "TNM_ySymbol"),
TNM_rSymbol = dsCCPhos::FinalizeDataTransformation(TNM_rSymbol, TableName = "Staging", FeatureName = "TNM_rSymbol"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_Surgery
#~~~~~~~~~~~~~~~~~~~~~~~~
df_Surgery <- df_Surgery %>%
mutate(SurgeryIntention = dsCCPhos::FinalizeDataTransformation(SurgeryIntention, TableName = "Surgery", FeatureName = "SurgeryIntention"),   # Assign factor labels?
ResidualAssessmentLocal = dsCCPhos::FinalizeDataTransformation(ResidualAssessmentLocal, TableName = "Surgery", FeatureName = "ResidualAssessmentLocal"),
ResidualAssessmentTotal = dsCCPhos::FinalizeDataTransformation(ResidualAssessmentTotal, TableName = "Surgery", FeatureName = "ResidualAssessmentTotal"))
#--- Update PB ---
try(ProgressBar$tick())
# Finalize df_SystemicTherapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_SystemicTherapy <- df_SystemicTherapy %>%
mutate(SystemicTherapyRelationToSurgery = dsCCPhos::FinalizeDataTransformation(SystemicTherapyRelationToSurgery, TableName = "SystemicTherapy", FeatureName = "SystemicTherapyRelationToSurgery"),   # Assign factor labels?
SystemicTherapyIntention = dsCCPhos::FinalizeDataTransformation(SystemicTherapyIntention, TableName = "SystemicTherapy", FeatureName = "SystemicTherapyIntention"))   # Assign factor labels?
#--- Update PB ---
try(ProgressBar$tick())
# Re-pack data frames into list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_CuratedDataSet <- list(BioSampling = df_BioSampling,
Diagnosis = df_Diagnosis,
Histology = df_Histology,
Metastasis = df_Metastasis,
MolecularDiagnostics = df_MolecularDiagnostics,
Patient = df_Patient,
Progress = df_Progress,
RadiationTherapy = df_RadiationTherapy,
Staging = df_Staging,
Surgery = df_Surgery,
SystemicTherapy = df_SystemicTherapy)
#--- Update PB ---
try(ProgressBar$tick())
ls_Monitors_Final <- map2(.x = ls_DataSet,
.y = ls_MonitorFeatures_All,
.f = function(DataFrame, MonitorFeatures)
{
DataFrame %>%
dsCCPhos::TrackFeatureValues(Features = MonitorFeatures,
CurationStage = "Final")
})
try(ProgressBar$tick())
ls_MonitorSummaries <- list()
for (i in 1:length(ls_Monitors_Raw))
{
if (nrow(ls_Monitors_Raw[[i]]) > 0)
{
df_CurrentSummary <- ls_Monitors_Raw[[i]] %>%
full_join(ls_Monitors_Transformed[[i]], by = join_by(Feature, Value, IsValueEligible, CurationStage, Frequency)) %>%
full_join(ls_Monitors_Final[[i]], by = join_by(Feature, Value, IsValueEligible, CurationStage, Frequency)) %>%
pivot_wider(names_from = CurationStage,
values_from = Frequency) %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw, na.rm = TRUE),
Transformed = sum(Transformed, na.rm = TRUE),
Final = sum(Final, na.rm = TRUE)) %>%
arrange(Feature, desc(IsValueEligible))
}
else
{
df_CurrentSummary <- NULL
}
ls_MonitorSummaries <- c(ls_MonitorSummaries, list(df_CurrentSummary))
}
# Name the monitor summary objects
names(ls_MonitorSummaries) <- c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy")
try(ProgressBar$tick())
try(ProgressBar$terminate())
df_Diagnosis <- df_Diagnosis %>%
left_join(df_Histology, by = join_by(PatientID, DiagnosisID)) %>%
mutate(OriginalDiagnosisID = DiagnosisID,
DiagnosisID = paste0(DiagnosisID, "/", HistologyID)) %>%
relocate(DiagnosisID, .after = PatientID) %>%
group_by(PatientID) %>%
mutate(PatientCountInitialEntries = n()) %>%
ungroup()
# Names of features that are required to compile rule calls from dsCCPhos::RuleSet_DiagnosisRedundancy
PredictorFeatures_DiagnosisRedundancy = c("CountDeviatingValues",
"InitialDiagnosisDate",
"ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"HistologyDate",
"ICDOMorphologyCode",
"Grading")
# Pass required information to dsCCPhos::CompileClassificationCall to compile rull calls (dplyr::case_when-Statements)
Call_IsLikelyRedundant <- CompileClassificationCall(TargetFeature = "IsLikelyRedundant",
PredictorFeatures = PredictorFeatures_DiagnosisRedundancy,
RuleSet = dsCCPhos::RuleSet_DiagnosisRedundancy,
RuleProfile = .RuleProfile_DiagnosisRedundancy,
ValueIfNoRuleMet = FALSE)
# Make list of rule calls to pass them to function
RuleCalls_DiagnosisRedundancy <- list(IsLikelyRedundant = Call_IsLikelyRedundant)
# Set up progress bar
CountProgressItems <- df_Diagnosis %>% filter(PatientCountInitialEntries > 1) %>% pull(PatientID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Classifying redundant diagnosis entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Filter patients with multiple diagnosis entries and apply dsCCPhos::ClassifyDiagnosisRedundancy()
df_Aux_Diagnosis_ClassifiedRedundancies <- df_Diagnosis %>%
filter(PatientCountInitialEntries > 1) %>%
group_by(PatientID) %>%
group_modify(~ ClassifyDiagnosisRedundancy(DiagnosisEntries = .x,
RuleCalls = RuleCalls_DiagnosisRedundancy,
ProgressBarObject = ProgressBar)) %>%
ungroup()
# Reassemble df_Diagnosis after processing of redundant diagnosis entries
df_Diagnosis <- df_Diagnosis %>%
filter(PatientCountInitialEntries == 1) %>%
bind_rows(df_Aux_Diagnosis_ClassifiedRedundancies) %>%
arrange(PatientID) %>%
group_by(PatientID) %>%
mutate(PatientCountDistinctEntries = n()) %>%
ungroup()
# For monitoring purposes, obtain:
# a) number of redundant diagnosis entries and
# b) number of patients that had redundant diagnosis entries
CountDiagnosisRedundancies <- sum(df_Diagnosis$CountRedundancies, na.rm = TRUE)
CountPatientsWithRedundancies <- df_Diagnosis %>%
filter(CountRedundancies > 0) %>%
pull(PatientID) %>%
n_distinct()
# Compile message
Message <- paste0("Found ", CountDiagnosisRedundancies, " redundancies related to ", CountPatientsWithRedundancies, " patient IDs.")
# Add message to Messages list
Messages$DiagnosisClassification <- c(Messages$DiagnosisClassification,
Message)
# Additionally, print message on console
cat(Message)
# Replace IDs (Original DiagnosisID and not newly composed one) of redundant diagnosis entries in related tables
# Get table of affected DiagnosisIDs
df_Aux_Diagnosis_IDMappingRedundancies <- df_Diagnosis %>%
ungroup() %>%
filter(CountRedundancies > 0) %>%
select(PatientID, RedundantOriginalIDs, OriginalDiagnosisID) %>%
unnest(cols = c(RedundantOriginalIDs)) %>%
rename(all_of(c(OldDiagnosisID = "RedundantOriginalIDs",
NewDiagnosisID = "OriginalDiagnosisID"))) %>%
filter(OldDiagnosisID != NewDiagnosisID) %>%
distinct()
# Replace IDs of redundant diagnosis entries in related tables
df_Metastasis <- df_Metastasis %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_MolecularDiagnostics <- df_MolecularDiagnostics %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Progress <- df_Progress %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_RadiationTherapy <- df_RadiationTherapy %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Staging <- df_Staging %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Surgery <- df_Surgery %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_SystemicTherapy <- df_SystemicTherapy %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
# Remove columns of redundant IDs (not needed anymore)
df_Diagnosis <-  df_Diagnosis %>%
select(-c(RedundantIDs,
RedundantOriginalIDs,
CountRedundancies))
rm(list=ls())
library(dsCCPhos)
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Make Test data set smaller for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(.RawDataSetName = "RawDataSet",
.RuleProfile_RawDataTransformation = "Default",
.RuleProfile_DiagnosisRedundancy = "Default",
.RuleProfile_DiagnosisAssociation = "Default")
devtools::load_all(".")
library(dsCCPhos)
devtools::load_all(".")
# Set CurateDataDS argument values manually if needed
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RuleProfile_RawDataTransformation. = "Default"
rm(list=ls())
devtools::load_all(".")
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Make Test data set smaller for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName. = "RawDataSet",
RuleProfile_RawDataTransformation. = "Default",
RuleProfile_DiagnosisRedundancy. = "Default",
RuleProfile_DiagnosisAssociation. = "Default")
library(dsCCPhos)
devtools::load_all(".")
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Make Test data set smaller for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(.RawDataSetName = "RawDataSet",
.RuleProfile_RawDataTransformation = "Default",
.RuleProfile_DiagnosisRedundancy = "Default",
.RuleProfile_DiagnosisAssociation = "Default")
devtools::load_all(".")
library(dsCCPhos)
devtools::load_all(".")
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
# Make Test data set smaller for easier testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NumberOfPatients <- 1000
# Get a random sample of PatientIDs
SamplePatientIDs <- sample(RawDataSet$patient$"_id",
size = NumberOfPatients)
# Get data subsets that relate to sampled PatientIDs
RawDataSet <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = as.data.frame(filter(RawDataSet$"molecular-marker", RawDataSet$"molecular-marker"$"patient-id" %in% SamplePatientIDs)),
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)))
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataTransformation.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
devtools::load_all(".")
library(dsCCPhos)
library(dsCCPhos)
# dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("GetCohortDescriptionDS")
# use_r("GetCurationReportDS")
# use_r("GetOutcomeMeasuresDS")
# use_r("GetObjectInfoDS")
use_r("GetReportingObjectDS")
devtools::load_all(".")
devtools::load_all(".")
library(dsCCPhos)
devtools::load_all(".")
library(dsCCPhos)
