try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
# Construct diagnosis-related endpoints for clinical outcome measures from event history
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   - Overall survival (OS)
#   -
#   - Progression-free survival (PFS)
#   - Disease-free survival (DFS)
#
#   - Overall response rate
#   - Disease specific survival (Death from disease or from treatment)
#
#
# df_DiagnosisSummary_Histology <- df_CDS_Histology %>%
#                                       group_by(DiagnosisID) %>%
#                                       summarize(CountSubdiagnoses = n_distinct(SubDiagnosisID),
#                                                 CountHistologyReports = n_distinct(HistologyID))
#
#
# df_ADS_Diagnoses <- df_CDS_Diagnosis %>%
#                         left_join(df_DiagnosisSummary_Histology, by = join_by(DiagnosisID))
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 3)  Generate df_ADS_Patients
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- 3
ProgressBar <- progress_bar$new(format = "Composing patient-specific data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
#-------------------------------------------------------------------------------
df_Aux_PatientSummary_Diagnosis <- df_CDS_Diagnosis %>%
group_by(PatientID) %>%
summarize(CountDiagnoses = n_distinct(DiagnosisID)) %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
# !!! TEMPORARY !!! (For easier testing, slice is performed to filter for only one diagnosis per patient)
df_ADS_Patients <- df_CDS_Patient %>%
left_join(df_Aux_PatientSummary_Diagnosis, by = join_by(PatientID)) %>%
left_join(df_ADS_Diagnoses, by = join_by(PatientID)) %>%      # <--- TEMPORARY: Joining with ADS_Diagnoses
group_by(PatientID) %>%
arrange(Date_Diagnosis) %>%
slice_head() %>%      # <--- TEMPORARY: Slice performed
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Put data frames into list to get compact Augmented Data Set (ADS) object
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - Conversion from tibble to data.frame (if necessary), because dataSHIELD can handle data.frames better
#-------------------------------------------------------------------------------
ls_AugmentedDataSet <- list(Patients = as.data.frame(df_ADS_Patients),
Diagnoses = as.data.frame(df_ADS_Diagnoses),
Events = as.data.frame(df_ADS_Events))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define content of AugmentationReport
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls_AugmentationReport <- list(Test = c("TestReport"))
Messages$CheckAugmentationCompletion <- "green"
Messages$FinalMessage <- "Augmentation performed successfully!"
devtools::load_all(".")
CuratedDataSet <- CurationOutput$CuratedDataSet
View(CuratedDataSet$Patient)
# Augment data
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
# Augment data
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
rm(list=ls())
library(dsCCPhos)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
names(RawDataSet) <- c("patient",
"diagnosis",
"progress",
"histology",
"metastasis",
"tnm",
"system-therapy",
"surgery",
"radiation-therapy",
"molecular-marker",
"sample")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
AvailableNumberPatients <- length(unique(RawDataSet$RDS_Patient$PatientID))
as.integer("10")
devtools::load_all(".")
library(dsCCPhos)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
names(RawDataSet) <- c("patient",
"diagnosis",
"progress",
"histology",
"metastasis",
"tnm",
"system-therapy",
"surgery",
"radiation-therapy",
"molecular-marker",
"sample")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
devtools::load_all(".")
RawDataSet <- DrawSampleDS(RawDataSetName.S = "RawDataSet",
SampleSize.S = "1000")
RuleSet_RawDataHarmonization.S <- dsCCPhos::RuleSet_RawDataHarmonization
RuleProfile_RawDataHarmonization.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
# Setting up 'ls_DataSet' as object that holds all data throughout the function. It will be un- and repacked a couple of times during processing.
ls_DataSet <- RawDataSet
# Rename tables (Remove the 'RDS_'-prefix)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { str_remove(TableName, "RDS_") })
# If tables are missing, create corresponding empty tables for easier management throughout following processing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AllTableNames <- dsCCPhos::Meta_TableNames$TableName_Curated
MissingTableNames <- AllTableNames[!(AllTableNames %in% names(ls_DataSet))]
# Create empty data frames for missing tables
if (length(MissingTableNames) > 0)
{
for (i in 1:length(MissingTableNames))
{
ls_DataSet[[MissingTableNames[i]]] <- data.frame()
}
}
# Reestablish original order of tables in ls_DataSet
ls_DataSet <- ls_DataSet[AllTableNames]
# Rename features
#~~~~~~~~~~~~~~~~
# Looping through tables to rename features
ls_DataSet <- ls_DataSet %>%
imap(function(dataframe, name)
{
# Create named vector to look up matching feature names in meta data ('OldName' = 'NewName')
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == name)$FeatureName_Curated
if (!is_empty(dataframe))
{
# Rename feature names according to look-up vector
dplyr::rename(dataframe, any_of(vc_Lookup))      # Returns a tibble
}
else
{
# Create empty data.frame with pre-defined column names
df <- data.frame(matrix(nrow = 0,
ncol = length(names(vc_Lookup)))) %>%
setNames(names(vc_Lookup)) %>%
mutate(across(everything(), ~ as.character(.x)))
return(df)
}
})
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
names(RawDataSet) <- c("patient",
"diagnosis",
"progress",
"histology",
"metastasis",
"tnm",
"system-therapy",
"surgery",
"radiation-therapy",
"molecular-marker",
"sample")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RawDataSetT <- DrawSampleDS(RawDataSetName.S = "RawDataSet",
SampleSize.S = "1000")
SampleSize <- 1000
# Use require() to load package namespaces
require(dplyr)
require(purrr)
require(stringr)
AllPatientIDs <- RawDataSet$RDS_Patient$PatientID
AvailableNumberPatients <- length(unique(AllPatientIDs))
if (SampleSize > AvailableNumberPatients) { SampleSize <- AvailableNumberPatients }
# Get a random sample of PatientIDs
SampleIDs <- sample(AllPatientIDs,
size = SampleSize)
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
map(\(Table) ifelse(!is.null(Table), as.data.frame(filter(Table, PatientID %in% SampleIDs)), NULL))
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(\(Table) ifelse(!is.null(Table), as.data.frame(filter(Table, PatientID %in% SampleIDs)), NULL))
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(\(Table, name) ifelse(!is.null(Table), as.data.frame(filter(Table, PatientID %in% SampleIDs)), NULL))
Table <- RawDataSet$RDS_Diagnosis
#ifelse(!is.null(Table), as.data.frame(filter(Table, PatientID %in% SampleIDs)), NULL)
Test <- filter(Table, PatientID %in% SampleIDs)
View(Test)
as.data.frame(Test)
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(function(Table, name)
{
if(!is.null(Table)) { return(as.data.frame(filter(Table, PatientID %in% SampleIDs))) }
else { return(NULL) }
})
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(function(Table, name)
{
if(!is.null(Table)) { return(filter(Table, PatientID %in% SampleIDs)) }
else { return(NULL) }
})
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
map(function(Table)
{
if (!is.null(Table)) { return(filter(Table, PatientID %in% SampleIDs)) }
else { return(NULL) }
})
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
map(function(Table)
{
if (!is.null(Table)) { return(filter(Table, PatientID %in% SampleIDs)) }
else { return(NULL) }
})
devtools::load_all(".")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
names(RawDataSet) <- c("patient",
"diagnosis",
"progress",
"histology",
"metastasis",
"tnm",
"system-therapy",
"surgery",
"radiation-therapy",
"molecular-marker",
"sample")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RawDataSet <- DrawSampleDS(RawDataSetName.S = "RawDataSet",
SampleSize.S = "1000")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
View(dsCCPhos::Meta_FeatureNames)
?switch
devtools::load_all(".")
library(dsCCPhos)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_TableNames$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_TableNames$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
Test1 <- letters[1:10]
Test1
c("b", "h") %in% Test1
all(c("b", "h") %in% Test1)
devtools::load_all(".")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
RuleProfile_DiagnosisRedundancy.S = "Default",
RuleProfile_DiagnosisAssociation.S = "Default")
CuratedDataSet <- CurationOutput$CuratedDataSet
# Augment data
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
ADS <- AugmentationOutput$AugmentedDataSet
Data <- ADS$Patients %>%
select(PatientID,
UICCStage,
PatientAgeAtDiagnosis,
TimeFollowUp,
IsDocumentedDeceased)
require(dplyr)
require(survival)
# For function testing purposes
Table <- ADS$Patients
# For function testing purposes
Table <- ADS$Patients
TimeFeature.S <- "TimeFollowUp"
EventFeature.S <- "IsDocumentedDeceased"
devtools::load_all(".")
# For function testing purposes
Table <- ADS$Patients
TimeFeature.S <- "TimeFollowUp"
EventFeature.S <- "IsDocumentedDeceased"
# For function testing purposes
Table <- ADS$Patients
TimeFeature.S <- "TimeFollowUp"
EventFeature.S <- "IsDocumentedDeceased"
Covariates.S <-
Data <- Table %>%
select({{ TimeFeature.S }},
{{ EventFeature.S }})
View(Data)
Covariates.S <-
Data <- Table %>%
select({{ TimeFeature.S }},
{{ EventFeature.S }}) %>%
rename(Time = {{ TimeFeature.S }},
Event = {{ EventFeature.S }})
View(Data)
View(Table)
View(CuratedDataSet$Staging)
CovariateA.S <- "UICCStage"
CovariateB.S <- "PatientAgeAtDiagnosis"
CovariateC.S <- NULL
Data <- Table %>%
select({{ TimeFeature.S }},
{{ EventFeature.S }},
{{ CovariateA.S }},
{{ CovariateB.S }},
{{ CovariateC.S }}) %>%
rename(Time = {{ TimeFeature.S }},
Event = {{ EventFeature.S }}) %>%
SurvObject <- Surv(time = Data$TimeFollowUp,
event = Data$IsDocumentedDeceased,
type = "right")
Data <- Table %>%
select({{ TimeFeature.S }},
{{ EventFeature.S }},
{{ CovariateA.S }},
{{ CovariateB.S }},
{{ CovariateC.S }}) %>%
rename(Time = {{ TimeFeature.S }},
Event = {{ EventFeature.S }})
View(Data)
Data <- Table %>%
select({{ TimeFeature.S }},
{{ EventFeature.S }},
{{ CovariateA.S }},
{{ CovariateB.S }},
{{ CovariateC.S }}) %>%
rename(Time = {{ TimeFeature.S }},
Event = {{ EventFeature.S }},
CovariateA = {{ CovariateA.S }},
CovariateB = {{ CovariateB.S }},
CovariateC = {{ CovariateC.S }})
View(Table)
View(Data)
?Surv
Data <- Table %>%
select({{ TimeFeature.S }},
{{ EventFeature.S }},
{{ CovariateA.S }},
{{ CovariateB.S }},
{{ CovariateC.S }}) %>%
rename(Time = {{ TimeFeature.S }},
Event = {{ EventFeature.S }},
CovariateA = {{ CovariateA.S }},
CovariateB = {{ CovariateB.S }},
CovariateC = {{ CovariateC.S }})
SurvObject <- with(Data, Surv(time = Time,
event = Event,
type = "right"))
Curve <- survfit(SurvObject ~ CovariateA + CovariateB, data = Data)
str(Curve)
Curve <- survfit(SurvObject ~ CovariateA + CovariateB + CovariateC, data = Data)
Model <- survfit(SurvObject ~ 1, data = Data)
Plot <- Model %>%
ggsurvfit() +
xlim(0, 5 * 365) +
labs(x = "Days",
y = "Overall survival probability") +
add_confidence_interval()
library(ggsurvfit)
Plot <- Model %>%
ggsurvfit() +
xlim(0, 5 * 365) +
labs(x = "Days",
y = "Overall survival probability") +
add_confidence_interval()
Plot
if ("CovariateA" %in% names(Data))
{
Model <- survfit(SurvObject ~ CovariateA, data = Data)
}
library(ggsurvfit)
Plot <- Model %>%
ggsurvfit() +
xlim(0, 5 * 365) +
labs(x = "Days",
y = "Overall survival probability") +
add_confidence_interval()
Plot
if (all(c("CovariateA", "CovariateB") %in% names(Data)))
{
Model <- survfit(SurvObject ~ CovariateA + CovariateB, data = Data)
}
Plot <- Model %>%
ggsurvfit() +
xlim(0, 5 * 365) +
labs(x = "Days",
y = "Overall survival probability") +
add_confidence_interval()
Plot
?Surv
?nrow
nrow(Data)
DataW <- Data %>%
filter(!is.na(Time) & !is.na(Event))
DataW <- Data %>%
filter(!is.na(Time) & !is.na(Event) & Time > 0) %>%
filter(Time >= MinFollowUpTime)
MinFollowUpTime <- 10
DataW <- Data %>%
filter(!is.na(Time) & !is.na(Event) & Time > 0) %>%
filter(Time >= MinFollowUpTime)
devtools::load_all(".")
# Using survival::Surv() to create Surv object
SurvObject <- with(Data, Surv(time = Time,
event = Event,
type = "right"))
Test <- formula("SurvObject ~ 1")
Model <- survfit(Test, data = Data)
Plot <- Model %>%
ggsurvfit() +
xlim(0, 5 * 365) +
labs(x = "Days",
y = "Overall survival probability") +
add_confidence_interval()
Plot
library(readxl)
library(usethis)
Meta_FeatureNames <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "FeatureNames")
# Save data in .rda-file and make it part of package
use_data(Meta_FeatureNames, overwrite = TRUE)
Meta_Tables <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "Tables")
# Save data in .rda-file and make it part of package
use_data(Meta_Tables, overwrite = TRUE)
Meta_Features <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "Features")
# Save data in .rda-file and make it part of package
use_data(Meta_Features, overwrite = TRUE)
