library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available tables in Sites
datashield.tables(CCPConnections)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
?DSI::datashield.aggregate
?DSI::datashield.assign
?DSI::datashield.aggregate
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Test with ds.mean()
Test <- ds.mean(x = "Patient$geburtsdatum",
type = "both",
datasources = CCPConnections)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
library(dsCCPhos)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# List all available tables in Sites
datashield.tables(CCPConnections)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
library(dsCCPhos)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
library(dsCCPhos)
library(dsCCPhos)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
# Check out some server properties
Server_SiteA$config()
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# Check out some server properties
Server_SiteA$config()
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
# Check out some server properties
Server_SiteA$config()
devtools::load_all(".")
library(dsCCPhos)
library(dsCCPhos)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Check out some server properties
Server_SiteA$config()
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
library(dsCCPhos)
library(dsCCPhos)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Check out some server properties
Server_SiteA$config()
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
library(dsCCPhosClient)
# Augment data (based on curated data)
dsCCPhosClient::ds.AugmentData(Name_CurationOutput = "CurationOutput",
Name_Output = "AugmentationOutput",
DataSources = CCPConnections)
library(dsCCPhosClient)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(resourcer)
load("./Development/Data/RealData/CCPTestData_Total.RData")
load("./Development/Data/RealData/CCPTestData_A.RData")
load("./Development/Data/RealData/CCPTestData_B.RData")
load("./Development/Data/RealData/CCPTestData_C.RData")
Server_SiteTotal <- newDSLiteServer(tables = CCPTestData_Total,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos",
"dsSynthetic")))
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteTotal",
url = "Server_SiteTotal",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to different Sites
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
datashield.assign(CCPConnections, symbol = "BioSampling", value = "BioSampling")
datashield.assign(CCPConnections, symbol = "Diagnosis", value = "Diagnosis")
datashield.assign(CCPConnections, symbol = "Histology", value = "Histology")
datashield.assign(CCPConnections, symbol = "Metastasis", value = "Metastasis")
datashield.assign(CCPConnections, symbol = "MolecularDiagnostics", value = "MolecularDiagnostics")
datashield.assign(CCPConnections, symbol = "Patient", value = "Patient")
datashield.assign(CCPConnections, symbol = "Progress", value = "Progress")
datashield.assign(CCPConnections, symbol = "RadiationTherapy", value = "RadiationTherapy")
datashield.assign(CCPConnections, symbol = "Staging", value = "Staging")
datashield.assign(CCPConnections, symbol = "Surgery", value = "Surgery")
datashield.assign(CCPConnections, symbol = "SystemicTherapy", value = "SystemicTherapy")
ds.list(x = c("BioSampling",
"Diagnosis",
"Histology",
"Metastasis",
"MolecularDiagnostics",
"Patient",
"Progress",
"RadiationTherapy",
"Staging",
"Surgery",
"SystemicTherapy"),
newobj = "RawData",
datasources = CCPConnections)
# Augment data (based on curated data)
dsCCPhosClient::ds.AugmentData(Name_CurationOutput = "CurationOutput",
Name_Output = "AugmentationOutput",
DataSources = CCPConnections)
datashield.errors()
# Curate the raw data
dsCCPhosClient::ds.CurateData(Name_RawData = "RawData",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Augment data (based on curated data)
dsCCPhosClient::ds.AugmentData(Name_CurationOutput = "CurationOutput",
Name_Output = "AugmentationOutput",
DataSources = CCPConnections)
# List all available tables in Sites
datashield.tables(CCPConnections)
# Load test data into WD
load("./Development/Data/RealData/CCPTestData_Total.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Total)
# Load raw test data from data base into WD
RawData <- LoadRawData(DBConnection)
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS("RawData")
AugmentationOutput <- dsCCPhos::AugmentDataDS("CurationOutput")
View(AugmentationOutput$ADM_Events)
