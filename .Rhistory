mutate(Proportion_Harmonized = Count_Harmonized / sum(Count_Harmonized, na.rm = TRUE)) %>%
ungroup()
ValueSets$Recoded <- MonitorData %>%
group_by(Feature, Value_Recoded, IsEligible_Recoded) %>%
summarize(Count_Recoded = sum(Count_Recoded, na.rm = TRUE)) %>%
ungroup() %>%
distinct(Feature, Value_Recoded, .keep_all = TRUE) %>%
group_by(Feature) %>%
mutate(Proportion_Recoded = Count_Recoded / sum(Count_Recoded, na.rm = TRUE)) %>%
ungroup()
ValueSets$Final <- MonitorData %>%
group_by(Feature, Value_Final, IsEligible_Final) %>%
summarize(Count_Final = sum(Count_Final, na.rm = TRUE)) %>%
ungroup() %>%
distinct(Feature, Value_Final, .keep_all = TRUE) %>%
group_by(Feature) %>%
mutate(Proportion_Final = Count_Final / sum(Count_Final, na.rm = TRUE)) %>%
ungroup()
return(ValueSets)
}
else { return(list()) }
})
# Delete artificial "TrackID"-column from data frames (not needed anymore)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
try(df_BioSampling <- df_BioSampling %>% select(-TrackID))
try(df_Diagnosis <- df_Diagnosis %>% select(-TrackID))
try(df_GeneralCondition <- df_GeneralCondition %>% select(-TrackID))
try(df_Histology <- df_Histology %>% select(-TrackID))
try(df_Metastasis <- df_Metastasis %>% select(-TrackID))
try(df_MolecularDiagnostics <- df_MolecularDiagnostics %>% select(-TrackID))
try(df_OtherClassification <- df_OtherClassification %>% select(-TrackID))
try(df_Patient <- df_Patient %>% select(-TrackID))
try(df_Progress <- df_Progress %>% select(-TrackID))
try(df_RadiationTherapy <- df_RadiationTherapy %>% select(-TrackID))
try(df_Staging <- df_Staging %>% select(-TrackID))
try(df_Surgery <- df_Surgery %>% select(-TrackID))
try(df_SystemicTherapy <- df_SystemicTherapy %>% select(-TrackID))
try(df_TherapyRecommendation <- df_TherapyRecommendation %>% select(-TrackID))
try(ProgressBar$tick())
try(ProgressBar$terminate())
# Print info message
cli::cat_bullet("Data transformation monitors are stored in 'CurationReport$Transformation'", bullet = "info")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE 4)  Process diagnosis data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   A) Joining of df_Diagnosis and df_Histology to get coherent diagnosis data
#   B) Classification and removal of redundant diagnosis entries
#        - Afterwards update Diagnosis IDs in related tables
#   C) Classification and bundling of associated diagnosis entries
#        - Afterwards update Diagnosis IDs in related tables
#   D) Reconstruct df_Histology from df_Diagnosis
#-------------------------------------------------------------------------------
# Module 4 A) Join df_Diagnosis and df_Histology
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Create composed ID ('DiagnosisID / HistologyID')
#   - Add auxiliary features for filtering purposes
#-------------------------------------------------------------------------------
df_Diagnosis <- df_Diagnosis %>%
left_join(df_Histology, by = join_by(PatientID, DiagnosisID)) %>%
mutate(OriginalDiagnosisID = DiagnosisID,
DiagnosisID = paste0(DiagnosisID, "/", HistologyID)) %>%
relocate(DiagnosisID, .after = PatientID) %>%
group_by(PatientID) %>%
mutate(PatientCountInitialEntries = n()) %>%
ungroup()
# Module 4 B) Classification and removal of redundant entries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - In patients with multiple diagnosis entries:
#     Use dsCCPhos-function ClassifyDiagnosisRedundancy() to identify and consolidate redundant diagnosis entries
#   - Rules for classification of redundancy are defined in customizable data object delivered with dsCCPhos
#   - Replace redundant DiagnosisIDs in all related tables
#-------------------------------------------------------------------------------
# Compile rule calls from data in RuleSet_DiagnosisRedundancy.S using dsCCPhos::CompileClassificationCall
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Names of features that are required to compile rule calls from RuleSet_DiagnosisRedundancy.S
PredictorFeatures_DiagnosisRedundancy = c("CountDeviatingValues",
"DiagnosisDate",
"ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"HistologyDate",
"ICDOMorphologyCode",
"Grading")
# Pass required information to dsCCPhos::CompileClassificationCall to compile rule calls (dplyr::case_when-Statements)
Call_IsLikelyRedundant <- CompileClassificationCall(TargetFeature = "IsLikelyRedundant",
PredictorFeatures = PredictorFeatures_DiagnosisRedundancy,
RuleSet = RuleSet_DiagnosisRedundancy.S,
RuleProfile = RuleProfile_DiagnosisRedundancy.S,
ValueIfNoRuleMet = FALSE)
# Make list of rule calls to pass them to function
RuleCalls_DiagnosisRedundancy <- list(IsLikelyRedundant = Call_IsLikelyRedundant)
# Set up progress bar
#-------------------------------------------------------------------------------
CountProgressItems <- df_Diagnosis %>% filter(PatientCountInitialEntries > 1) %>% pull(PatientID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Classifying redundant diagnosis entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
#-------------------------------------------------------------------------------
# Filter patients with multiple diagnosis entries and apply dsCCPhos::ClassifyDiagnosisRedundancy()
df_Aux_Diagnosis_ClassifiedRedundancies <- df_Diagnosis %>%
filter(PatientCountInitialEntries > 1) %>%
group_by(PatientID) %>%
group_modify(~ ClassifyDiagnosisRedundancy(DiagnosisEntries = .x,
RuleCalls = RuleCalls_DiagnosisRedundancy,
ProgressBarObject = ProgressBar)) %>%
ungroup()
# Reassemble df_Diagnosis after processing of redundant diagnosis entries
df_Diagnosis <- df_Diagnosis %>%
filter(PatientCountInitialEntries == 1) %>%
bind_rows(df_Aux_Diagnosis_ClassifiedRedundancies) %>%
arrange(PatientID) %>%
group_by(PatientID) %>%
mutate(PatientCountDistinctEntries = n()) %>%
ungroup()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MONITORING: Redundant diagnosis entries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# a) Number of redundant diagnosis entries and
# b) Number of patients that had redundant diagnosis entries
CountDiagnosisRedundancies <- sum(df_Diagnosis$CountRedundancies, na.rm = TRUE)
CountPatientsWithDiagnosisRedundancies <- df_Diagnosis %>%
filter(CountRedundancies > 0) %>%
pull(PatientID) %>%
n_distinct()
# Print message for live monitoring in local tests
Message <- paste0("Found ", CountDiagnosisRedundancies, " redundancies related to ", CountPatientsWithDiagnosisRedundancies, " patient IDs.")
cli::cat_bullet(Message, bullet = "info")
# Save message in output object
Messages$DiagnosisRedundancies <- Message
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Replace IDs (Original DiagnosisID and not newly composed one) of redundant diagnosis entries in related tables
# Get table of affected DiagnosisIDs
df_Aux_Diagnosis_IDMappingRedundancies <- df_Diagnosis %>%
ungroup() %>%
filter(CountRedundancies > 0) %>%
select(PatientID, RedundantOriginalIDs, OriginalDiagnosisID) %>%
unnest(cols = c(RedundantOriginalIDs)) %>%
rename(all_of(c(OldDiagnosisID = "RedundantOriginalIDs",
NewDiagnosisID = "OriginalDiagnosisID"))) %>%
filter(OldDiagnosisID != NewDiagnosisID) %>%
distinct()
# Replace IDs of redundant diagnosis entries in related tables
df_GeneralCondition <- df_GeneralCondition %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Metastasis <- df_Metastasis %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_MolecularDiagnostics <- df_MolecularDiagnostics %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_OtherClassification <- df_OtherClassification %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Progress <- df_Progress %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_RadiationTherapy <- df_RadiationTherapy %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Staging <- df_Staging %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_Surgery <- df_Surgery %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_SystemicTherapy <- df_SystemicTherapy %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
df_TherapyRecommendation <- df_TherapyRecommendation %>% ReplaceDiagnosisIDs(IDMapping = df_Aux_Diagnosis_IDMappingRedundancies)
# Remove columns of redundant IDs (not needed anymore)
df_Diagnosis <-  df_Diagnosis %>%
select(-c(RedundantIDs,
RedundantOriginalIDs,
CountRedundancies))
# Module 4 C) Classify associations between diagnosis entries
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - In patients with multiple distinct diagnosis entries:
#     Use dsCCPhos-function ClassifyDiagnosisAssociations() to plausibly distinguish pseudo-different from actually different diagnoses
#   - Rules for classification of associated diagnosis entries are defined in customizable data object delivered with dsCCPhos
#   - Replace DiagnosisIDs in all related tables with ReferenceDiagnosisID
#-------------------------------------------------------------------------------
# Names of features that are required to compile rule calls from RuleSet_DiagnosisAssociation.S
PredictorFeatures_DiagnosisAssociation <- c("ICD10Code",
"ICD10CodeShort",
"ICD10Group",
"ICDOTopographyCode",
"ICDOTopographyCodeShort",
"LocalizationSide",
"ICDOMorphologyCode",
"ICDOMorphologyCodeShort",
"Grading")
# Compile rule calls (unevaluated dplyr::case_when-Statements) with dsCCPhos::CompileClassificationCall
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Call_IsLikelyAssociated <- CompileClassificationCall(TargetFeature = "IsLikelyAssociated",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = FALSE)
Call_InconsistencyCheck <- CompileClassificationCall(TargetFeature = "InconsistencyCheck",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = "No apparent inconsistency")
Call_ImplausibilityCheck <- CompileClassificationCall(TargetFeature = "ImplausibilityCheck",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = "No apparent implausibility")
Call_Relation_ICD10 <- CompileClassificationCall(TargetFeature = "Relation_ICD10",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_ICDOTopography <- CompileClassificationCall(TargetFeature = "Relation_ICDOTopography",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_LocalizationSide <- CompileClassificationCall(TargetFeature = "Relation_LocalizationSide",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_ICDOMorphology <- CompileClassificationCall(TargetFeature = "Relation_ICDOMorphology",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_Relation_Grading <- CompileClassificationCall(TargetFeature = "Relation_Grading",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA_character_)
Call_IsLikelyProgression <- CompileClassificationCall(TargetFeature = "IsLikelyProgression",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA)
Call_IsLikelyRecoding <- CompileClassificationCall(TargetFeature = "IsLikelyRecoding",
PredictorFeatures = PredictorFeatures_DiagnosisAssociation,
RuleSet = RuleSet_DiagnosisAssociation.S,
RuleProfile = RuleProfile_DiagnosisAssociation.S,
ValueIfNoRuleMet = NA)
# Make list of rule calls to pass them to function
RuleCalls_DiagnosisAssociation <- list(IsLikelyAssociated = Call_IsLikelyAssociated,
InconsistencyCheck = Call_InconsistencyCheck,
ImplausibilityCheck = Call_ImplausibilityCheck,
Relation_ICD10 = Call_Relation_ICD10,
Relation_ICDOTopography = Call_Relation_ICDOTopography,
Relation_LocalizationSide = Call_Relation_LocalizationSide,
Relation_ICDOMorphology = Call_Relation_ICDOMorphology,
Relation_Grading = Call_Relation_Grading,
IsLikelyProgression = Call_IsLikelyProgression,
IsLikelyRecoding = Call_IsLikelyRecoding)
# Set up progress bar
#-------------------------------------------------------------------------------
CountProgressItems <- df_Diagnosis %>% filter(PatientCountDistinctEntries > 1) %>% pull(PatientID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Classifying associated diagnosis entries [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
#-------------------------------------------------------------------------------
require(dplyr)
require(dsCCPhos)
require(stringr)
require(tidyr)
# For function testing purposes
DiagnosisEntries <- df_Diagnosis %>% filter(PatientID == "Pat_10010")
RuleCalls <- RuleCalls_DiagnosisAssociation
RuleCalls$IsLikelyAssociated
print(DiagnosisEntries$DiagnosisID[1])
# Update progress bar object, if assigned in function call
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (!is.null(ProgressBarObject)) { ProgressBarObject$tick() }
# Load meta data: Cancer diagnosis groups as proposed by ICD-10
Meta_ICD10Group <- dsCCPhos::Meta_CancerGrouping %>%
select(ICD10CodeShort,
CancerTopographyGroup_ICD10) %>%
rename(ICD10Group = CancerTopographyGroup_ICD10)
View(Meta_ICD10Group)
# Enhance diagnosis entries by auxiliary variables
DiagnosisEntries <- DiagnosisEntries %>%
arrange(DiagnosisDate, HistologyDate) %>%
mutate(ICD10CodeShort = case_when(str_starts(ICD10Code, "C") ~ str_sub(ICD10Code, end = 3),
str_starts(ICD10Code, "D") ~ str_sub(ICD10Code, end = 5),
TRUE ~ str_sub(ICD10Code, end = 3)),
ICDOTopographyCodeShort = str_sub(ICDOTopographyCode, end = 3),
ICDOMorphologyCodeShort = str_sub(ICDOMorphologyCode, end = 4)) %>%
left_join(Meta_ICD10Group, by = join_by(ICD10CodeShort))
View(DiagnosisEntries)
RuleCalls$IsLikelyAssociated
# For testing purposes
TargetFeature <- "IsLikelyAssociated"
PredictorFeatures <- PredictorFeatures_DiagnosisAssociation
RuleSet <- RuleSet_DiagnosisAssociation
View(RuleSet_DiagnosisAssociation.S)
ValueIfNoRuleMet <- FALSE
# Filter relevant rules from given rule set
RelevantRules <- RuleSet %>%
filter(Profile == RuleProfile & Feature == TargetFeature) %>%
arrange(EvaluationOrder)
RuleProfile <- RuleProfile_DiagnosisAssociation.S
ValueIfNoRuleMet <- FALSE
# Filter relevant rules from given rule set
RelevantRules <- RuleSet %>%
filter(Profile == RuleProfile & Feature == TargetFeature) %>%
arrange(EvaluationOrder)
View(RelevantRules)
if (is.null(ValueIfNoRuleMet))
{
stop("ERROR: 'ValueIfNoRuleMet' can not be NULL. NA would be a valid alternative.")
}
# Process ValueIfNoRuleMet to turn it into valid string
ValueIfNoRuleMet <- case_when(is.character(ValueIfNoRuleMet) ~ paste0("'", ValueIfNoRuleMet, "'"),
is.na(ValueIfNoRuleMet) ~ "NA",
TRUE ~ as.character(ValueIfNoRuleMet))
vc_Rules <- NULL
for (i in 1:nrow(RelevantRules))
{
vc_Blocks <- NULL
for (j in 1:length(PredictorFeatures))
{
vc_Blockparts <- NULL
RefPointer <- paste0("Reference$", PredictorFeatures[j])      # Ex. 'Reference$ICD10Group' (value of Reference diagnosis)
RefFunction <- RelevantRules[i, paste0(PredictorFeatures[j], "_Ref_f")]      # Ex. is.na(x)
RefExpression <- RelevantRules[i, paste0(PredictorFeatures[j], "_Ref_expr")]      # Ex. '%in% c(...)'
ConnectingOperator <- RelevantRules[i, paste0(PredictorFeatures[j], "_Conn")]       # Ex. '&' or '=='
CandPointer <- paste0(PredictorFeatures[j], "[row_number()]")      # Ex. 'ICD10Group[row_number()]' (value of Candidate diagnosis)
CandFunction <- RelevantRules[i, paste0(PredictorFeatures[j], "_Cand_f")]      # Ex. is.na(x)
CandExpression <- RelevantRules[i, paste0(PredictorFeatures[j], "_Cand_expr")]       # Ex. =='Digestive organs'
# Check if any rule entries exist in Block of current PredictorFeature
if ((is.na(RefFunction)
& is.na(RefExpression)
& is.na(ConnectingOperator)
& is.na(CandFunction)
& is.na(CandExpression)) == FALSE)
{
# If there is no ConnectingOperator and neither a function nor an expression for RefPointer is defined, make RefPointer empty string
if (is.na(ConnectingOperator) & is.na(RefFunction) & is.na(RefExpression))
{
RefPointer <- ""
}
# If there is no ConnectingOperator and neither a function nor an expression for CandPointer is defined, make CandPointer empty string
if (is.na(ConnectingOperator) & is.na(CandFunction) & is.na(CandExpression))
{
CandPointer <- ""
}
# If a function on RefPointer is defined, compile accordingly
if (!is.na(RefFunction))
{
RefPointer <- paste0("(", RefPointer, ")")
RefPointer <- str_replace(RefFunction, "(x)", RefPointer)
}
# If a function on CandPointer is defined, compile accordingly
if (!is.na(RefFunction))
{
CandPointer <- paste0("(", CandPointer, ")")
CandPointer <- str_replace(CandFunction, "(x)", CandPointer)
}
# Concatenate all parts in a vector
vc_Blockparts <- c("(",
RefPointer, " ",
RefExpression, " ",
ConnectingOperator, " ",
CandPointer, " ",
CandExpression,
")")
}
# Sort out Block parts that are NA and consolidate in a single string
Block <- paste0(vc_Blockparts[!is.na(vc_Blockparts)], collapse = "")
# Add Block string to other Blocks
vc_Blocks <- c(vc_Blocks, Block)
}
vc_Blocks <- vc_Blocks[vc_Blocks != ""]      # Remove all empty Blocks from vc_Blocks
BlockConnector <- paste0(" ", RelevantRules$BlockConnector[i], " ")      # Get operator symbol connecting Blocks for current rule chain (usually '&' or '|')
Rule <- paste0(vc_Blocks, collapse = BlockConnector)      # If there are multiple Blocks, connect them with BlockConnector operator
Rule <- paste0(Rule, " ~ ", RelevantRules$Value[i], ", " , collapse = "")      # Map Rule Blocks with resulting value for target feature
vc_Rules <- c(vc_Rules, Rule)
}
Rules <- paste0(vc_Rules, collapse = "")
Rules
vc_Rules
View(RelevantRules)
i <- 1
vc_Blocks <- NULL
for (j in 1:length(PredictorFeatures))
{
vc_Blockparts <- NULL
RefPointer <- paste0("Reference$", PredictorFeatures[j])      # Ex. 'Reference$ICD10Group' (value of Reference diagnosis)
RefFunction <- RelevantRules[i, paste0(PredictorFeatures[j], "_Ref_f")]      # Ex. is.na(x)
RefExpression <- RelevantRules[i, paste0(PredictorFeatures[j], "_Ref_expr")]      # Ex. '%in% c(...)'
ConnectingOperator <- RelevantRules[i, paste0(PredictorFeatures[j], "_Conn")]       # Ex. '&' or '=='
CandPointer <- paste0(PredictorFeatures[j], "[row_number()]")      # Ex. 'ICD10Group[row_number()]' (value of Candidate diagnosis)
CandFunction <- RelevantRules[i, paste0(PredictorFeatures[j], "_Cand_f")]      # Ex. is.na(x)
CandExpression <- RelevantRules[i, paste0(PredictorFeatures[j], "_Cand_expr")]       # Ex. =='Digestive organs'
# Check if any rule entries exist in Block of current PredictorFeature
if ((is.na(RefFunction)
& is.na(RefExpression)
& is.na(ConnectingOperator)
& is.na(CandFunction)
& is.na(CandExpression)) == FALSE)
{
# If there is no ConnectingOperator and neither a function nor an expression for RefPointer is defined, make RefPointer empty string
if (is.na(ConnectingOperator) & is.na(RefFunction) & is.na(RefExpression))
{
RefPointer <- ""
}
# If there is no ConnectingOperator and neither a function nor an expression for CandPointer is defined, make CandPointer empty string
if (is.na(ConnectingOperator) & is.na(CandFunction) & is.na(CandExpression))
{
CandPointer <- ""
}
# If a function on RefPointer is defined, compile accordingly
if (!is.na(RefFunction))
{
RefPointer <- paste0("(", RefPointer, ")")
RefPointer <- str_replace(RefFunction, "(x)", RefPointer)
}
# If a function on CandPointer is defined, compile accordingly
if (!is.na(RefFunction))
{
CandPointer <- paste0("(", CandPointer, ")")
CandPointer <- str_replace(CandFunction, "(x)", CandPointer)
}
# Concatenate all parts in a vector
vc_Blockparts <- c("(",
RefPointer, " ",
RefExpression, " ",
ConnectingOperator, " ",
CandPointer, " ",
CandExpression,
")")
}
# Sort out Block parts that are NA and consolidate in a single string
Block <- paste0(vc_Blockparts[!is.na(vc_Blockparts)], collapse = "")
# Add Block string to other Blocks
vc_Blocks <- c(vc_Blocks, Block)
}
vc_Blocks
vc_Blocks <- vc_Blocks[vc_Blocks != ""]      # Remove all empty Blocks from vc_Blocks
vc_Blocks
BlockConnector <- paste0(" ", RelevantRules$BlockConnector[i], " ")      # Get operator symbol connecting Blocks for current rule chain (usually '&' or '|')
BlockConnector
Rule <- paste0(vc_Blocks, collapse = BlockConnector)      # If there are multiple Blocks, connect them with BlockConnector operator
Rule
library(readxl)
library(usethis)
Meta_Tables <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "Tables")
# Save data in .rda-file and make it part of package
use_data(Meta_Tables, overwrite = TRUE)
Meta_Features <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "Features")
# Save data in .rda-file and make it part of package
use_data(Meta_Features, overwrite = TRUE)
Meta_ValueSets <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "ValueSets")
# Save data in .rda-file and make it part of package
use_data(Meta_ValueSets, overwrite = TRUE)
RuleSet_RawDataHarmonization <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "RawDataHarmonization")
# Save data in .rda-file and make it part of package
use_data(RuleSet_RawDataHarmonization, overwrite = TRUE)
RuleSet_DiagnosisAssociation <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "DiagnosisAssociation",
skip = 2)
# Save data in .rda-file and make it part of package
use_data(RuleSet_DiagnosisAssociation, overwrite = TRUE)
RuleSet_DiagnosisRedundancy <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "DiagnosisRedundancy",
skip = 2)
# Save data in .rda-file and make it part of package
use_data(RuleSet_DiagnosisRedundancy, overwrite = TRUE)
RuleSet_RawDataHarmonization.S <- dsCCPhos::RuleSet_RawDataHarmonization
RuleProfile_RawDataHarmonization.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
RuleSet_DiagnosisAssociation.S
View(RuleSet_DiagnosisAssociation.S)
devtools::load_all(".")
RuleSet_RawDataHarmonization.S <- dsCCPhos::RuleSet_RawDataHarmonization
RuleProfile_RawDataHarmonization.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
View(RuleSet_DiagnosisAssociation.S)
# Names of features that are required to compile rule calls from RuleSet_DiagnosisAssociation.S
PredictorFeatures_DiagnosisAssociation <- c("ICD10Code",
"ICD10CodeShort",
"ICD10Group",
"ICDOTopographyCode",
"ICDOTopographyCodeShort",
"LocalizationSide",
"ICDOMorphologyCode",
"ICDOMorphologyCodeShort",
"Grading")
TargetFeature <- "IsLikelyAssociated"
PredictorFeatures <- PredictorFeatures_DiagnosisAssociation
RuleSet <- RuleSet_DiagnosisAssociation
RuleProfile <- RuleProfile_DiagnosisAssociation.S
ValueIfNoRuleMet <- FALSE
View(RuleSet)
RuleSet_DiagnosisAssociation <- read_excel(path = "./Development/Data/MetaData/MetaDataCCPhos.xlsx",
sheet = "DiagnosisAssociation",
skip = 2)
# Save data in .rda-file and make it part of package
use_data(RuleSet_DiagnosisAssociation, overwrite = TRUE)
devtools::load_all(".")
RuleSet_RawDataHarmonization.S <- dsCCPhos::RuleSet_RawDataHarmonization
RuleProfile_RawDataHarmonization.S <- "Default"
RuleSet_DiagnosisRedundancy.S <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleProfile_DiagnosisRedundancy.S <- "Default"
RuleSet_DiagnosisAssociation.S <- dsCCPhos::RuleSet_DiagnosisAssociation
RuleProfile_DiagnosisAssociation.S <- "Default"
TargetFeature <- "IsLikelyAssociated"
PredictorFeatures <- PredictorFeatures_DiagnosisAssociation
RuleSet <- RuleSet_DiagnosisAssociation
RuleProfile <- RuleProfile_DiagnosisAssociation.S
ValueIfNoRuleMet <- FALSE
View(RuleSet)
# Filter relevant rules from given rule set
RelevantRules <- RuleSet %>%
filter(Profile == RuleProfile & Feature == TargetFeature) %>%
arrange(EvaluationOrder)
# Process ValueIfNoRuleMet to turn it into valid string
ValueIfNoRuleMet <- case_when(is.character(ValueIfNoRuleMet) ~ paste0("'", ValueIfNoRuleMet, "'"),
is.na(ValueIfNoRuleMet) ~ "NA",
TRUE ~ as.character(ValueIfNoRuleMet))
vc_Rules <- NULL
