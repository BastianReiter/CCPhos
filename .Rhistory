vc_EligibleValueLabels,
vc_EligibleValues))
}
# For testing purposes
TargetVector <- df_CDS_Diagnosis$LocalizationSide
TableName = "Diagnosis"
FeatureName = "LocalizationSide"
ExcludeIneligibleValues = TRUE
ConvertToFactor = FALSE
AssignFactorLabels = TRUE
vc_Output <- TargetVector
RelevantValueSet <- dsCCPhos::Meta_ValueSets %>%
filter(Table == TableName & Feature == FeatureName) %>%
arrange(FactorRank)
vc_EligibleValues <- RelevantValueSet$Value_Curated
vc_EligibleValueLabels <- RelevantValueSet$Label_Curated
if (AssignFactorLabels == TRUE) { ConvertToFactor <- TRUE }
if (ExcludeIneligibleValues == TRUE)
{
vc_IsEligible <- TargetVector %in% vc_EligibleValues
vc_IsEligible[vc_IsEligible == FALSE] <- NA      # Replace all "FALSE" entries with NA
TargetVector <- TargetVector[vc_IsEligible]
}
if (ConvertToFactor == TRUE)
{
TargetVector <- as.factor(TargetVector,
levels = vc_EligibleValues,
labels = ifelse(AssignFactorLabels == TRUE,
vc_EligibleValueLabels,
vc_EligibleValues))
}
# For testing purposes
TargetVector <- df_CDS_Diagnosis$LocalizationSide
TableName = "Diagnosis"
FeatureName = "LocalizationSide"
ExcludeIneligibleValues = TRUE
ConvertToFactor = FALSE
AssignFactorLabels = TRUE
vc_Output <- TargetVector
RelevantValueSet <- dsCCPhos::Meta_ValueSets %>%
filter(Table == TableName & Feature == FeatureName) %>%
arrange(FactorRank)
vc_EligibleValues <- RelevantValueSet$Value_Curated
vc_EligibleValueLabels <- RelevantValueSet$Label_Curated
if (AssignFactorLabels == TRUE) { ConvertToFactor <- TRUE }
if (ExcludeIneligibleValues == TRUE)
{
vc_IsEligible <- TargetVector %in% vc_EligibleValues
vc_IsEligible[vc_IsEligible == FALSE] <- NA      # Replace all "FALSE" entries with NA
TargetVector <- TargetVector[vc_IsEligible]
}
if (ConvertToFactor == TRUE)
{
TargetVector <- factor(TargetVector,
levels = vc_EligibleValues,
labels = ifelse(AssignFactorLabels == TRUE,
vc_EligibleValueLabels,
vc_EligibleValues),
exclude = NULL)
}
TargetVector
# For testing purposes
TargetVector <- df_CDS_Diagnosis$LocalizationSide
TableName = "Diagnosis"
FeatureName = "LocalizationSide"
ExcludeIneligibleValues = TRUE
ConvertToFactor = FALSE
AssignFactorLabels = TRUE
TargetVector
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_Small_A.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Small_A)
# Load raw test data from data base into WD
RawDataSet <- LoadRawData(DBConnection)
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(Name_RawDataSet = "RawDataSet",
RuleProfile_RawDataTransformation = "Default",
RuleProfile_DiagnosisRedundancy = "Default",
RuleProfile_DiagnosisAssociation = "Default")
View(CurationOutput$CurationReport$Monitor_Diagnosis)
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(Name_RawDataSet = "RawDataSet",
RuleProfile_RawDataTransformation = "Default",
RuleProfile_DiagnosisRedundancy = "Default",
RuleProfile_DiagnosisAssociation = "Default")
View(CurationOutput$CurationReport$Monitor_Diagnosis)
devtools::load_all(".")
library(dsCCPhos)
library(dsCCPhos)
library(dsCCPhos)
?assign
devtools::load_all(".")
# Load test data into WD
load("./Development/Data/TestData/CCPTestData_Small_A.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData_Small_A)
# Load raw test data from data base into WD
RawDataSet <- LoadRawData(DBConnection)
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(Name_RawDataSet = "RawDataSet",
RuleProfile_RawDataTransformation = "Default",
RuleProfile_DiagnosisRedundancy = "Default",
RuleProfile_DiagnosisAssociation = "Default")
?purrr::map
devtools::load_all(".")
# Curate data
CurationOutput <- dsCCPhos::CurateDataDS(Name_RawDataSet = "RawDataSet",
RuleProfile_RawDataTransformation = "Default",
RuleProfile_DiagnosisRedundancy = "Default",
RuleProfile_DiagnosisAssociation = "Default")
RuleProfile_RawDataTransformation = "Default"
RuleProfile_DiagnosisRedundancy = "Default"
RuleProfile_DiagnosisAssociation = "Default"
df_BioSampling <- read_csv(file = "./Development/Data/TestData/CSV/sample/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Patient <- read_csv(file = "./Development/Data/TestData/CSV/patient/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Progress <- read_csv(file = "./Development/Data/TestData/CSV/progress/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_RadiationTherapy <- read_csv(file = "./Development/Data/TestData/CSV/radiation-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Staging <- read_csv(file = "./Development/Data/TestData/CSV/tnm/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Surgery <- read_csv(file = "./Development/Data/TestData/CSV/surgery/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
library(dplyr)
library(readr)
library(stringr)
df_BioSampling <- read_csv(file = "./Development/Data/TestData/CSV/sample/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Patient <- read_csv(file = "./Development/Data/TestData/CSV/patient/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Progress <- read_csv(file = "./Development/Data/TestData/CSV/progress/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_RadiationTherapy <- read_csv(file = "./Development/Data/TestData/CSV/radiation-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Staging <- read_csv(file = "./Development/Data/TestData/CSV/tnm/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Surgery <- read_csv(file = "./Development/Data/TestData/CSV/surgery/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
CCPTestData_Total <- list(BioSampling = as.data.frame(df_BioSampling),
Diagnosis = as.data.frame(df_Diagnosis),
Histology = as.data.frame(df_Histology),
Metastasis = as.data.frame(df_Metastasis),
MolecularDiagnostics = as.data.frame(df_MolecularDiagnostics),
Patient = as.data.frame(df_Patient),
Progress = as.data.frame(df_Progress),
RadiationTherapy = as.data.frame(df_RadiationTherapy),
Staging = as.data.frame(df_Staging),
Surgery = as.data.frame(df_Surgery),
SystemicTherapy = as.data.frame(df_SystemicTherapy))
CCPTestData <- list(BioSampling = as.data.frame(df_BioSampling),
Diagnosis = as.data.frame(df_Diagnosis),
Histology = as.data.frame(df_Histology),
Metastasis = as.data.frame(df_Metastasis),
MolecularDiagnostics = as.data.frame(df_MolecularDiagnostics),
Patient = as.data.frame(df_Patient),
Progress = as.data.frame(df_Progress),
RadiationTherapy = as.data.frame(df_RadiationTherapy),
Staging = as.data.frame(df_Staging),
Surgery = as.data.frame(df_Surgery),
SystemicTherapy = as.data.frame(df_SystemicTherapy))
# Assign names to test data set tables (corresponding to real raw data on CCP servers)
names(CCPTestData) <- dsCCPhos::Meta_TableNames$TableName_Raw
save(CCPTestData, file = "./Development/Data/TestData/CCPTestData.Rdata")
# Load test data into WD
load("./Development/Data/TestData/CCPTestData.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData)
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData)
devtools::load_all(".")
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData.RData")
rm(list=ls())
library(dsCCPhos)
# Load test data into WD
load("./Development/Data/TestData/CCPTestData.RData")
# Create virtual data base with test data
DBConnection <- MakeTestDB(CCPTestData)
# Load raw test data from data base into WD
RawDataSet <- CCPTestData
RuleProfile_RawDataTransformation = "Default"
RuleProfile_DiagnosisRedundancy = "Default"
RuleProfile_DiagnosisAssociation = "Default"
# Use require() to load package namespaces
require(dplyr)
require(dsCCPhos)
require(lubridate)
require(progress)
require(purrr)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate Messaging objects
Messages <- list()
Messages$DataTransformation <- character()
Messages$DiagnosisClassification <- character()
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup)))      # Returns a tibble
})
# Unpack list into data frames
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_CDS_BioSampling <- ls_CuratedDataSet$RDS_BioSampling
?ge
?get
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup)))      # Returns a tibble
return(get(TableName))
})
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
#assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
#return(get(TableName))
})
View(ls_CuratedDataSet)
View(ls_CuratedDataSet)
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
print(TableName)
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
#assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
#return(get(TableName))
})
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
print(TableName)
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
#assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
#return(get(TableName))
print(vc_Lookup)
})
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
print(TableName)
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
#assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
#return(get(TableName))
print(vc_Lookup)
})
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup)))      # Returns a tibble
})
df_BioSampling <- read_csv(file = "./Development/Data/TestData/CSV/sample/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Patient <- read_csv(file = "./Development/Data/TestData/CSV/patient/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Progress <- read_csv(file = "./Development/Data/TestData/CSV/progress/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_RadiationTherapy <- read_csv(file = "./Development/Data/TestData/CSV/radiation-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Staging <- read_csv(file = "./Development/Data/TestData/CSV/tnm/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Surgery <- read_csv(file = "./Development/Data/TestData/CSV/surgery/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
CCPTestData <- list(sample = as.data.frame(df_BioSampling),
diagnosis = as.data.frame(df_Diagnosis),
histology = as.data.frame(df_Histology),
metastasis = as.data.frame(df_Metastasis),
"molecular-marker" = as.data.frame(df_MolecularDiagnostics),
patient = as.data.frame(df_Patient),
progress = as.data.frame(df_Progress),
"radiation-therapy" = as.data.frame(df_RadiationTherapy),
tnm = as.data.frame(df_Staging),
surgery = as.data.frame(df_Surgery),
"system-therapy" = as.data.frame(df_SystemicTherapy))
save(CCPTestData, file = "./Development/Data/TestData/CCPTestData.Rdata")
# Load raw test data from data base into WD
RawDataSet <- CCPTestData
RuleProfile_RawDataTransformation = "Default"
RuleProfile_DiagnosisRedundancy = "Default"
RuleProfile_DiagnosisAssociation = "Default"
RuleProfile_RawDataTransformation = "Default"
RuleProfile_DiagnosisRedundancy = "Default"
RuleProfile_DiagnosisAssociation = "Default"
# Use require() to load package namespaces
require(dplyr)
require(dsCCPhos)
require(lubridate)
require(progress)
require(purrr)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup)))      # Returns a tibble
})
# Looping through tables of Raw Data Set to rename features
ls_CuratedDataSet <- purrr::map(.x = names(RawDataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Raw == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
assign(TableName,
dplyr::rename(RawDataSet[[TableName]], any_of(vc_Lookup)))      # Returns a tibble
return(get(TableName))
})
?setNames
df_BioSampling <- read_csv(file = "./Development/Data/TestData/CSV/sample/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Diagnosis <- read_csv(file = "./Development/Data/TestData/CSV/diagnosis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Histology <- read_csv(file = "./Development/Data/TestData/CSV/histology/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Metastasis <- read_csv(file = "./Development/Data/TestData/CSV/metastasis/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_MolecularDiagnostics <- read_csv(file = "./Development/Data/TestData/CSV/molecular-marker/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Patient <- read_csv(file = "./Development/Data/TestData/CSV/patient/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Progress <- read_csv(file = "./Development/Data/TestData/CSV/progress/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_RadiationTherapy <- read_csv(file = "./Development/Data/TestData/CSV/radiation-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Staging <- read_csv(file = "./Development/Data/TestData/CSV/tnm/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_Surgery <- read_csv(file = "./Development/Data/TestData/CSV/surgery/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
df_SystemicTherapy <- read_csv(file = "./Development/Data/TestData/CSV/system-therapy/data.csv",
col_types = cols(.default = "c")) %>%
rename("_id" = entity_id)
CCPTestData <- list(sample = as.data.frame(df_BioSampling),
diagnosis = as.data.frame(df_Diagnosis),
histology = as.data.frame(df_Histology),
metastasis = as.data.frame(df_Metastasis),
"molecular-marker" = as.data.frame(df_MolecularDiagnostics),
patient = as.data.frame(df_Patient),
progress = as.data.frame(df_Progress),
"radiation-therapy" = as.data.frame(df_RadiationTherapy),
tnm = as.data.frame(df_Staging),
surgery = as.data.frame(df_Surgery),
"system-therapy" = as.data.frame(df_SystemicTherapy))
save(CCPTestData, file = "./Development/Data/TestData/CCPTestData.Rdata")
saveRDS(CCPTestData, file = "./Development/Data/TestData/CCPTestData.rds")
rm(list=ls())
# Load CCP test data as raw data set
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
ls_DataSet <- RawDataSet
vc_TableNameDictionary <- dsCCPhos::Meta_TableNames$TableName_Curated
names(vc_TableNameDictionary) <- dsCCPhos::Meta_TableNames$TableName_Raw
vc_TableNameDictionary
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { vc_TableNameDictionary[TableName] })
vc_TableNameDictionary["patient"]
vc_TableNameDictionary["Patient"]
# Looping through tables to rename features
ls_DataSet <- purrr::map(.x = names(ls_DataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(ls_DataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
})
# Setting up 'ls_DataSet' as object that holds all data throughout the function
ls_DataSet <- RawDataSet
# Creating named vector as table name dictionary (mapping of old and new table names)
vc_TableNameDictionary <- dsCCPhos::Meta_TableNames$TableName_Curated
names(vc_TableNameDictionary) <- dsCCPhos::Meta_TableNames$TableName_Raw
# Renaming of table names according to dictionary created above
names(ls_DataSet) <- sapply(names(ls_DataSet),
function(TableName) { vc_TableNameDictionary[TableName] })
# Looping through tables to rename features
ls_DataSet <- purrr::map(.x = names(ls_DataSet),
.f = function(TableName)
{
# Create named vector to look up matching feature names in meta data ("OldName = 'NewName'")
vc_Lookup <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Raw
names(vc_Lookup) <- dplyr::filter(dsCCPhos::Meta_FeatureNames, TableName_Curated == TableName)$FeatureName_Curated
# Rename feature names according to look-up vector
dplyr::rename(ls_DataSet[[TableName]], any_of(vc_Lookup))      # Returns a tibble
}) %>%
setNames(names(ls_DataSet))
?setNames
